C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE COM
OBJECT MODULE PLACED IN .\list\com.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE com.c COMPACT OPTIMIZE(1,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\list\com.
                    -lst) OBJECT(.\list\com.obj)

line level    source

   1          /*
   2          *******************************************************************************
   3          **  Copyright (c) 2014, 深圳市北海轨道交通技术有限公司
   4          **  All rights reserved.
   5          **      
   6          **  文件说明: 
   7          **  创建日期: 2014.01.03
   8          **
   9          **  当前版本：1.0
  10          **  作者：李军
  11          *******************************************************************************
  12          */
  13          #include<stat_switch.h>
  14          #include "timer.h"
  15          #include "key.h"
  16          #include "led_control.h"
  17          #include "com.h"
  18          
  19          
  20          #define TBA_PACKET_TAB                  0x7E    //数据包分割符
  21          #define TBA_PACKET_DLE                  0x7F    //数据包全局转码符
  22          #define TBA_PACKET_DLE_TAB              0x80    //数据包分割符的转码符
  23          #define TBA_PACKET_DLE_DLE              0x81    //数据包转码符的转码符
  24          
  25          
  26          
  27          #define UART2_BUF_LEN      50
  28          #define BCU_DATA_LEN        44
  29          
  30          static byte xdata BcuPacketBuf[BCU_DATA_LEN]={0};
  31          static byte xdata gTrainRecvPacketBuf[UART2_BUF_LEN];
  32          static byte xdata gTrainRecvPaketLength = 0;
  33          
  34          static byte xdata gBoxDataSendCnt = 0;
  35          
  36          static byte xdata gKeyTypeOld = 0;
  37          
  38          byte xdata gUart2TxBuf[UART2_BUF_LEN];
  39          byte xdata gUart2TxIndex = 0;
  40          byte xdata gUart2TxCnt = 0;
  41          
  42          
  43          
  44          byte xdata uart2_recv_buf[UART2_BUF_LEN];
  45          
  46          byte uart2_recv_fifo_in = 0;
  47          byte uart2_recv_fifo_out =0;
  48          
  49          byte uart2_send_cnt;
  50          byte uart2_send_index;
  51          
  52          byte uart2_stat = 0;  // 1:send now    0:idle
  53          
  54          byte repeat_send_now = 0;
C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 2   

  55          
  56          byte uart2_busy()
  57          {
  58   1              return uart2_stat;
  59   1      }
  60          
  61          void uart2_set_busy()
  62          {
  63   1              uart2_stat = 1;
  64   1      }
  65          
  66          void uart2_clr_busy()
  67          {
  68   1              uart2_stat = 0;
  69   1      }
  70          
  71          
  72          byte GetUartIfSend(void)
  73          {
  74   1              return repeat_send_now;
  75   1      }
  76          
  77          byte uart2_read_char(byte *ch)
  78          { 
  79   1          if(uart2_recv_fifo_out == uart2_recv_fifo_in)
  80   1              return 0;
  81   1          *ch = uart2_recv_buf[uart2_recv_fifo_out++];
  82   1          if(uart2_recv_fifo_out == UART2_BUF_LEN)
  83   1              uart2_recv_fifo_out = 0;
  84   1          return 1;
  85   1      }
  86          
  87          
  88          void UART2_int(void) interrupt 8
  89          {
  90   1              byte tmp;
  91   1      
  92   1              if(RI2)
  93   1              {
  94   2                      CLR_RI2();
  95   2                      tmp = S2BUF;
  96   2                      uart2_recv_buf[uart2_recv_fifo_in++] = (byte)tmp;
  97   2                      if(uart2_recv_fifo_in >= UART2_BUF_LEN)
  98   2                      {
  99   3                              uart2_recv_fifo_in = 0;
 100   3                      }
 101   2                      
 102   2              }
 103   1              if (TI2)
 104   1              {
 105   2                      CLR_TI2();
 106   2                      if (gUart2TxCnt > 0)
 107   2                      {
 108   3                              S2BUF = gUart2TxBuf[gUart2TxIndex];
 109   3                              gUart2TxIndex ++;
 110   3                              gUart2TxCnt --;
 111   3                      }
 112   2                      else 
 113   2                      {
 114   3                              uart2_clr_busy();
 115   3                              //Com_R_W =0;
 116   3                      }
C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 3   

 117   2              }
 118   1      
 119   1      }
 120          
 121          
 122          
 123          
 124          
 125          
 126          
 127          /*
 128          执行转码并判断校验
 129          */
 130          byte VerifyPaket(byte *paketBuf, byte length)
 131          {
 132   1          byte recv_flag=0;
 133   1          byte checksum=0;
 134   1          byte src_length=0;//逆转码之前的长度
 135   1          byte dst_length=0;//逆转码以后的长度
 136   1      //    static u8 length_of_send = 0;
 137   1                  
 138   1                 //执行逆转码 并计算校验和
 139   1                 for(src_length=0; src_length<length; src_length++)
 140   1                  {
 141   2                              //拷贝数据
 142   2                              paketBuf[dst_length]=paketBuf[src_length];
 143   2                              //判断刚刚拷贝的是否是转码符
 144   2                              if(paketBuf[src_length]==TBA_PACKET_DLE && src_length<length-1)
 145   2                              {
 146   3                                      //判断下一个字符是否是分割符的转码符 把刚刚拷贝的转码符还原为TMS_PACKET_TAB 并跳过下一个字符
 147   3                                      if(paketBuf[src_length+1]==TBA_PACKET_DLE_TAB)
 148   3                                      {
 149   4                                              paketBuf[dst_length]=TBA_PACKET_TAB;//把刚刚拷贝的转码符还原为TMS_PACKET_TAB
 150   4                                              src_length++;//并跳过下一个字符
 151   4                                      }
 152   3                                      //判断下一个字符是否是转码符的转码符 把刚刚拷贝的转码符还原为TMS_PACKET_DLE 并跳过下一个字符
 153   3                                      else if(paketBuf[src_length+1]==TBA_PACKET_DLE_DLE)
 154   3                                      {
 155   4                                              paketBuf[dst_length]=TBA_PACKET_DLE;//把刚刚拷贝的转码符还原为TMS_PACKET_DLE
 156   4                                              src_length++;//并跳过下一个字符
 157   4                                      }
 158   3                                      else
 159   3                                      {
 160   4                                              //print_line("tms 7f error");
 161   4                                              //数据错误----7f没有被正确转码
 162   4                                              dst_length=0;//清除转码以后的长度
 163   4                                              break;
 164   4                                      }
 165   3                              } 
 166   2                              checksum+=paketBuf[dst_length];
 167   2                              dst_length++;
 168   2                  }
 169   1                 
 170   1                      if(checksum == 0x55)
 171   1                      {
 172   2                              recv_flag = dst_length-1;  //减掉校验和的长度
 173   2                      }
 174   1                      else
 175   1                      {
 176   2                              recv_flag = 0;
 177   2                      }
 178   1                      
C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 4   

 179   1                      return recv_flag;
 180   1      }
 181          
 182          
 183          
 184          /*
 185          功能:  实现数据打包，
 186                       1、添加包头7E
 187                       2、添加包尾7E
 188                       3、数据转码
 189                       4、计算校验和
 190          */
 191          byte PackageData( byte *destBuf, byte *srcBuf, byte length )
 192          {
 193   1              byte send_length = 0;
 194   1              byte checksum=0;
 195   1              byte cnt = 0;
 196   1              byte *ptr = NULL;
 197   1      
 198   1      
 199   1              destBuf[send_length++] = 0x7e;
 200   1      
 201   1             ptr = (byte *)srcBuf;
 202   1              for(cnt = 0; cnt < length; cnt++)
 203   1              {
 204   2                  if(*ptr == 0x7e)
 205   2                  {
 206   3                       destBuf[send_length++] = 0x7f;
 207   3                         destBuf[send_length++] = 0x80;
 208   3                  }
 209   2                  else if(*ptr == 0x7f)
 210   2                  {
 211   3                      destBuf[send_length++] = 0x7f;
 212   3                      destBuf[send_length++] = 0x81;
 213   3                  }
 214   2                   else
 215   2                   {
 216   3                       destBuf[send_length++] = *ptr;
 217   3                   }
 218   2                   checksum += *ptr;
 219   2                   ptr++;
 220   2              }
 221   1      
 222   1              checksum = 0x55 -checksum;
 223   1            //校验和
 224   1              if(checksum == 0x7e)
 225   1              {
 226   2                  destBuf[send_length++] = 0x7f;
 227   2                destBuf[send_length++] = 0x80;
 228   2              }
 229   1              else if(checksum == 0x7f)
 230   1              {
 231   2                  destBuf[send_length++] = 0x7f;
 232   2                 destBuf[send_length++] = 0x81;
 233   2              }
 234   1            else
 235   1              {
 236   2                  destBuf[send_length++] = checksum;
 237   2              }
 238   1              //send_buf[send_length++] = checksum;  //校验和
 239   1            destBuf[send_length++] = 0x7e;
 240   1      
C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 5   

 241   1              return send_length;
 242   1      }
 243          
 244          
 245          
 246          
 247          
 248          void Uart2StartSend(byte *buf, byte len)
 249          {
 250   1              byte i;
 251   1      
 252   1              if (!uart2_busy())
 253   1              {
 254   2                      //Com_R_W = 1 ;  // 开发送
 255   2                      uart2_set_busy();       
 256   2                      for (i=0; i<len; i++)
 257   2                      {
 258   3                              gUart2TxBuf[i] = buf[i];
 259   3                      }
 260   2                      S2BUF = buf[0];
 261   2                      gUart2TxIndex = 1;
 262   2                      gUart2TxCnt = len-1;
 263   2              }
 264   1      }
 265          
 266          byte gKeyPcSt=0;
 267          byte gKeyCcSt=1;
 268          byte gKeyPASt = 1;
 269          byte gKeyPttSt = 1;
 270          byte gKeyPcRstSt = 1;
 271          byte gKeyLedTestSt = 1;
 272          
 273          
 274          //发送到bcu数据
 275          byte BoxDataSend( byte* buf, byte length )
 276          {
 277   1              byte xdata sendBuf[30];
 278   1              byte sendLen;
 279   1      
 280   1              buf[18] = gKeyPASt;
 281   1              buf[19] = gKeyCcSt;
 282   1              buf[20] = gKeyPcSt;
 283   1              buf[21] = gKeyPttSt;
 284   1              buf[22]= gKeyPcRstSt;
 285   1              
 286   1              sendLen = PackageData( sendBuf, buf, length );
 287   1              Uart2StartSend( sendBuf, sendLen );
 288   1              return sendLen;
 289   1      }
 290          
 291          void BoxDataUpdateKeyLedTest(byte stat)
 292          {
 293   1              gKeyLedTestSt = stat;
 294   1      }
 295          
 296          void BoxDataUpdateKeyPa(byte stat)
 297          {
 298   1              gKeyPASt = stat;
 299   1      }
 300          
 301          void BoxDataUpdateKeyCc(byte stat)
 302          {
C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 6   

 303   1              gKeyCcSt = stat;
 304   1      }
 305          
 306          void BoxDataUpdateKeyPc(byte stat)
 307          {
 308   1              gKeyPcSt= stat;
 309   1      }
 310          
 311          void BoxDataUpdateKeyPcRst(byte stat)
 312          {
 313   1              gKeyPcRstSt= stat;
 314   1      }
 315          
 316          void BoxDataUpdateKeyPtt(byte stat)
 317          {
 318   1              gKeyPttSt = stat;
 319   1      }
 320          
 321          void BoxDataSendKey(  )
 322          {
 323   1              byte buf[11] = { 0x00, 0xf2, 0x00, 0x19, 0x00, 0x01, 0xaa, 0xaa, 0xaa, 0xaa,0xaa};
 324   1      
 325   1              buf[6] = gKeyPASt;
 326   1              buf[7] = gKeyCcSt;
 327   1              buf[8] = gKeyPcSt;
 328   1              buf[9] = gKeyPttSt;
 329   1              buf[10]= gKeyPcRstSt;
 330   1              BoxDataSend(buf, 11);
 331   1      }
 332          
 333          static void BoxDataSendRepeat(void)
 334          {
 335   1              static unsigned long tick;
 336   1              
 337   1              if (uart2_busy())  // car 485
 338   1              {
 339   2                      tick = gSys10msTick;
 340   2              }
 341   1              else 
 342   1              {
 343   2                      if (gSys10msTick - tick > 10)
 344   2                      {
 345   3                              BoxDataSendKey(  );
 346   3                      }
 347   2              }
 348   1      }
 349          
 350          
 351          static byte BoxDataGetPacket(void)
 352          {
 353   1              byte temp;
 354   1              while(uart2_read_char(&temp))
 355   1              {                       
 356   2                      if(temp == 0x7e)
 357   2                      {
 358   3                              //判断长度 判断是否有数据
 359   3                              if(gTrainRecvPaketLength >= 3)
 360   3                              {
 361   4                                      return 1;
 362   4                              }
 363   3                              gTrainRecvPaketLength=0;
 364   3                      }
C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 7   

 365   2                      //其他字符串直接送缓冲区
 366   2                      else
 367   2                      {
 368   3                              gTrainRecvPacketBuf[gTrainRecvPaketLength] = temp;
 369   3                              if( ++gTrainRecvPaketLength >= 255 )
 370   3                                      gTrainRecvPaketLength = 0;
 371   3                      }
 372   2              }
 373   1              return 0;
 374   1      }
 375          
 376          
 377          
 378          
 379          void BoxDataProc(void)
 380          {
 381   1              tFrameHeader *frameHeader;
 382   1              byte  len;
 383   1              byte temp;
 384   1              byte i;
 385   1              //eTalkStat talkStat;
 386   1      
 387   1              //BoxDataSendRepeat(); //测试串口
 388   1      
 389   1              
 390   1              // 1. 收BCU 数据
 391   1              if (BoxDataGetPacket()) 
 392   1              {
 393   2                      //LcdSend( gTrainRecvPacketBuf, gTrainRecvPaketLength );  //转发数据给lcd
 394   2                      
 395   2                      len = VerifyPaket( gTrainRecvPacketBuf, gTrainRecvPaketLength );
 396   2                      frameHeader = (tFrameHeader *)gTrainRecvPacketBuf;
 397   2                      if ( len > 0 && ((frameHeader->dest_device_id &0x0f) == 0x09)) 
 398   2                      {
 399   3                              for(i= 0; i<BCU_DATA_LEN ; i++)
 400   3                              {
 401   4                                      BcuPacketBuf[i] = gTrainRecvPacketBuf[i];
 402   4                              }
 403   3                              LcdSend( BcuPacketBuf, BCU_DATA_LEN );  //转发数据给lcd
 404   3                      
 405   3                              //设置pc灯
 406   3                              temp = frameHeader->data_area[0];
 407   3                              //talkStat = GetTalkStat();
 408   3                              if (temp == 0x01)
 409   3                              {
 410   4                                      SetTalkStat(TALK_STAT_ALARM);
 411   4                                      SetPcStat(LED_PC_FLASH);
 412   4                              }
 413   3                              else if (temp == 0x02) 
 414   3                              {
 415   4                                      SetTalkStat(TALK_STAT_CONN);
 416   4                                      SetPcStat(LED_PC_OPEN);
 417   4                                      MIC_CTRL_PIN = 0;
 418   4                              }
 419   3                              else if (temp == 0x03) 
 420   3                              {
 421   4                                      gKeyTypeOld = KEY_TYPE_NULL;
 422   4                                      SetTalkStat(TALK_STAT_IDLE);
 423   4                                      SetPcStat(LED_PC_CLOSE);
 424   4                              }                       
 425   3      
 426   3                              //设置cc灯   0无   1对侧   2本侧
C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 8   

 427   3                              temp = frameHeader->data_area[1];
 428   3                              if (temp == 0x00)
 429   3                              {
 430   4                                      SetCcStat(LED_PC_CLOSE);                                
 431   4                              }
 432   3                              else if (temp == 0x01) 
 433   3                              {
 434   4                                      SetCcStat(LED_PC_FLASH);                                
 435   4                              }
 436   3                              else if (temp == 0x02) 
 437   3                              {                       
 438   4                                      SetCcStat(LED_PC_OPEN);
 439   4                                      MIC_CTRL_PIN = 0;
 440   4                              }       
 441   3      
 442   3                              //设置pa灯   0   1申请   2申请成功
 443   3                              temp = frameHeader->data_area[2];
 444   3                              if (temp == 0x00)
 445   3                              {
 446   4                                      SetPaStat(LED_PC_CLOSE);                                
 447   4                              }
 448   3                              else if (temp == 0x01) 
 449   3                              {
 450   4                                      SetPaStat(LED_PC_FLASH);                                
 451   4                              }
 452   3                              else if (temp == 0x02) 
 453   3                              {                       
 454   4                                      SetPaStat(LED_PC_OPEN);
 455   4                                      MIC_CTRL_PIN = 0;
 456   4                              }       
 457   3      
 458   3                              if(frameHeader->data_area[0] ==3 && frameHeader->data_area[1] == 0
 459   3                                      && frameHeader->data_area[2] == 0)
 460   3                                      MIC_CTRL_PIN = 1;
 461   3      
 462   3                              //BoxDataSendRepeat();
 463   3                              //BoxDataSend(gTrainRecvPacketBuf, gTrainRecvPaketLength);
 464   3                              
 465   3                      }
 466   2                      gTrainRecvPaketLength = 0;
 467   2              }       
 468   1      
 469   1              
 470   1      }
 471          
 472          
 473          void BoxDataInit(void)
 474          {
 475   1              gBoxDataSendCnt = 0;
 476   1      
 477   1      }
 478          
 479          
 480          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2246    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =    229    ----
   PDATA SIZE       =     75    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V8.08   COM                                                                   11/14/2014 14:07:29 PAGE 9   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
