; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\playpcm.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\output\playpcm.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport -I..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Nuvoton --omf_browse=..\output\playpcm.crf ..\src\playPCM.c]
                          THUMB

                          AREA ||i.DPWM_init||, CODE, READONLY, ALIGN=2

                  DPWM_init PROC
;;;41     
;;;42     void DPWM_init(void)
000000  b510              PUSH     {r4,lr}
;;;43     {
;;;44     	DrvPDMA_Init();
000002  f7fffffe          BL       DrvPDMA_Init
;;;45     
;;;46     	if(!SYSCLK->APBCLK.ANA_EN)
000006  4813              LDR      r0,|L1.84|
000008  6880              LDR      r0,[r0,#8]
00000a  0040              LSLS     r0,r0,#1
00000c  0fc0              LSRS     r0,r0,#31
00000e  d114              BNE      |L1.58|
;;;47     	{
;;;48     		SYSCLK->APBCLK.ANA_EN = 1;
000010  4810              LDR      r0,|L1.84|
000012  6880              LDR      r0,[r0,#8]
000014  2101              MOVS     r1,#1
000016  0789              LSLS     r1,r1,#30
000018  4388              BICS     r0,r0,r1
00001a  1840              ADDS     r0,r0,r1
00001c  490d              LDR      r1,|L1.84|
00001e  6088              STR      r0,[r1,#8]
;;;49     		SYS->IPRSTC2.ANA_RST = 1;
000020  480d              LDR      r0,|L1.88|
000022  68c0              LDR      r0,[r0,#0xc]
000024  490d              LDR      r1,|L1.92|
000026  4388              BICS     r0,r0,r1
000028  1840              ADDS     r0,r0,r1
00002a  490b              LDR      r1,|L1.88|
00002c  60c8              STR      r0,[r1,#0xc]
;;;50     		SYS->IPRSTC2.ANA_RST = 0;
00002e  4608              MOV      r0,r1
000030  68c0              LDR      r0,[r0,#0xc]
000032  490a              LDR      r1,|L1.92|
000034  4388              BICS     r0,r0,r1
000036  4908              LDR      r1,|L1.88|
000038  60c8              STR      r0,[r1,#0xc]
                  |L1.58|
;;;51     	}
;;;52     
;;;53     	DrvDPWM_Open();
00003a  f7fffffe          BL       DrvDPWM_Open
;;;54     	DrvDPWM_SetDPWMClk(E_DRVDPWM_DPWMCLK_HCLKX2);
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       DrvDPWM_SetDPWMClk
;;;55     	
;;;56     	DrvDPWM_SetSampleRate(16000);
000044  207d              MOVS     r0,#0x7d
000046  01c0              LSLS     r0,r0,#7
000048  f7fffffe          BL       DrvDPWM_SetSampleRate
;;;57     	DrvDPWM_Enable();	
00004c  f7fffffe          BL       DrvDPWM_Enable
;;;58     }
000050  bd10              POP      {r4,pc}
;;;59     
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
                          DCD      0x50000200
                  |L1.88|
                          DCD      0x50000000
                  |L1.92|
                          DCD      0x40000000

                          AREA ||i.PDMA1_Callback||, CODE, READONLY, ALIGN=2

                  PDMA1_Callback PROC
;;;84     
;;;85     static void PDMA1_Callback(void)
000000  b510              PUSH     {r4,lr}
;;;86     {
;;;87     	uint8_t i;
;;;88     	
;;;89     	PDMA1Counter++;
000002  4847              LDR      r0,|L2.288|
000004  6800              LDR      r0,[r0,#0]  ; PDMA1Counter
000006  1c40              ADDS     r0,r0,#1
000008  4945              LDR      r1,|L2.288|
00000a  6008              STR      r0,[r1,#0]  ; PDMA1Counter
;;;90     	
;;;91     	if(PDMA1Counter & 0x01)
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]  ; PDMA1Counter
000010  07c0              LSLS     r0,r0,#31
000012  0fc0              LSRS     r0,r0,#31
000014  d042              BEQ      |L2.156|
;;;92     	{
;;;93     		BufferReadyAddr = (uint32_t)(&audio_buf[1][0]);
000016  4843              LDR      r0,|L2.292|
000018  4943              LDR      r1,|L2.296|
00001a  6008              STR      r0,[r1,#0]  ; BufferReadyAddr
;;;94     		for(i = 0; i < BUFFER_SAMPLECOUNT; i++)
00001c  2400              MOVS     r4,#0
00001e  e03a              B        |L2.150|
                  |L2.32|
;;;95     		{
;;;96     			audio_buf[0][i] = audio_table[audiotack_index++] << 8;
000020  4842              LDR      r0,|L2.300|
000022  6801              LDR      r1,[r0,#0]  ; audiotack_index
000024  6800              LDR      r0,[r0,#0]  ; audiotack_index
000026  1c40              ADDS     r0,r0,#1
000028  4a40              LDR      r2,|L2.300|
00002a  6010              STR      r0,[r2,#0]  ; audiotack_index
00002c  4840              LDR      r0,|L2.304|
00002e  5c40              LDRB     r0,[r0,r1]
000030  0200              LSLS     r0,r0,#8
000032  b200              SXTH     r0,r0
000034  0061              LSLS     r1,r4,#1
000036  4a3b              LDR      r2,|L2.292|
000038  3a60              SUBS     r2,r2,#0x60
00003a  5250              STRH     r0,[r2,r1]
;;;97     			audio_buf[0][i] |= audio_table[audiotack_index++];
00003c  0060              LSLS     r0,r4,#1
00003e  4611              MOV      r1,r2
000040  5e08              LDRSH    r0,[r1,r0]
000042  493a              LDR      r1,|L2.300|
000044  680a              LDR      r2,[r1,#0]  ; audiotack_index
000046  6809              LDR      r1,[r1,#0]  ; audiotack_index
000048  1c49              ADDS     r1,r1,#1
00004a  4b38              LDR      r3,|L2.300|
00004c  6019              STR      r1,[r3,#0]  ; audiotack_index
00004e  4938              LDR      r1,|L2.304|
000050  5c89              LDRB     r1,[r1,r2]
000052  4308              ORRS     r0,r0,r1
000054  0061              LSLS     r1,r4,#1
000056  4a33              LDR      r2,|L2.292|
000058  3a60              SUBS     r2,r2,#0x60
00005a  5250              STRH     r0,[r2,r1]
;;;98     
;;;99     			if(audiotack_index >= FILE_LEN)
00005c  4618              MOV      r0,r3
00005e  6800              LDR      r0,[r0,#0]  ; audiotack_index
000060  4934              LDR      r1,|L2.308|
000062  4288              CMP      r0,r1
000064  d315              BCC      |L2.146|
;;;100    			{
;;;101    				audiotack_index = 0;
000066  2000              MOVS     r0,#0
000068  4619              MOV      r1,r3
00006a  6008              STR      r0,[r1,#0]  ; audiotack_index
;;;102    //				PDMA1Counter = 0;
;;;103    
;;;104    //				PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.PDMACEN = 0;
;;;105    //				PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.TRIG_EN = 0;
;;;106    
;;;107    //				DrvDPWM_DisablePDMA();
;;;108    
;;;109    				// 修改
;;;110    				PDMA1Counter = 0;
00006c  492c              LDR      r1,|L2.288|
00006e  6008              STR      r0,[r1,#0]  ; PDMA1Counter
;;;111    
;;;112    				PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.PDMACEN = 0;
000070  4831              LDR      r0,|L2.312|
000072  6800              LDR      r0,[r0,#0]
000074  0840              LSRS     r0,r0,#1
000076  0040              LSLS     r0,r0,#1
000078  492f              LDR      r1,|L2.312|
00007a  6008              STR      r0,[r1,#0]
;;;113    				PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.TRIG_EN = 0;
00007c  4608              MOV      r0,r1
00007e  6800              LDR      r0,[r0,#0]
000080  492e              LDR      r1,|L2.316|
000082  4388              BICS     r0,r0,r1
000084  492c              LDR      r1,|L2.312|
000086  6008              STR      r0,[r1,#0]
;;;114    
;;;115    				DrvDPWM_DisablePDMA();
000088  f7fffffe          BL       DrvDPWM_DisablePDMA
;;;116    
;;;117    				playback_over_flag = 1;			// “忙”提示语音循环播放完毕标志置1
00008c  2001              MOVS     r0,#1
00008e  492c              LDR      r1,|L2.320|
000090  7008              STRB     r0,[r1,#0]
                  |L2.146|
000092  1c60              ADDS     r0,r4,#1              ;94
000094  b2c4              UXTB     r4,r0                 ;94
                  |L2.150|
000096  2c30              CMP      r4,#0x30              ;94
000098  dbc2              BLT      |L2.32|
00009a  e03f              B        |L2.284|
                  |L2.156|
;;;118    			}
;;;119    		}
;;;120    	}
;;;121    	else
;;;122    	{
;;;123    		BufferReadyAddr = (uint32_t)(&audio_buf[0][0]);
00009c  4821              LDR      r0,|L2.292|
00009e  3860              SUBS     r0,r0,#0x60
0000a0  4921              LDR      r1,|L2.296|
0000a2  6008              STR      r0,[r1,#0]  ; BufferReadyAddr
;;;124    		for(i = 0; i < BUFFER_SAMPLECOUNT; i++)
0000a4  2400              MOVS     r4,#0
0000a6  e037              B        |L2.280|
                  |L2.168|
;;;125    		{
;;;126    			audio_buf[1][i] = audio_table[audiotack_index++] << 8;
0000a8  4820              LDR      r0,|L2.300|
0000aa  6801              LDR      r1,[r0,#0]  ; audiotack_index
0000ac  6800              LDR      r0,[r0,#0]  ; audiotack_index
0000ae  1c40              ADDS     r0,r0,#1
0000b0  4a1e              LDR      r2,|L2.300|
0000b2  6010              STR      r0,[r2,#0]  ; audiotack_index
0000b4  481e              LDR      r0,|L2.304|
0000b6  5c40              LDRB     r0,[r0,r1]
0000b8  0200              LSLS     r0,r0,#8
0000ba  b201              SXTH     r1,r0
0000bc  0062              LSLS     r2,r4,#1
0000be  4819              LDR      r0,|L2.292|
0000c0  5281              STRH     r1,[r0,r2]
;;;127    			audio_buf[1][i] |= audio_table[audiotack_index++];
0000c2  0061              LSLS     r1,r4,#1
0000c4  5e40              LDRSH    r0,[r0,r1]
0000c6  4919              LDR      r1,|L2.300|
0000c8  680a              LDR      r2,[r1,#0]  ; audiotack_index
0000ca  6809              LDR      r1,[r1,#0]  ; audiotack_index
0000cc  1c49              ADDS     r1,r1,#1
0000ce  4b17              LDR      r3,|L2.300|
0000d0  6019              STR      r1,[r3,#0]  ; audiotack_index
0000d2  4917              LDR      r1,|L2.304|
0000d4  5c89              LDRB     r1,[r1,r2]
0000d6  4308              ORRS     r0,r0,r1
0000d8  0062              LSLS     r2,r4,#1
0000da  4912              LDR      r1,|L2.292|
0000dc  5288              STRH     r0,[r1,r2]
;;;128    			if(audiotack_index >= FILE_LEN)
0000de  4618              MOV      r0,r3
0000e0  6800              LDR      r0,[r0,#0]  ; audiotack_index
0000e2  4914              LDR      r1,|L2.308|
0000e4  4288              CMP      r0,r1
0000e6  d315              BCC      |L2.276|
;;;129    			{
;;;130    				audiotack_index = 0;
0000e8  2000              MOVS     r0,#0
0000ea  4619              MOV      r1,r3
0000ec  6008              STR      r0,[r1,#0]  ; audiotack_index
;;;131    //				PDMA1Counter = 0;
;;;132    
;;;133    //				PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.PDMACEN = 0;
;;;134    //				PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.TRIG_EN = 0;
;;;135    
;;;136    //				DrvDPWM_DisablePDMA();
;;;137    
;;;138    				// 修改
;;;139    				PDMA1Counter = 0;
0000ee  490c              LDR      r1,|L2.288|
0000f0  6008              STR      r0,[r1,#0]  ; PDMA1Counter
;;;140    
;;;141    				PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.PDMACEN = 0;
0000f2  4811              LDR      r0,|L2.312|
0000f4  6800              LDR      r0,[r0,#0]
0000f6  0840              LSRS     r0,r0,#1
0000f8  0040              LSLS     r0,r0,#1
0000fa  490f              LDR      r1,|L2.312|
0000fc  6008              STR      r0,[r1,#0]
;;;142    				PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.TRIG_EN = 0;
0000fe  4608              MOV      r0,r1
000100  6800              LDR      r0,[r0,#0]
000102  490e              LDR      r1,|L2.316|
000104  4388              BICS     r0,r0,r1
000106  490c              LDR      r1,|L2.312|
000108  6008              STR      r0,[r1,#0]
;;;143    
;;;144    				DrvDPWM_DisablePDMA();
00010a  f7fffffe          BL       DrvDPWM_DisablePDMA
;;;145    
;;;146    				playback_over_flag = 1;			// “忙”提示语音循环播放完毕标志置1
00010e  2001              MOVS     r0,#1
000110  490b              LDR      r1,|L2.320|
000112  7008              STRB     r0,[r1,#0]
                  |L2.276|
000114  1c60              ADDS     r0,r4,#1              ;124
000116  b2c4              UXTB     r4,r0                 ;124
                  |L2.280|
000118  2c30              CMP      r4,#0x30              ;124
00011a  dbc5              BLT      |L2.168|
                  |L2.284|
;;;147    			}
;;;148    		}
;;;149    	}	
;;;150    }
00011c  bd10              POP      {r4,pc}
                          ENDP

00011e  0000              DCW      0x0000
                  |L2.288|
                          DCD      PDMA1Counter
                  |L2.292|
                          DCD      audio_buf+0x60
                  |L2.296|
                          DCD      BufferReadyAddr
                  |L2.300|
                          DCD      audiotack_index
                  |L2.304|
                          DCD      audio_table
                  |L2.308|
                          DCD      0x0001e879
                  |L2.312|
                          DCD      0x50008100
                  |L2.316|
                          DCD      0x00800000
                  |L2.320|
                          DCD      playback_over_flag

                          AREA ||i.PDMA1forDPWM||, CODE, READONLY, ALIGN=2

                  PDMA1forDPWM PROC
;;;59     
;;;60     static void PDMA1forDPWM(void)
000000  b500              PUSH     {lr}
;;;61     {
000002  b087              SUB      sp,sp,#0x1c
;;;62     	STR_PDMA_T sPDMA;
;;;63     
;;;64     	sPDMA.sSrcAddr.u32Addr = BufferReadyAddr;
000004  4816              LDR      r0,|L3.96|
000006  6800              LDR      r0,[r0,#0]  ; BufferReadyAddr
000008  9001              STR      r0,[sp,#4]
;;;65     	sPDMA.sDestAddr.u32Addr = (uint32_t)&DPWM->FIFO;
00000a  4816              LDR      r0,|L3.100|
00000c  9003              STR      r0,[sp,#0xc]
;;;66     	sPDMA.u8Mode = eDRVPDMA_MODE_MEM2APB;
00000e  2102              MOVS     r1,#2
000010  4668              MOV      r0,sp
000012  7541              STRB     r1,[r0,#0x15]
;;;67     	sPDMA.u8TransWidth = eDRVPDMA_WIDTH_16BITS;
000014  7501              STRB     r1,[r0,#0x14]
;;;68     	sPDMA.sSrcAddr.eAddrDirection = eDRVPDMA_DIRECTION_WRAPAROUND;
000016  2103              MOVS     r1,#3
000018  7201              STRB     r1,[r0,#8]
;;;69     	sPDMA.sDestAddr.eAddrDirection = eDRVPDMA_DIRECTION_FIXED;
00001a  2102              MOVS     r1,#2
00001c  a801              ADD      r0,sp,#4
00001e  7301              STRB     r1,[r0,#0xc]
;;;70     	sPDMA.u8WrapBcr = eDRVPDMA_WRA_WRAP_HALF_INT;			// Interrupt condition set for Half buffer & buffer end		// For WRAPROUND
000020  2105              MOVS     r1,#5
000022  4668              MOV      r0,sp
000024  7581              STRB     r1,[r0,#0x16]
;;;71     	sPDMA.i32ByteCnt = BufferSampleCount * 4;
000026  4810              LDR      r0,|L3.104|
000028  6800              LDR      r0,[r0,#0]  ; BufferSampleCount
00002a  0080              LSLS     r0,r0,#2
00002c  9006              STR      r0,[sp,#0x18]
;;;72     	DrvPDMA_Open(eDRVPDMA_CHANNEL_1, &sPDMA);
00002e  a901              ADD      r1,sp,#4
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       DrvPDMA_Open
;;;73     
;;;74     	DrvPDMA_SetCHForAPBDevice(eDRVPDMA_CHANNEL_1, eDRVPDMA_DPWM, eDRVPDMA_WRITE_APB);
000036  2201              MOVS     r2,#1
000038  4611              MOV      r1,r2
00003a  4610              MOV      r0,r2
00003c  f7fffffe          BL       DrvPDMA_SetCHForAPBDevice
;;;75     
;;;76     	DrvPDMA_EnableInt(eDRVPDMA_CHANNEL_1, eDRVPDMA_WAR);		// For WARPROUND
000040  2104              MOVS     r1,#4
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       DrvPDMA_EnableInt
;;;77     
;;;78     	DrvPDMA_InstallCallBack(eDRVPDMA_CHANNEL_1, eDRVPDMA_WAR, (PFN_DRVPDMA_CALLBACK)PDMA1_Callback);
000048  4a08              LDR      r2,|L3.108|
00004a  2104              MOVS     r1,#4
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       DrvPDMA_InstallCallBack
;;;79     
;;;80     	DrvDPWM_EnablePDMA();
000052  f7fffffe          BL       DrvDPWM_EnablePDMA
;;;81     
;;;82     	DrvPDMA_CHEnablelTransfer(eDRVPDMA_CHANNEL_1);
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       DrvPDMA_CHEnablelTransfer
;;;83     } 
00005c  b007              ADD      sp,sp,#0x1c
00005e  bd00              POP      {pc}
;;;84     
                          ENDP

                  |L3.96|
                          DCD      BufferReadyAddr
                  |L3.100|
                          DCD      0x4007000c
                  |L3.104|
                          DCD      BufferSampleCount
                  |L3.108|
                          DCD      PDMA1_Callback

                          AREA ||i.playback_start||, CODE, READONLY, ALIGN=2

                  playback_start PROC
;;;22     
;;;23     void playback_start(void)
000000  b510              PUSH     {r4,lr}
;;;24     {
;;;25     	BufferSampleCount = BUFFER_SAMPLECOUNT;	
000002  2030              MOVS     r0,#0x30
000004  4903              LDR      r1,|L4.20|
000006  6008              STR      r0,[r1,#0]  ; BufferSampleCount
;;;26     	BufferReadyAddr = (uint32_t)(&audio_buf[0][0]);
000008  4803              LDR      r0,|L4.24|
00000a  4904              LDR      r1,|L4.28|
00000c  6008              STR      r0,[r1,#0]  ; BufferReadyAddr
;;;27     
;;;28     	PDMA1forDPWM();
00000e  f7fffffe          BL       PDMA1forDPWM
;;;29     }
000012  bd10              POP      {r4,pc}
;;;30     
                          ENDP

                  |L4.20|
                          DCD      BufferSampleCount
                  |L4.24|
                          DCD      audio_buf
                  |L4.28|
                          DCD      BufferReadyAddr

                          AREA ||i.playback_stop||, CODE, READONLY, ALIGN=2

                  playback_stop PROC
;;;30     
;;;31     void playback_stop(void)
000000  b510              PUSH     {r4,lr}
;;;32     {
;;;33     	PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.PDMACEN = 0;
000002  480a              LDR      r0,|L5.44|
000004  6800              LDR      r0,[r0,#0]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  4908              LDR      r1,|L5.44|
00000c  6008              STR      r0,[r1,#0]
;;;34     	PDMA->channel[eDRVPDMA_CHANNEL_1].CSR.TRIG_EN = 0;
00000e  4608              MOV      r0,r1
000010  6800              LDR      r0,[r0,#0]
000012  4907              LDR      r1,|L5.48|
000014  4388              BICS     r0,r0,r1
000016  4905              LDR      r1,|L5.44|
000018  6008              STR      r0,[r1,#0]
;;;35     
;;;36     	DrvDPWM_DisablePDMA();
00001a  f7fffffe          BL       DrvDPWM_DisablePDMA
;;;37     
;;;38     	PDMA1Counter = 0;
00001e  2000              MOVS     r0,#0
000020  4904              LDR      r1,|L5.52|
000022  6008              STR      r0,[r1,#0]  ; PDMA1Counter
;;;39     	audiotack_index = 0; 	
000024  4904              LDR      r1,|L5.56|
000026  6008              STR      r0,[r1,#0]  ; audiotack_index
;;;40     }
000028  bd10              POP      {r4,pc}
;;;41     
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x50008100
                  |L5.48|
                          DCD      0x00800000
                  |L5.52|
                          DCD      PDMA1Counter
                  |L5.56|
                          DCD      audiotack_index

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  audio_buf
                          %        192

                          AREA ||.data||, DATA, ALIGN=2

                  BufferSampleCount
                          DCD      0x00000000
                  BufferReadyAddr
                          DCD      0x00000000
                  PDMA1Counter
                          DCD      0x00000000
                  audiotack_index
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\src\\playPCM.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_playPCM_c_7459036b____REV16|
#line 112 "..\\..\\ISD91XX_SDK\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___9_playPCM_c_7459036b____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_playPCM_c_7459036b____REVSH|
#line 130
|__asm___9_playPCM_c_7459036b____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
