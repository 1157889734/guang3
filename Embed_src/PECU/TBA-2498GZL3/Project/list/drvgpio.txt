; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\drvgpio.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\output\drvgpio.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport -I..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Nuvoton --omf_browse=..\output\drvgpio.crf ..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\DrvGPIO.c]
                          THUMB

                          AREA ||i.DrvGPIO_Close||, CODE, READONLY, ALIGN=2

                  DrvGPIO_Close PROC
;;;374    /*---------------------------------------------------------------------------------------------------------*/
;;;375    int32_t DrvGPIO_Close(DRVGPIO_PORT port,int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;376    {
000002  4602              MOV      r2,r0
;;;377        if((i32Bit < 0) || (i32Bit > 16))
000004  2900              CMP      r1,#0
000006  db01              BLT      |L1.12|
000008  2910              CMP      r1,#0x10
00000a  dd01              BLE      |L1.16|
                  |L1.12|
;;;378        {
;;;379            return E_DRVGPIO_ARGUMENT;
00000c  480a              LDR      r0,|L1.56|
                  |L1.14|
;;;380        }
;;;381        // &GPIOA->PMD: 0x5000_4000[31:0]
;;;382        outpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET, (inpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET) & (~(3 << (i32Bit*2)))));
;;;383    	
;;;384    	GPIO_DBNCECON->ICLK_ON = 0; // 0x5000_4180[5]
;;;385    
;;;386        return E_SUCCESS;
;;;387    }	
00000e  bd10              POP      {r4,pc}
                  |L1.16|
000010  0190              LSLS     r0,r2,#6              ;382
000012  4b0a              LDR      r3,|L1.60|
000014  18c0              ADDS     r0,r0,r3              ;382
000016  6800              LDR      r0,[r0,#0]            ;382
000018  004c              LSLS     r4,r1,#1              ;382
00001a  2303              MOVS     r3,#3                 ;382
00001c  40a3              LSLS     r3,r3,r4              ;382
00001e  4398              BICS     r0,r0,r3              ;382
000020  0193              LSLS     r3,r2,#6              ;382
000022  4c06              LDR      r4,|L1.60|
000024  191b              ADDS     r3,r3,r4              ;382
000026  6018              STR      r0,[r3,#0]            ;382
000028  4805              LDR      r0,|L1.64|
00002a  6800              LDR      r0,[r0,#0]            ;384
00002c  2320              MOVS     r3,#0x20              ;384
00002e  4398              BICS     r0,r0,r3              ;384
000030  4b03              LDR      r3,|L1.64|
000032  6018              STR      r0,[r3,#0]            ;384
000034  2000              MOVS     r0,#0                 ;386
000036  e7ea              B        |L1.14|
;;;388    
                          ENDP

                  |L1.56|
                          DCD      0xffff8901
                  |L1.60|
                          DCD      0x50004000
                  |L1.64|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_ClrBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_ClrBit PROC
;;;582    
;;;583    int32_t DrvGPIO_ClrBit(DRVGPIO_PORT port,int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;584    {
000002  4602              MOV      r2,r0
;;;585        uint32_t u32PortAddr;
;;;586        
;;;587        if(port > GPB)
000004  2a01              CMP      r2,#1
000006  dd01              BLE      |L2.12|
;;;588        {
;;;589            return E_DRVGPIO_ARGUMENT;
000008  4808              LDR      r0,|L2.44|
                  |L2.10|
;;;590        }
;;;591        
;;;592        if((i32Bit < 0) || (i32Bit > 16))
;;;593        {
;;;594            return E_DRVGPIO_ARGUMENT;
;;;595        }
;;;596    
;;;597    	u32PortAddr = (uint32_t)&GPIOA->DOUT  + port * PORT_OFFSET;
;;;598       	
;;;599    	outpw(u32PortAddr, inpw(u32PortAddr) & (~(1 << i32Bit)));
;;;600       
;;;601        return E_SUCCESS;
;;;602    }
00000a  bd10              POP      {r4,pc}
                  |L2.12|
00000c  2900              CMP      r1,#0                 ;592
00000e  db01              BLT      |L2.20|
000010  2910              CMP      r1,#0x10              ;592
000012  dd01              BLE      |L2.24|
                  |L2.20|
000014  4805              LDR      r0,|L2.44|
000016  e7f8              B        |L2.10|
                  |L2.24|
000018  4805              LDR      r0,|L2.48|
00001a  0194              LSLS     r4,r2,#6              ;597
00001c  1903              ADDS     r3,r0,r4              ;597
00001e  6818              LDR      r0,[r3,#0]            ;599
000020  2401              MOVS     r4,#1                 ;599
000022  408c              LSLS     r4,r4,r1              ;599
000024  43a0              BICS     r0,r0,r4              ;599
000026  6018              STR      r0,[r3,#0]            ;599
000028  2000              MOVS     r0,#0                 ;601
00002a  e7ee              B        |L2.10|
;;;603    
                          ENDP

                  |L2.44|
                          DCD      0xffff8901
                  |L2.48|
                          DCD      0x50004008

                          AREA ||i.DrvGPIO_ClrBitMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_ClrBitMask PROC
;;;817    
;;;818    int32_t DrvGPIO_ClrBitMask(DRVGPIO_PORT port, uint32_t u32Bit)
000000  b510              PUSH     {r4,lr}
;;;819    {
000002  4602              MOV      r2,r0
;;;820    
;;;821    	outpw((uint32_t)&GPIOA->DMASK+ port*PORT_OFFSET,inpw((uint32_t)&GPIOA->DMASK+ port*PORT_OFFSET) &(~(1<<u32Bit)));
000004  4805              LDR      r0,|L3.28|
000006  0193              LSLS     r3,r2,#6
000008  58c3              LDR      r3,[r0,r3]
00000a  2001              MOVS     r0,#1
00000c  4088              LSLS     r0,r0,r1
00000e  4383              BICS     r3,r3,r0
000010  4802              LDR      r0,|L3.28|
000012  0194              LSLS     r4,r2,#6
000014  5103              STR      r3,[r0,r4]
;;;822    	
;;;823    	return E_SUCCESS;
000016  2000              MOVS     r0,#0
;;;824    }
000018  bd10              POP      {r4,pc}
;;;825    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_DisableDebounce||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableDebounce PROC
;;;744    /*---------------------------------------------------------------------------------------------------------*/
;;;745    int32_t DrvGPIO_DisableDebounce(DRVGPIO_PORT port, uint32_t u32Bit)
000000  b510              PUSH     {r4,lr}
;;;746    {
000002  4602              MOV      r2,r0
;;;747        if(port > GPB)
000004  2a01              CMP      r2,#1
000006  dd01              BLE      |L4.12|
;;;748            return E_DRVGPIO_ARGUMENT;
000008  4806              LDR      r0,|L4.36|
                  |L4.10|
;;;749    
;;;750    	// GPIOA->DBEN: (0x5000_4000 + 5 << 2)[31:0] = 0x5000_4014[31:0]
;;;751        outpw((uint32_t)&GPIOA->DBEN + port * PORT_OFFSET , inpw((uint32_t)&GPIOA->DBEN + port * PORT_OFFSET) &(~(1<<u32Bit)));
;;;752    
;;;753        
;;;754    	return E_SUCCESS;
;;;755    }
00000a  bd10              POP      {r4,pc}
                  |L4.12|
00000c  4806              LDR      r0,|L4.40|
00000e  0193              LSLS     r3,r2,#6              ;751
000010  58c0              LDR      r0,[r0,r3]            ;751
000012  2301              MOVS     r3,#1                 ;751
000014  408b              LSLS     r3,r3,r1              ;751
000016  4398              BICS     r0,r0,r3              ;751
000018  4b03              LDR      r3,|L4.40|
00001a  0194              LSLS     r4,r2,#6              ;751
00001c  5118              STR      r0,[r3,r4]            ;751
00001e  2000              MOVS     r0,#0                 ;754
000020  e7f3              B        |L4.10|
;;;756    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0xffff8901
                  |L4.40|
                          DCD      0x50004014

                          AREA ||i.DrvGPIO_DisableEINT0||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableEINT0 PROC
;;;989    /*---------------------------------------------------------------------------------------------------------*/
;;;990    void DrvGPIO_DisableEINT0(void)
000000  b510              PUSH     {r4,lr}
;;;991    {
;;;992        uint32_t u32Reg;
;;;993        u32Reg = inpw((uint32_t)&GPIOA->IEN + GPB * PORT_OFFSET);
000002  4805              LDR      r0,|L5.24|
000004  6dc4              LDR      r4,[r0,#0x5c]
;;;994        u32Reg = u32Reg & (~((1UL << 0) | (1UL << (0 + 16))));
000006  4805              LDR      r0,|L5.28|
000008  4004              ANDS     r4,r4,r0
;;;995        outpw((uint32_t)&GPIOA->IEN + GPB * PORT_OFFSET , u32Reg);	 
00000a  4803              LDR      r0,|L5.24|
00000c  65c4              STR      r4,[r0,#0x5c]
;;;996        NVIC_DisableIRQ(EINT0_IRQn);
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       NVIC_DisableIRQ
;;;997    }
000014  bd10              POP      {r4,pc}
;;;998    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x50004000
                  |L5.28|
                          DCD      0xfffefffe

                          AREA ||i.DrvGPIO_DisableEINT1||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableEINT1 PROC
;;;1054   /*---------------------------------------------------------------------------------------------------------*/
;;;1055   void DrvGPIO_DisableEINT1(void)
000000  b510              PUSH     {r4,lr}
;;;1056   {
;;;1057       uint32_t u32Reg;
;;;1058       u32Reg = inpw((uint32_t)&GPIOA->IEN + GPB * PORT_OFFSET);
000002  4805              LDR      r0,|L6.24|
000004  6dc4              LDR      r4,[r0,#0x5c]
;;;1059       u32Reg = u32Reg & (~((1UL << 1) | (1UL << (1 + 16))));
000006  4805              LDR      r0,|L6.28|
000008  4004              ANDS     r4,r4,r0
;;;1060       outpw((uint32_t)&GPIOA->IEN + GPB * PORT_OFFSET , u32Reg);	 
00000a  4803              LDR      r0,|L6.24|
00000c  65c4              STR      r4,[r0,#0x5c]
;;;1061       NVIC_DisableIRQ(EINT1_IRQn);
00000e  2003              MOVS     r0,#3
000010  f7fffffe          BL       NVIC_DisableIRQ
;;;1062   }
000014  bd10              POP      {r4,pc}
;;;1063   
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x50004000
                  |L6.28|
                          DCD      0xfffdfffd

                          AREA ||i.DrvGPIO_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvGPIO_DisableInt PROC
;;;920    /*---------------------------------------------------------------------------------------------------------*/
;;;921    int32_t DrvGPIO_DisableInt(DRVGPIO_PORT port,uint32_t u32Bit)
000000  b530              PUSH     {r4,r5,lr}
;;;922    {
000002  4602              MOV      r2,r0
;;;923        uint32_t u32Reg;
;;;924    
;;;925        if((port == GPA && u32Bit > 15) || (port == GPB && u32Bit > 7))
000004  2a00              CMP      r2,#0
000006  d101              BNE      |L7.12|
000008  290f              CMP      r1,#0xf
00000a  d803              BHI      |L7.20|
                  |L7.12|
00000c  2a01              CMP      r2,#1
00000e  d103              BNE      |L7.24|
000010  2907              CMP      r1,#7
000012  d901              BLS      |L7.24|
                  |L7.20|
;;;926            return E_DRVGPIO_ARGUMENT;
000014  4809              LDR      r0,|L7.60|
                  |L7.22|
;;;927        
;;;928        /* Disable both rising/falling or both high level/low level interrupts */
;;;929        u32Reg = (1 << u32Bit) | (1 << (u32Bit + 16));
;;;930        outpw((uint32_t)&GPIOA->IEN + port * PORT_OFFSET , inpw((uint32_t)&GPIOA->IEN + port * PORT_OFFSET) & (~u32Reg));	 
;;;931    
;;;932        return E_SUCCESS;
;;;933    }
000016  bd30              POP      {r4,r5,pc}
                  |L7.24|
000018  2001              MOVS     r0,#1                 ;929
00001a  4088              LSLS     r0,r0,r1              ;929
00001c  460c              MOV      r4,r1                 ;929
00001e  3410              ADDS     r4,r4,#0x10           ;929
000020  2501              MOVS     r5,#1                 ;929
000022  40a5              LSLS     r5,r5,r4              ;929
000024  4603              MOV      r3,r0                 ;929
000026  432b              ORRS     r3,r3,r5              ;929
000028  4805              LDR      r0,|L7.64|
00002a  0194              LSLS     r4,r2,#6              ;930
00002c  5900              LDR      r0,[r0,r4]            ;930
00002e  4398              BICS     r0,r0,r3              ;930
000030  4c03              LDR      r4,|L7.64|
000032  0195              LSLS     r5,r2,#6              ;930
000034  5160              STR      r0,[r4,r5]            ;930
000036  2000              MOVS     r0,#0                 ;932
000038  e7ed              B        |L7.22|
;;;934    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      0xffff8901
                  |L7.64|
                          DCD      0x5000401c

                          AREA ||i.DrvGPIO_EnableDebounce||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableDebounce PROC
;;;718    /*---------------------------------------------------------------------------------------------------------*/
;;;719    int32_t DrvGPIO_EnableDebounce(DRVGPIO_PORT port,uint32_t u32Bit)
000000  b510              PUSH     {r4,lr}
;;;720    {
000002  4602              MOV      r2,r0
;;;721        if(u32Bit > 15)
000004  290f              CMP      r1,#0xf
000006  d901              BLS      |L8.12|
;;;722            return E_DRVGPIO_ARGUMENT;
000008  4806              LDR      r0,|L8.36|
                  |L8.10|
;;;723    
;;;724    	// GPIOA->DBEN: (0x5000_4000 + 5 << 2)[31:0] = 0x5000_4014[31:0]
;;;725        outpw((uint32_t)&GPIOA->DBEN + port * PORT_OFFSET, inpw((uint32_t)&GPIOA->DBEN + port * PORT_OFFSET) | (1 << u32Bit));
;;;726    
;;;727    	//GPIO_DBNCECON->ICLK_ON = 1;
;;;728    
;;;729        return E_SUCCESS;
;;;730    }
00000a  bd10              POP      {r4,pc}
                  |L8.12|
00000c  4806              LDR      r0,|L8.40|
00000e  0193              LSLS     r3,r2,#6              ;725
000010  58c0              LDR      r0,[r0,r3]            ;725
000012  2301              MOVS     r3,#1                 ;725
000014  408b              LSLS     r3,r3,r1              ;725
000016  4318              ORRS     r0,r0,r3              ;725
000018  4b03              LDR      r3,|L8.40|
00001a  0194              LSLS     r4,r2,#6              ;725
00001c  5118              STR      r0,[r3,r4]            ;725
00001e  2000              MOVS     r0,#0                 ;729
000020  e7f3              B        |L8.10|
;;;731    
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      0xffff8901
                  |L8.40|
                          DCD      0x50004014

                          AREA ||i.DrvGPIO_EnableEINT0||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableEINT0 PROC
;;;947    /*---------------------------------------------------------------------------------------------------------*/
;;;948    void DrvGPIO_EnableEINT0(DRVGPIO_INT_TYPE tiggerType, DRVGPIO_INT_MODE mode, GPIO_EINT0_CALLBACK pfEINT0Callback)
000000  b5f8              PUSH     {r3-r7,lr}
;;;949    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;950        uint32_t u32Reg;
;;;951    
;;;952        /* Configure the interrupt to be rising/falling when edge trigger or high/low level when level trigger */
;;;953        u32Reg = inpw((uint32_t)&GPIOA->IEN + GPB * PORT_OFFSET);
000008  4815              LDR      r0,|L9.96|
00000a  6dc5              LDR      r5,[r0,#0x5c]
;;;954    	if(tiggerType ==IO_RISING)
00000c  2c00              CMP      r4,#0
00000e  d103              BNE      |L9.24|
;;;955        {
;;;956            u32Reg = u32Reg | (1 << (0 + 16)); 
000010  2001              MOVS     r0,#1
000012  0400              LSLS     r0,r0,#16
000014  4305              ORRS     r5,r5,r0
000016  e00a              B        |L9.46|
                  |L9.24|
;;;957    	}
;;;958        else if(tiggerType == IO_FALLING)
000018  2c01              CMP      r4,#1
00001a  d102              BNE      |L9.34|
;;;959    	{
;;;960            u32Reg = u32Reg | (1 << 0);  
00001c  2001              MOVS     r0,#1
00001e  4305              ORRS     r5,r5,r0
000020  e005              B        |L9.46|
                  |L9.34|
;;;961    	}
;;;962        else if(tiggerType == IO_BOTH_EDGE)
000022  2c02              CMP      r4,#2
000024  d103              BNE      |L9.46|
;;;963        {  
;;;964            u32Reg = u32Reg | (1 << 0) | (1 << (0 + 16));    
000026  4628              MOV      r0,r5
000028  490e              LDR      r1,|L9.100|
00002a  4308              ORRS     r0,r0,r1
00002c  4605              MOV      r5,r0
                  |L9.46|
;;;965    	}
;;;966    		outpw((uint32_t)&GPIOA->IEN + GPB * PORT_OFFSET , u32Reg);	 
00002e  480c              LDR      r0,|L9.96|
000030  65c5              STR      r5,[r0,#0x5c]
;;;967    
;;;968        /* Configure to be level trigger or edge trigger: '1': level trigger; '0': edge trigger */
;;;969    	if(mode ==MODE_EDGE)
000032  2e00              CMP      r6,#0
000034  d105              BNE      |L9.66|
;;;970    		outpw((uint32_t)&GPIOA->IMD + GPB*PORT_OFFSET,inpw((uint32_t)&GPIOA->IMD + GPB*PORT_OFFSET)&(~(1<<0)));
000036  6d80              LDR      r0,[r0,#0x58]
000038  0841              LSRS     r1,r0,#1
00003a  0049              LSLS     r1,r1,#1
00003c  4808              LDR      r0,|L9.96|
00003e  6581              STR      r1,[r0,#0x58]
000040  e007              B        |L9.82|
                  |L9.66|
;;;971    
;;;972    	else if(mode ==MODE_LEVEL)
000042  2e01              CMP      r6,#1
000044  d105              BNE      |L9.82|
;;;973    		outpw((uint32_t)&GPIOA->IMD + GPB*PORT_OFFSET,inpw((uint32_t)&GPIOA->IMD + GPB*PORT_OFFSET)|(1<<0));
000046  4806              LDR      r0,|L9.96|
000048  6d80              LDR      r0,[r0,#0x58]
00004a  2101              MOVS     r1,#1
00004c  4308              ORRS     r0,r0,r1
00004e  4904              LDR      r1,|L9.96|
000050  6588              STR      r0,[r1,#0x58]
                  |L9.82|
;;;974    
;;;975        _pfEINT0Callback = pfEINT0Callback;
000052  4805              LDR      r0,|L9.104|
000054  6007              STR      r7,[r0,#0]  ; _pfEINT0Callback
;;;976        NVIC_EnableIRQ(EINT0_IRQn);
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       NVIC_EnableIRQ
;;;977    }
00005c  bdf8              POP      {r3-r7,pc}
;;;978    
                          ENDP

00005e  0000              DCW      0x0000
                  |L9.96|
                          DCD      0x50004000
                  |L9.100|
                          DCD      0x00010001
                  |L9.104|
                          DCD      _pfEINT0Callback

                          AREA ||i.DrvGPIO_EnableEINT1||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableEINT1 PROC
;;;1011   /*---------------------------------------------------------------------------------------------------------*/
;;;1012   void DrvGPIO_EnableEINT1(DRVGPIO_INT_TYPE tiggerType, DRVGPIO_INT_MODE mode, GPIO_EINT1_CALLBACK pfEINT1Callback)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1013   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;1014       uint32_t u32Reg;
;;;1015   
;;;1016       u32Reg = inpw((uint32_t)&GPIOA->IEN + GPB * PORT_OFFSET);
000008  4815              LDR      r0,|L10.96|
00000a  6dc5              LDR      r5,[r0,#0x5c]
;;;1017   	if(tiggerType ==IO_RISING)
00000c  2c00              CMP      r4,#0
00000e  d103              BNE      |L10.24|
;;;1018       {
;;;1019           u32Reg = u32Reg | (1UL << (1 + 16));    
000010  2001              MOVS     r0,#1
000012  0440              LSLS     r0,r0,#17
000014  4305              ORRS     r5,r5,r0
000016  e00a              B        |L10.46|
                  |L10.24|
;;;1020   	}
;;;1021       else if(tiggerType == IO_FALLING)
000018  2c01              CMP      r4,#1
00001a  d102              BNE      |L10.34|
;;;1022   	{
;;;1023           u32Reg = u32Reg | (1UL << 1);  
00001c  2002              MOVS     r0,#2
00001e  4305              ORRS     r5,r5,r0
000020  e005              B        |L10.46|
                  |L10.34|
;;;1024   	}
;;;1025       else if(tiggerType == IO_BOTH_EDGE)
000022  2c02              CMP      r4,#2
000024  d103              BNE      |L10.46|
;;;1026       {  
;;;1027           u32Reg = u32Reg | (1UL << 1) | (1UL << (1 + 16)); 
000026  4628              MOV      r0,r5
000028  490e              LDR      r1,|L10.100|
00002a  4308              ORRS     r0,r0,r1
00002c  4605              MOV      r5,r0
                  |L10.46|
;;;1028   	}
;;;1029       outpw((uint32_t)&GPIOA->IEN + GPB * PORT_OFFSET , u32Reg);	 
00002e  480c              LDR      r0,|L10.96|
000030  65c5              STR      r5,[r0,#0x5c]
;;;1030   
;;;1031   
;;;1032       /* Configure to be level trigger or edge trigger: '1': level trigger; '0': edge trigger */
;;;1033   	if(mode ==MODE_EDGE)
000032  2e00              CMP      r6,#0
000034  d105              BNE      |L10.66|
;;;1034   		outpw((uint32_t)&GPIOA->IMD + GPB*PORT_OFFSET,inpw((uint32_t)&GPIOA->IMD + GPB*PORT_OFFSET)&(~(1<<1)));
000036  6d80              LDR      r0,[r0,#0x58]
000038  2102              MOVS     r1,#2
00003a  4388              BICS     r0,r0,r1
00003c  4908              LDR      r1,|L10.96|
00003e  6588              STR      r0,[r1,#0x58]
000040  e007              B        |L10.82|
                  |L10.66|
;;;1035   
;;;1036   	else if(mode ==MODE_LEVEL)
000042  2e01              CMP      r6,#1
000044  d105              BNE      |L10.82|
;;;1037   		outpw((uint32_t)&GPIOA->IMD + GPB*PORT_OFFSET,inpw((uint32_t)&GPIOA->IMD + GPB*PORT_OFFSET)|(1<<1));
000046  4806              LDR      r0,|L10.96|
000048  6d80              LDR      r0,[r0,#0x58]
00004a  2102              MOVS     r1,#2
00004c  4308              ORRS     r0,r0,r1
00004e  4904              LDR      r1,|L10.96|
000050  6588              STR      r0,[r1,#0x58]
                  |L10.82|
;;;1038   
;;;1039       
;;;1040       _pfEINT1Callback = pfEINT1Callback;
000052  4805              LDR      r0,|L10.104|
000054  6007              STR      r7,[r0,#0]  ; _pfEINT1Callback
;;;1041       NVIC_EnableIRQ(EINT1_IRQn);
000056  2003              MOVS     r0,#3
000058  f7fffffe          BL       NVIC_EnableIRQ
;;;1042   }
00005c  bdf8              POP      {r3-r7,pc}
;;;1043   
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      0x50004000
                  |L10.100|
                          DCD      0x00020002
                  |L10.104|
                          DCD      _pfEINT1Callback

                          AREA ||i.DrvGPIO_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvGPIO_EnableInt PROC
;;;859    /*---------------------------------------------------------------------------------------------------------*/
;;;860    int32_t DrvGPIO_EnableInt(DRVGPIO_PORT port, uint32_t u32Bit, DRVGPIO_INT_TYPE tiggerType, DRVGPIO_INT_MODE mode)
000000  b5f8              PUSH     {r3-r7,lr}
;;;861    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;862        if((port == GPB) && ((u32Bit == 0) || (u32Bit == 1)))
00000a  2c01              CMP      r4,#1
00000c  d105              BNE      |L11.26|
00000e  2d00              CMP      r5,#0
000010  d001              BEQ      |L11.22|
000012  2d01              CMP      r5,#1
000014  d101              BNE      |L11.26|
                  |L11.22|
;;;863        {
;;;864            // GPB0 is EINT0, GPB1 is EINT1. Both of them can't be assigned to GPAB interrupt
;;;865            return E_DRVGPIO_ARGUMENT;    
000016  4832              LDR      r0,|L11.224|
                  |L11.24|
;;;866        }
;;;867    
;;;868    	if((port == GPA && u32Bit > 16 	) || 
;;;869    	   (port == GPB && u32Bit > 8  	) ||
;;;870           (port  > GPB                 ) 
;;;871    	  )
;;;872        {
;;;873            return E_DRVGPIO_ARGUMENT;
;;;874        }
;;;875        
;;;876        /* Configure the interrupt to be rising/falling when edge trigger or high/low level when level trigger */
;;;877    	if(tiggerType ==IO_RISING)//'1': rising edge or high level
;;;878    		outpw((uint32_t)&GPIOA->IEN + port * PORT_OFFSET , inpw((uint32_t)&GPIOA->IEN + port * PORT_OFFSET) | (1<<(u32Bit+16)));	 
;;;879    
;;;880    	else if(tiggerType == IO_FALLING)//'1': falling edge or low level
;;;881    		outpw((uint32_t)&GPIOA->IEN + port * PORT_OFFSET , inpw((uint32_t)&GPIOA->IEN + port * PORT_OFFSET) | (1<<u32Bit));	 
;;;882    
;;;883    	else if(tiggerType == IO_BOTH_EDGE) //'1': (rising edge + falling edge) or [(high level + low level) = no action] 
;;;884    		outpw((uint32_t)&GPIOA->IEN + port * PORT_OFFSET , inpw((uint32_t)&GPIOA->IEN + port * PORT_OFFSET) | (1<<u32Bit)| (1<<(u32Bit+16)));	 
;;;885    	else
;;;886    		return E_DRVGPIO_ARGUMENT;
;;;887    
;;;888        /* Configure to be level trigger or edge trigger: '1': level trigger; '0': edge trigger */
;;;889    	if(mode ==MODE_EDGE)
;;;890    		outpw((uint32_t)&GPIOA->IMD + port*PORT_OFFSET,inpw((uint32_t)&GPIOA->IMD + port*PORT_OFFSET)&(~(1<<u32Bit)));
;;;891    
;;;892    	else if(mode ==MODE_LEVEL)
;;;893    		outpw((uint32_t)&GPIOA->IMD + port*PORT_OFFSET,inpw((uint32_t)&GPIOA->IMD + port*PORT_OFFSET)|(1<<u32Bit));
;;;894    
;;;895    	else
;;;896    		return E_DRVGPIO_ARGUMENT;
;;;897        
;;;898        /* Enable the relative interrupt of M0 */
;;;899        if(port == GPA || port == GPB)
;;;900        {
;;;901            //NVIC_SetPriority (GPAB_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
;;;902            NVIC_EnableIRQ(GPAB_IRQn);
;;;903        }
;;;904    
;;;905       return E_SUCCESS;
;;;906    }
000018  bdf8              POP      {r3-r7,pc}
                  |L11.26|
00001a  2c00              CMP      r4,#0                 ;868
00001c  d101              BNE      |L11.34|
00001e  2d10              CMP      r5,#0x10              ;868
000020  d805              BHI      |L11.46|
                  |L11.34|
000022  2c01              CMP      r4,#1                 ;869
000024  d101              BNE      |L11.42|
000026  2d08              CMP      r5,#8                 ;869
000028  d801              BHI      |L11.46|
                  |L11.42|
00002a  2c01              CMP      r4,#1                 ;870
00002c  dd01              BLE      |L11.50|
                  |L11.46|
00002e  482c              LDR      r0,|L11.224|
000030  e7f2              B        |L11.24|
                  |L11.50|
000032  2e00              CMP      r6,#0                 ;877
000034  d10c              BNE      |L11.80|
000036  482b              LDR      r0,|L11.228|
000038  01a1              LSLS     r1,r4,#6              ;878
00003a  5840              LDR      r0,[r0,r1]            ;878
00003c  4629              MOV      r1,r5                 ;878
00003e  3110              ADDS     r1,r1,#0x10           ;878
000040  2201              MOVS     r2,#1                 ;878
000042  408a              LSLS     r2,r2,r1              ;878
000044  4601              MOV      r1,r0                 ;878
000046  4311              ORRS     r1,r1,r2              ;878
000048  4826              LDR      r0,|L11.228|
00004a  01a2              LSLS     r2,r4,#6              ;878
00004c  5081              STR      r1,[r0,r2]            ;878
00004e  e01f              B        |L11.144|
                  |L11.80|
000050  2e01              CMP      r6,#1                 ;880
000052  d109              BNE      |L11.104|
000054  4823              LDR      r0,|L11.228|
000056  01a1              LSLS     r1,r4,#6              ;881
000058  5840              LDR      r0,[r0,r1]            ;881
00005a  2101              MOVS     r1,#1                 ;881
00005c  40a9              LSLS     r1,r1,r5              ;881
00005e  4301              ORRS     r1,r1,r0              ;881
000060  4820              LDR      r0,|L11.228|
000062  01a2              LSLS     r2,r4,#6              ;881
000064  5081              STR      r1,[r0,r2]            ;881
000066  e013              B        |L11.144|
                  |L11.104|
000068  2e02              CMP      r6,#2                 ;883
00006a  d10f              BNE      |L11.140|
00006c  481d              LDR      r0,|L11.228|
00006e  01a1              LSLS     r1,r4,#6              ;884
000070  5840              LDR      r0,[r0,r1]            ;884
000072  2101              MOVS     r1,#1                 ;884
000074  40a9              LSLS     r1,r1,r5              ;884
000076  4308              ORRS     r0,r0,r1              ;884
000078  4629              MOV      r1,r5                 ;884
00007a  3110              ADDS     r1,r1,#0x10           ;884
00007c  2201              MOVS     r2,#1                 ;884
00007e  408a              LSLS     r2,r2,r1              ;884
000080  4601              MOV      r1,r0                 ;884
000082  4311              ORRS     r1,r1,r2              ;884
000084  4817              LDR      r0,|L11.228|
000086  01a2              LSLS     r2,r4,#6              ;884
000088  5081              STR      r1,[r0,r2]            ;884
00008a  e001              B        |L11.144|
                  |L11.140|
00008c  4814              LDR      r0,|L11.224|
00008e  e7c3              B        |L11.24|
                  |L11.144|
000090  2f00              CMP      r7,#0                 ;889
000092  d10b              BNE      |L11.172|
000094  4813              LDR      r0,|L11.228|
000096  1f00              SUBS     r0,r0,#4              ;890
000098  01a1              LSLS     r1,r4,#6              ;890
00009a  5840              LDR      r0,[r0,r1]            ;890
00009c  2101              MOVS     r1,#1                 ;890
00009e  40a9              LSLS     r1,r1,r5              ;890
0000a0  4388              BICS     r0,r0,r1              ;890
0000a2  4910              LDR      r1,|L11.228|
0000a4  1f09              SUBS     r1,r1,#4              ;890
0000a6  01a2              LSLS     r2,r4,#6              ;890
0000a8  5088              STR      r0,[r1,r2]            ;890
0000aa  e00f              B        |L11.204|
                  |L11.172|
0000ac  2f01              CMP      r7,#1                 ;892
0000ae  d10b              BNE      |L11.200|
0000b0  480c              LDR      r0,|L11.228|
0000b2  1f00              SUBS     r0,r0,#4              ;893
0000b4  01a1              LSLS     r1,r4,#6              ;893
0000b6  5840              LDR      r0,[r0,r1]            ;893
0000b8  2101              MOVS     r1,#1                 ;893
0000ba  40a9              LSLS     r1,r1,r5              ;893
0000bc  4308              ORRS     r0,r0,r1              ;893
0000be  4909              LDR      r1,|L11.228|
0000c0  1f09              SUBS     r1,r1,#4              ;893
0000c2  01a2              LSLS     r2,r4,#6              ;893
0000c4  5088              STR      r0,[r1,r2]            ;893
0000c6  e001              B        |L11.204|
                  |L11.200|
0000c8  4805              LDR      r0,|L11.224|
0000ca  e7a5              B        |L11.24|
                  |L11.204|
0000cc  2c00              CMP      r4,#0                 ;899
0000ce  d001              BEQ      |L11.212|
0000d0  2c01              CMP      r4,#1                 ;899
0000d2  d102              BNE      |L11.218|
                  |L11.212|
0000d4  2004              MOVS     r0,#4                 ;902
0000d6  f7fffffe          BL       NVIC_EnableIRQ
                  |L11.218|
0000da  2000              MOVS     r0,#0                 ;905
0000dc  e79c              B        |L11.24|
;;;907    
                          ENDP

0000de  0000              DCW      0x0000
                  |L11.224|
                          DCD      0xffff8901
                  |L11.228|
                          DCD      0x5000401c

                          AREA ||i.DrvGPIO_GetBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetBit PROC
;;;511    /*---------------------------------------------------------------------------------------------------------*/
;;;512    int32_t DrvGPIO_GetBit(DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;513    {
000002  4602              MOV      r2,r0
;;;514        uint32_t u32PortAddr;
;;;515        
;;;516        if(port > GPB)
000004  2a01              CMP      r2,#1
000006  dd01              BLE      |L12.12|
;;;517        {
;;;518            return E_DRVGPIO_ARGUMENT;
000008  4807              LDR      r0,|L12.40|
                  |L12.10|
;;;519        }
;;;520        
;;;521        if((i32Bit < 0) || (i32Bit > 16))
;;;522        {
;;;523            return 0;
;;;524        }
;;;525    
;;;526        u32PortAddr = (uint32_t)&GPIOA->PIN + port * PORT_OFFSET;
;;;527       	   
;;;528    
;;;529        return ((inpw(u32PortAddr) >> i32Bit) & 1);
;;;530    }
00000a  bd10              POP      {r4,pc}
                  |L12.12|
00000c  2900              CMP      r1,#0                 ;521
00000e  db01              BLT      |L12.20|
000010  2910              CMP      r1,#0x10              ;521
000012  dd01              BLE      |L12.24|
                  |L12.20|
000014  2000              MOVS     r0,#0                 ;523
000016  e7f8              B        |L12.10|
                  |L12.24|
000018  4804              LDR      r0,|L12.44|
00001a  0194              LSLS     r4,r2,#6              ;526
00001c  1903              ADDS     r3,r0,r4              ;526
00001e  6818              LDR      r0,[r3,#0]            ;529
000020  40c8              LSRS     r0,r0,r1              ;529
000022  07c0              LSLS     r0,r0,#31             ;529
000024  0fc0              LSRS     r0,r0,#31             ;529
000026  e7f0              B        |L12.10|
;;;531    
                          ENDP

                  |L12.40|
                          DCD      0xffff8901
                  |L12.44|
                          DCD      0x50004010

                          AREA ||i.DrvGPIO_GetDebounceTime||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetDebounceTime PROC
;;;695    
;;;696    int32_t DrvGPIO_GetDebounceTime(void)
000000  4902              LDR      r1,|L13.12|
;;;697    {
;;;698        volatile int32_t i32Reg;
;;;699    
;;;700        i32Reg = 	GPIO_DBNCECON->DBCLKSEL;//0x5000_4180[3:0]
000002  6809              LDR      r1,[r1,#0]
000004  0708              LSLS     r0,r1,#28
000006  0f00              LSRS     r0,r0,#28
;;;701       
;;;702        return i32Reg;
;;;703    }
000008  4770              BX       lr
;;;704    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_GetDoutBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetDoutBit PROC
;;;617    
;;;618    int32_t DrvGPIO_GetDoutBit(DRVGPIO_PORT port, int32_t i32Bit)
000000  4602              MOV      r2,r0
;;;619    {
;;;620    	if(port > GPB)
000002  2a01              CMP      r2,#1
000004  dd01              BLE      |L14.10|
;;;621        {
;;;622            return E_DRVGPIO_ARGUMENT;
000006  4807              LDR      r0,|L14.36|
                  |L14.8|
;;;623        }
;;;624        
;;;625        if((i32Bit < 0) || (i32Bit >= 15))
;;;626        {
;;;627            return E_DRVGPIO_ARGUMENT;
;;;628        }
;;;629     
;;;630        return ((inpw((uint32_t)&GPIOA->DOUT + port * PORT_OFFSET) >> i32Bit) & 1);
;;;631    }
000008  4770              BX       lr
                  |L14.10|
00000a  2900              CMP      r1,#0                 ;625
00000c  db01              BLT      |L14.18|
00000e  290f              CMP      r1,#0xf               ;625
000010  db01              BLT      |L14.22|
                  |L14.18|
000012  4804              LDR      r0,|L14.36|
000014  e7f8              B        |L14.8|
                  |L14.22|
000016  4804              LDR      r0,|L14.40|
000018  0193              LSLS     r3,r2,#6              ;630
00001a  58c0              LDR      r0,[r0,r3]            ;630
00001c  40c8              LSRS     r0,r0,r1              ;630
00001e  07c0              LSLS     r0,r0,#31             ;630
000020  0fc0              LSRS     r0,r0,#31             ;630
000022  e7f1              B        |L14.8|
;;;632    
                          ENDP

                  |L14.36|
                          DCD      0xffff8901
                  |L14.40|
                          DCD      0x50004008

                          AREA ||i.DrvGPIO_GetIntStatus||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetIntStatus PROC
;;;1074   /*---------------------------------------------------------------------------------------------------------*/
;;;1075   uint32_t DrvGPIO_GetIntStatus(DRVGPIO_PORT port)
000000  4602              MOV      r2,r0
;;;1076   {
;;;1077       uint32_t u32Reg;
;;;1078   	
;;;1079   	if(port == GPA)
000002  2a00              CMP      r2,#0
000004  d102              BNE      |L15.12|
;;;1080   		u32Reg = GPIOA->ISRC;
000006  4806              LDR      r0,|L15.32|
000008  6a01              LDR      r1,[r0,#0x20]
00000a  e006              B        |L15.26|
                  |L15.12|
;;;1081   	else if(port == GPB)
00000c  2a01              CMP      r2,#1
00000e  d102              BNE      |L15.22|
;;;1082   		u32Reg = GPIOB->ISRC;
000010  4804              LDR      r0,|L15.36|
000012  6a01              LDR      r1,[r0,#0x20]
000014  e001              B        |L15.26|
                  |L15.22|
;;;1083   	else
;;;1084   		return E_DRVGPIO_ARGUMENT;
000016  4804              LDR      r0,|L15.40|
                  |L15.24|
;;;1085   	return u32Reg;
;;;1086   }
000018  4770              BX       lr
                  |L15.26|
00001a  4608              MOV      r0,r1                 ;1085
00001c  e7fc              B        |L15.24|
;;;1087   
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      0x50004000
                  |L15.36|
                          DCD      0x50004040
                  |L15.40|
                          DCD      0xffff8901

                          AREA ||i.DrvGPIO_GetPortBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortBits PROC
;;;484    /*---------------------------------------------------------------------------------------------------------*/
;;;485    int32_t DrvGPIO_GetPortBits(DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;486    {
;;;487     
;;;488        uint32_t u32PortAddr;
;;;489        
;;;490        if(port > GPB)
000002  2901              CMP      r1,#1
000004  dd01              BLE      |L16.10|
;;;491        {
;;;492            return E_DRVGPIO_ARGUMENT;
000006  4803              LDR      r0,|L16.20|
                  |L16.8|
;;;493        }
;;;494        
;;;495        u32PortAddr = (uint32_t)&GPIOA->PIN + port * PORT_OFFSET;
;;;496       	
;;;497        return inpw(u32PortAddr);
;;;498    }
000008  4770              BX       lr
                  |L16.10|
00000a  4803              LDR      r0,|L16.24|
00000c  018b              LSLS     r3,r1,#6              ;495
00000e  18c2              ADDS     r2,r0,r3              ;495
000010  6810              LDR      r0,[r2,#0]            ;497
000012  e7f9              B        |L16.8|
;;;499    
                          ENDP

                  |L16.20|
                          DCD      0xffff8901
                  |L16.24|
                          DCD      0x50004010

                          AREA ||i.DrvGPIO_GetPortDoutBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortDoutBits PROC
;;;645    
;;;646    int32_t DrvGPIO_GetPortDoutBits(DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;647    {
;;;648        if(port > GPB)
000002  2901              CMP      r1,#1
000004  dd01              BLE      |L17.10|
;;;649        {
;;;650            return E_DRVGPIO_ARGUMENT;
000006  4803              LDR      r0,|L17.20|
                  |L17.8|
;;;651        }
;;;652    
;;;653        return inpw((uint32_t)&GPIOA->DOUT + port *PORT_OFFSET);
;;;654    }
000008  4770              BX       lr
                  |L17.10|
00000a  4803              LDR      r0,|L17.24|
00000c  018a              LSLS     r2,r1,#6              ;653
00000e  5880              LDR      r0,[r0,r2]            ;653
000010  e7fa              B        |L17.8|
;;;655    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      0xffff8901
                  |L17.24|
                          DCD      0x50004008

                          AREA ||i.DrvGPIO_GetPortMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetPortMask PROC
;;;837    
;;;838    int32_t DrvGPIO_GetPortMask(DRVGPIO_PORT port)
000000  4601              MOV      r1,r0
;;;839    {
;;;840    	return inpw((uint32_t)&GPIOA->DMASK + port * PORT_OFFSET); 
000002  4802              LDR      r0,|L18.12|
000004  018a              LSLS     r2,r1,#6
000006  5880              LDR      r0,[r0,r2]
;;;841    }
000008  4770              BX       lr
;;;842    
                          ENDP

00000a  0000              DCW      0x0000
                  |L18.12|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvGPIO_GetVersion PROC
;;;1098   /*---------------------------------------------------------------------------------------------------------*/
;;;1099   int32_t DrvGPIO_GetVersion (void)
000000  4800              LDR      r0,|L19.4|
;;;1100   {
;;;1101      return DRVGPIO_VERSION_NUM;
;;;1102   }
000002  4770              BX       lr
;;;1103   
                          ENDP

                  |L19.4|
                          DCD      0x00010001

                          AREA ||i.DrvGPIO_InitFunction||, CODE, READONLY, ALIGN=2

                  DrvGPIO_InitFunction PROC
;;;161    /*---------------------------------------------------------------------------------------------------------*/
;;;162    int32_t DrvGPIO_InitFunction(DRVGPIO_FUNC function)
000000  b500              PUSH     {lr}
;;;163    {
000002  4601              MOV      r1,r0
;;;164      
;;;165    	switch(function)
000004  000b              MOVS     r3,r1
000006  f7fffffe          BL       __ARM_common_switch8
00000a  160c              DCB      0x16,0x0c
00000c  1125384c          DCB      0x11,0x25,0x38,0x4c
000010  5b6a8fb5          DCB      0x5b,0x6a,0x8f,0xb5
000014  d2fcfaf9          DCB      0xd2,0xfc,0xfa,0xf9
000018  f8f7f6f5          DCB      0xf8,0xf7,0xf6,0xf5
00001c  f4f3f2f1          DCB      0xf4,0xf3,0xf2,0xf1
000020  f0ef              DCB      0xf0,0xef
;;;166    	{
;;;167    		/*---------------------------------------------------------------------------------------------------------*/
;;;168    		/* GPIO                                                                                                    */
;;;169    		/*---------------------------------------------------------------------------------------------------------*/
;;;170    		case FUNC_GPIO:
;;;171    		{
;;;172    		  	outpw(&SYS->GPA_ALT,0); //(0x5000_0000 + 14<<2)[31:0]= 0x5000_0038[31:0]
000022  2000              MOVS     r0,#0
000024  4aed              LDR      r2,|L20.988|
000026  6390              STR      r0,[r2,#0x38]
;;;173    			outpw(&SYS->GPB_ALT,0); //(0x5000_0000 + 15<<2)[31:0]= 0x5000_003C[31:0]
000028  63d0              STR      r0,[r2,#0x3c]
;;;174    	
;;;175    		  	
;;;176    		}break;
00002a  e1d4              B        |L20.982|
;;;177    
;;;178    		/*---------------------------------------------------------------------------------------------------------*/
;;;179    		/* PWM                                                                                                     */
;;;180    		/*---------------------------------------------------------------------------------------------------------*/
;;;181    		case FUNC_PWM01:
;;;182    		{
;;;183    		  	SYS->GPA_ALT.GPA12 		=1;	 // PWM0
00002c  48eb              LDR      r0,|L20.988|
00002e  6b80              LDR      r0,[r0,#0x38]
000030  2203              MOVS     r2,#3
000032  0612              LSLS     r2,r2,#24
000034  4390              BICS     r0,r0,r2
000036  2201              MOVS     r2,#1
000038  0612              LSLS     r2,r2,#24
00003a  1880              ADDS     r0,r0,r2
00003c  4ae7              LDR      r2,|L20.988|
00003e  6390              STR      r0,[r2,#0x38]
;;;184    		  	SYS->GPA_ALT.GPA13 		=1;	 // PWM1
000040  4610              MOV      r0,r2
000042  6b80              LDR      r0,[r0,#0x38]
000044  4ae6              LDR      r2,|L20.992|
000046  4390              BICS     r0,r0,r2
000048  2201              MOVS     r2,#1
00004a  0692              LSLS     r2,r2,#26
00004c  1880              ADDS     r0,r0,r2
00004e  4ae3              LDR      r2,|L20.988|
000050  6390              STR      r0,[r2,#0x38]
;;;185    
;;;186    		}break;
000052  e1c0              B        |L20.982|
;;;187    
;;;188    		case FUNC_PWM01B:
;;;189    		{
;;;190    		  	SYS->GPB_ALT.GPB4 		=1;	 // PWM0B
000054  48e1              LDR      r0,|L20.988|
000056  6bc0              LDR      r0,[r0,#0x3c]
000058  2203              MOVS     r2,#3
00005a  0212              LSLS     r2,r2,#8
00005c  4390              BICS     r0,r0,r2
00005e  30ff              ADDS     r0,r0,#0xff
000060  3001              ADDS     r0,#1
000062  4ade              LDR      r2,|L20.988|
000064  63d0              STR      r0,[r2,#0x3c]
;;;191    		  	SYS->GPB_ALT.GPB5 		=1;	 // PWM1B
000066  4610              MOV      r0,r2
000068  6bc0              LDR      r0,[r0,#0x3c]
00006a  4ade              LDR      r2,|L20.996|
00006c  4390              BICS     r0,r0,r2
00006e  2201              MOVS     r2,#1
000070  0292              LSLS     r2,r2,#10
000072  1880              ADDS     r0,r0,r2
000074  4ad9              LDR      r2,|L20.988|
000076  63d0              STR      r0,[r2,#0x3c]
;;;192    
;;;193    		}break;
000078  e1ad              B        |L20.982|
;;;194    
;;;195    		/*---------------------------------------------------------------------------------------------------------*/
;;;196    		/* I2C                                                                                                     */
;;;197    		/*---------------------------------------------------------------------------------------------------------*/
;;;198    		case FUNC_I2C0:
;;;199    		{
;;;200    		  	SYS->GPA_ALT.GPA10 	=1;	// SDA // SYS->GPAALT.GPA10: (0x5000_0000 + 14<<2)[31:0]= 0x5000_0038[21:20]
00007a  48d8              LDR      r0,|L20.988|
00007c  6b80              LDR      r0,[r0,#0x38]
00007e  2203              MOVS     r2,#3
000080  0512              LSLS     r2,r2,#20
000082  4390              BICS     r0,r0,r2
000084  2201              MOVS     r2,#1
000086  0512              LSLS     r2,r2,#20
000088  1880              ADDS     r0,r0,r2
00008a  4ad4              LDR      r2,|L20.988|
00008c  6390              STR      r0,[r2,#0x38]
;;;201    			SYS->GPA_ALT.GPA11 	=1;	// SCL // SYS->GPAALT.GPA11: (0x5000_0000 + 14<<2)[31:0]= 0x5000_0038[23:22]
00008e  4610              MOV      r0,r2
000090  6b80              LDR      r0,[r0,#0x38]
000092  4ad5              LDR      r2,|L20.1000|
000094  4390              BICS     r0,r0,r2
000096  2201              MOVS     r2,#1
000098  0592              LSLS     r2,r2,#22
00009a  1880              ADDS     r0,r0,r2
00009c  4acf              LDR      r2,|L20.988|
00009e  6390              STR      r0,[r2,#0x38]
;;;202    		}break;		
0000a0  e199              B        |L20.982|
;;;203    
;;;204    		case FUNC_I2C1:
;;;205    		{
;;;206    		  	SYS->GPA_ALT.GPA1 	=2;	// SCL
0000a2  48ce              LDR      r0,|L20.988|
0000a4  6b80              LDR      r0,[r0,#0x38]
0000a6  220c              MOVS     r2,#0xc
0000a8  4390              BICS     r0,r0,r2
0000aa  3008              ADDS     r0,r0,#8
0000ac  4acb              LDR      r2,|L20.988|
0000ae  6390              STR      r0,[r2,#0x38]
;;;207    			SYS->GPA_ALT.GPA3 	=2;	// SDA
0000b0  4610              MOV      r0,r2
0000b2  6b80              LDR      r0,[r0,#0x38]
0000b4  22c0              MOVS     r2,#0xc0
0000b6  4390              BICS     r0,r0,r2
0000b8  3080              ADDS     r0,r0,#0x80
0000ba  4ac8              LDR      r2,|L20.988|
0000bc  6390              STR      r0,[r2,#0x38]
;;;208    		}break;		
0000be  e18a              B        |L20.982|
;;;209    
;;;210    		case FUNC_I2C2:
;;;211    		{
;;;212    		  	SYS->GPB_ALT.GPB2 	=1;	// SCL
0000c0  48c6              LDR      r0,|L20.988|
0000c2  6bc0              LDR      r0,[r0,#0x3c]
0000c4  2230              MOVS     r2,#0x30
0000c6  4390              BICS     r0,r0,r2
0000c8  3010              ADDS     r0,r0,#0x10
0000ca  4ac4              LDR      r2,|L20.988|
0000cc  63d0              STR      r0,[r2,#0x3c]
;;;213    			SYS->GPB_ALT.GPB3 	=1;	// SDA
0000ce  4610              MOV      r0,r2
0000d0  6bc0              LDR      r0,[r0,#0x3c]
0000d2  22c0              MOVS     r2,#0xc0
0000d4  4390              BICS     r0,r0,r2
0000d6  3040              ADDS     r0,r0,#0x40
0000d8  4ac0              LDR      r2,|L20.988|
0000da  63d0              STR      r0,[r2,#0x3c]
;;;214    		}break;		
0000dc  e17b              B        |L20.982|
;;;215    	
;;;216    		/*---------------------------------------------------------------------------------------------------------*/
;;;217    		/* I2S                                                                                                     */
;;;218    		/*---------------------------------------------------------------------------------------------------------*/
;;;219    		case FUNC_I2S0:	
;;;220    		{
;;;221    			SYS->GPA_ALT.GPA4 	=1; // I2S_FS
0000de  48bf              LDR      r0,|L20.988|
0000e0  6b80              LDR      r0,[r0,#0x38]
0000e2  2203              MOVS     r2,#3
0000e4  0212              LSLS     r2,r2,#8
0000e6  4390              BICS     r0,r0,r2
0000e8  30ff              ADDS     r0,r0,#0xff
0000ea  3001              ADDS     r0,#1
0000ec  4abb              LDR      r2,|L20.988|
0000ee  6390              STR      r0,[r2,#0x38]
;;;222    			SYS->GPA_ALT.GPA5	=1;	// I2S_BCLK	
0000f0  4610              MOV      r0,r2
0000f2  6b80              LDR      r0,[r0,#0x38]
0000f4  4abb              LDR      r2,|L20.996|
0000f6  4390              BICS     r0,r0,r2
0000f8  2201              MOVS     r2,#1
0000fa  0292              LSLS     r2,r2,#10
0000fc  1880              ADDS     r0,r0,r2
0000fe  4ab7              LDR      r2,|L20.988|
000100  6390              STR      r0,[r2,#0x38]
;;;223    			SYS->GPA_ALT.GPA6 	=1; // I2S_SDI		 
000102  4610              MOV      r0,r2
000104  6b80              LDR      r0,[r0,#0x38]
000106  4ab9              LDR      r2,|L20.1004|
000108  4390              BICS     r0,r0,r2
00010a  2201              MOVS     r2,#1
00010c  0312              LSLS     r2,r2,#12
00010e  1880              ADDS     r0,r0,r2
000110  4ab2              LDR      r2,|L20.988|
000112  6390              STR      r0,[r2,#0x38]
;;;224    			SYS->GPA_ALT.GPA7	=1;	// I2S_SDO	
000114  4610              MOV      r0,r2
000116  6b80              LDR      r0,[r0,#0x38]
000118  4ab5              LDR      r2,|L20.1008|
00011a  4390              BICS     r0,r0,r2
00011c  2201              MOVS     r2,#1
00011e  0392              LSLS     r2,r2,#14
000120  1880              ADDS     r0,r0,r2
000122  4aae              LDR      r2,|L20.988|
000124  6390              STR      r0,[r2,#0x38]
;;;225    		}break;
000126  e156              B        |L20.982|
;;;226    
;;;227    		case FUNC_I2S1:	
;;;228    		{
;;;229    			SYS->GPA_ALT.GPA8 	=2; // I2S_FS
000128  48ac              LDR      r0,|L20.988|
00012a  6b80              LDR      r0,[r0,#0x38]
00012c  2203              MOVS     r2,#3
00012e  0412              LSLS     r2,r2,#16
000130  4390              BICS     r0,r0,r2
000132  2201              MOVS     r2,#1
000134  0452              LSLS     r2,r2,#17
000136  1880              ADDS     r0,r0,r2
000138  4aa8              LDR      r2,|L20.988|
00013a  6390              STR      r0,[r2,#0x38]
;;;230    			SYS->GPA_ALT.GPA9	=2;	// I2S_BCLK	
00013c  4610              MOV      r0,r2
00013e  6b80              LDR      r0,[r0,#0x38]
000140  4aac              LDR      r2,|L20.1012|
000142  4390              BICS     r0,r0,r2
000144  2201              MOVS     r2,#1
000146  04d2              LSLS     r2,r2,#19
000148  1880              ADDS     r0,r0,r2
00014a  4aa4              LDR      r2,|L20.988|
00014c  6390              STR      r0,[r2,#0x38]
;;;231    			SYS->GPA_ALT.GPA10 	=2; // I2S_SDI		 
00014e  4610              MOV      r0,r2
000150  6b80              LDR      r0,[r0,#0x38]
000152  4aa9              LDR      r2,|L20.1016|
000154  4390              BICS     r0,r0,r2
000156  2201              MOVS     r2,#1
000158  0552              LSLS     r2,r2,#21
00015a  1880              ADDS     r0,r0,r2
00015c  4a9f              LDR      r2,|L20.988|
00015e  6390              STR      r0,[r2,#0x38]
;;;232    			SYS->GPA_ALT.GPA11	=2;	// I2S_SDO	
000160  4610              MOV      r0,r2
000162  6b80              LDR      r0,[r0,#0x38]
000164  4aa0              LDR      r2,|L20.1000|
000166  4390              BICS     r0,r0,r2
000168  2201              MOVS     r2,#1
00016a  05d2              LSLS     r2,r2,#23
00016c  1880              ADDS     r0,r0,r2
00016e  4a9b              LDR      r2,|L20.988|
000170  6390              STR      r0,[r2,#0x38]
;;;233    		}break;	
000172  e130              B        |L20.982|
;;;234    	
;;;235    		/*---------------------------------------------------------------------------------------------------------*/
;;;236    		/* SPI                                                                                                     */
;;;237    		/*---------------------------------------------------------------------------------------------------------*/
;;;238    		case FUNC_SPI0:	
;;;239    		{
;;;240    			SYS->GPA_ALT.GPA0 	=1; // SPI_MOSI0
000174  4899              LDR      r0,|L20.988|
000176  6b80              LDR      r0,[r0,#0x38]
000178  0880              LSRS     r0,r0,#2
00017a  0080              LSLS     r0,r0,#2
00017c  1c40              ADDS     r0,r0,#1
00017e  4a97              LDR      r2,|L20.988|
000180  6390              STR      r0,[r2,#0x38]
;;;241    			SYS->GPA_ALT.GPA1	=1;	// SPI_SCLK	
000182  4610              MOV      r0,r2
000184  6b80              LDR      r0,[r0,#0x38]
000186  220c              MOVS     r2,#0xc
000188  4390              BICS     r0,r0,r2
00018a  1d00              ADDS     r0,r0,#4
00018c  4a93              LDR      r2,|L20.988|
00018e  6390              STR      r0,[r2,#0x38]
;;;242    			SYS->GPA_ALT.GPA2 	=1; // SPI_SSB0		 
000190  4610              MOV      r0,r2
000192  6b80              LDR      r0,[r0,#0x38]
000194  2230              MOVS     r2,#0x30
000196  4390              BICS     r0,r0,r2
000198  3010              ADDS     r0,r0,#0x10
00019a  4a90              LDR      r2,|L20.988|
00019c  6390              STR      r0,[r2,#0x38]
;;;243    			SYS->GPA_ALT.GPA3	=1;	// SPI_MISO0	
00019e  4610              MOV      r0,r2
0001a0  6b80              LDR      r0,[r0,#0x38]
0001a2  22c0              MOVS     r2,#0xc0
0001a4  4390              BICS     r0,r0,r2
0001a6  3040              ADDS     r0,r0,#0x40
0001a8  4a8c              LDR      r2,|L20.988|
0001aa  6390              STR      r0,[r2,#0x38]
;;;244    		}break;
0001ac  e113              B        |L20.982|
;;;245    
;;;246    		case FUNC_SPI1:	
;;;247    		{
;;;248    			SYS->GPB_ALT.GPB0 	=3; // SPI_SSB0		 
0001ae  488b              LDR      r0,|L20.988|
0001b0  6bc0              LDR      r0,[r0,#0x3c]
0001b2  0880              LSRS     r0,r0,#2
0001b4  0080              LSLS     r0,r0,#2
0001b6  1cc0              ADDS     r0,r0,#3
0001b8  4a88              LDR      r2,|L20.988|
0001ba  63d0              STR      r0,[r2,#0x3c]
;;;249    			SYS->GPB_ALT.GPB2	=3;	// SPI_SCLK	
0001bc  4610              MOV      r0,r2
0001be  6bc0              LDR      r0,[r0,#0x3c]
0001c0  2230              MOVS     r2,#0x30
0001c2  4390              BICS     r0,r0,r2
0001c4  3030              ADDS     r0,r0,#0x30
0001c6  4a85              LDR      r2,|L20.988|
0001c8  63d0              STR      r0,[r2,#0x3c]
;;;250    			SYS->GPB_ALT.GPB3	=3;	// SPI_MISO0	
0001ca  4610              MOV      r0,r2
0001cc  6bc0              LDR      r0,[r0,#0x3c]
0001ce  22c0              MOVS     r2,#0xc0
0001d0  4390              BICS     r0,r0,r2
0001d2  30c0              ADDS     r0,r0,#0xc0
0001d4  4a81              LDR      r2,|L20.988|
0001d6  63d0              STR      r0,[r2,#0x3c]
;;;251    			SYS->GPB_ALT.GPB4 	=3; // SPI_MOSI0
0001d8  4610              MOV      r0,r2
0001da  6bc0              LDR      r0,[r0,#0x3c]
0001dc  4a87              LDR      r2,|L20.1020|
0001de  4390              BICS     r0,r0,r2
0001e0  1880              ADDS     r0,r0,r2
0001e2  4a7e              LDR      r2,|L20.988|
0001e4  63d0              STR      r0,[r2,#0x3c]
;;;252    		}break;
0001e6  e0f6              B        |L20.982|
0001e8  e0f3              B        |L20.978|
0001ea  e0f1              B        |L20.976|
0001ec  e0dc              B        |L20.936|
0001ee  e0ca              B        |L20.902|
0001f0  e0b6              B        |L20.864|
0001f2  e0ad              B        |L20.848|
0001f4  e0a4              B        |L20.832|
0001f6  e099              B        |L20.812|
0001f8  e08d              B        |L20.790|
0001fa  e06a              B        |L20.722|
0001fc  e055              B        |L20.682|
0001fe  e041              B        |L20.644|
000200  e7ff              B        |L20.514|
                  |L20.514|
;;;253    
;;;254    		/*---------------------------------------------------------------------------------------------------------*/
;;;255    		/* ACMP0   ACMP1                                                                                           */
;;;256    		/*---------------------------------------------------------------------------------------------------------*/
;;;257    		case FUNC_ACMP0:	
;;;258    		{
;;;259    			SYS->GPB_ALT.GPB0 	=2;
000202  4876              LDR      r0,|L20.988|
000204  6bc0              LDR      r0,[r0,#0x3c]
000206  0880              LSRS     r0,r0,#2
000208  0080              LSLS     r0,r0,#2
00020a  1c80              ADDS     r0,r0,#2
00020c  4a73              LDR      r2,|L20.988|
00020e  63d0              STR      r0,[r2,#0x3c]
;;;260    			SYS->GPB_ALT.GPB1 	=2;
000210  4610              MOV      r0,r2
000212  6bc0              LDR      r0,[r0,#0x3c]
000214  220c              MOVS     r2,#0xc
000216  4390              BICS     r0,r0,r2
000218  3008              ADDS     r0,r0,#8
00021a  4a70              LDR      r2,|L20.988|
00021c  63d0              STR      r0,[r2,#0x3c]
;;;261    			SYS->GPB_ALT.GPB2 	=2;
00021e  4610              MOV      r0,r2
000220  6bc0              LDR      r0,[r0,#0x3c]
000222  2230              MOVS     r2,#0x30
000224  4390              BICS     r0,r0,r2
000226  3020              ADDS     r0,r0,#0x20
000228  4a6c              LDR      r2,|L20.988|
00022a  63d0              STR      r0,[r2,#0x3c]
;;;262    			SYS->GPB_ALT.GPB3 	=2;
00022c  4610              MOV      r0,r2
00022e  6bc0              LDR      r0,[r0,#0x3c]
000230  22c0              MOVS     r2,#0xc0
000232  4390              BICS     r0,r0,r2
000234  3080              ADDS     r0,r0,#0x80
000236  4a69              LDR      r2,|L20.988|
000238  63d0              STR      r0,[r2,#0x3c]
;;;263    			SYS->GPB_ALT.GPB4 	=2;
00023a  4610              MOV      r0,r2
00023c  6bc0              LDR      r0,[r0,#0x3c]
00023e  4a6f              LDR      r2,|L20.1020|
000240  4390              BICS     r0,r0,r2
000242  30ff              ADDS     r0,r0,#0xff
000244  30ff              ADDS     r0,r0,#0xff
000246  3002              ADDS     r0,#2
000248  4a64              LDR      r2,|L20.988|
00024a  63d0              STR      r0,[r2,#0x3c]
;;;264    			SYS->GPB_ALT.GPB5 	=2;
00024c  4610              MOV      r0,r2
00024e  6bc0              LDR      r0,[r0,#0x3c]
000250  4a64              LDR      r2,|L20.996|
000252  4390              BICS     r0,r0,r2
000254  2201              MOVS     r2,#1
000256  02d2              LSLS     r2,r2,#11
000258  1880              ADDS     r0,r0,r2
00025a  4a60              LDR      r2,|L20.988|
00025c  63d0              STR      r0,[r2,#0x3c]
;;;265    			SYS->GPB_ALT.GPB6 	=2;
00025e  4610              MOV      r0,r2
000260  6bc0              LDR      r0,[r0,#0x3c]
000262  4a62              LDR      r2,|L20.1004|
000264  4390              BICS     r0,r0,r2
000266  2201              MOVS     r2,#1
000268  0352              LSLS     r2,r2,#13
00026a  1880              ADDS     r0,r0,r2
00026c  4a5b              LDR      r2,|L20.988|
00026e  63d0              STR      r0,[r2,#0x3c]
;;;266    			SYS->GPB_ALT.GPB7 	=2;
000270  4610              MOV      r0,r2
000272  6bc0              LDR      r0,[r0,#0x3c]
000274  4a5e              LDR      r2,|L20.1008|
000276  4390              BICS     r0,r0,r2
000278  2201              MOVS     r2,#1
00027a  03d2              LSLS     r2,r2,#15
00027c  1880              ADDS     r0,r0,r2
00027e  4a57              LDR      r2,|L20.988|
000280  63d0              STR      r0,[r2,#0x3c]
;;;267    		}break;
000282  e0a8              B        |L20.982|
                  |L20.644|
;;;268    
;;;269    		case FUNC_ACMP1:	
;;;270    		{
;;;271    			SYS->GPB_ALT.GPB6 	=2;
000284  4855              LDR      r0,|L20.988|
000286  6bc0              LDR      r0,[r0,#0x3c]
000288  4a58              LDR      r2,|L20.1004|
00028a  4390              BICS     r0,r0,r2
00028c  2201              MOVS     r2,#1
00028e  0352              LSLS     r2,r2,#13
000290  1880              ADDS     r0,r0,r2
000292  4a52              LDR      r2,|L20.988|
000294  63d0              STR      r0,[r2,#0x3c]
;;;272    			SYS->GPB_ALT.GPB7 	=2;
000296  4610              MOV      r0,r2
000298  6bc0              LDR      r0,[r0,#0x3c]
00029a  4a55              LDR      r2,|L20.1008|
00029c  4390              BICS     r0,r0,r2
00029e  2201              MOVS     r2,#1
0002a0  03d2              LSLS     r2,r2,#15
0002a2  1880              ADDS     r0,r0,r2
0002a4  4a4d              LDR      r2,|L20.988|
0002a6  63d0              STR      r0,[r2,#0x3c]
;;;273    		}break;
0002a8  e095              B        |L20.982|
                  |L20.682|
;;;274    
;;;275    		/*---------------------------------------------------------------------------------------------------------*/
;;;276    		/* UART                                                                                                    */
;;;277    		/*---------------------------------------------------------------------------------------------------------*/
;;;278    		case FUNC_UART0:
;;;279    		{
;;;280    			SYS->GPA_ALT.GPA8	=1;		// UART_TX: (0x5000_0000 + 14<<2)[31:0]= 0x5000_0038[17:16] 
0002aa  484c              LDR      r0,|L20.988|
0002ac  6b80              LDR      r0,[r0,#0x38]
0002ae  2203              MOVS     r2,#3
0002b0  0412              LSLS     r2,r2,#16
0002b2  4390              BICS     r0,r0,r2
0002b4  2201              MOVS     r2,#1
0002b6  0412              LSLS     r2,r2,#16
0002b8  1880              ADDS     r0,r0,r2
0002ba  4a48              LDR      r2,|L20.988|
0002bc  6390              STR      r0,[r2,#0x38]
;;;281    			SYS->GPA_ALT.GPA9 	=1;		// UART_RX: (0x5000_0000 + 14<<2)[31:0]= 0x5000_0038[19:18]
0002be  4610              MOV      r0,r2
0002c0  6b80              LDR      r0,[r0,#0x38]
0002c2  4a4c              LDR      r2,|L20.1012|
0002c4  4390              BICS     r0,r0,r2
0002c6  2201              MOVS     r2,#1
0002c8  0492              LSLS     r2,r2,#18
0002ca  1880              ADDS     r0,r0,r2
0002cc  4a43              LDR      r2,|L20.988|
0002ce  6390              STR      r0,[r2,#0x38]
;;;282    		}break;
0002d0  e081              B        |L20.982|
                  |L20.722|
;;;283    		
;;;284    		case FUNC_UART0_FLOW:
;;;285    		{
;;;286    			SYS->GPA_ALT.GPA8	=1;		// UART_TX: (0x5000_0000 + 14<<2)[31:0]= 0x5000_0038[17:16] 
0002d2  4842              LDR      r0,|L20.988|
0002d4  6b80              LDR      r0,[r0,#0x38]
0002d6  2203              MOVS     r2,#3
0002d8  0412              LSLS     r2,r2,#16
0002da  4390              BICS     r0,r0,r2
0002dc  2201              MOVS     r2,#1
0002de  0412              LSLS     r2,r2,#16
0002e0  1880              ADDS     r0,r0,r2
0002e2  4a3e              LDR      r2,|L20.988|
0002e4  6390              STR      r0,[r2,#0x38]
;;;287    			SYS->GPA_ALT.GPA9 	=1;		// UART_RX: (0x5000_0000 + 14<<2)[31:0]= 0x5000_0038[19:18]
0002e6  4610              MOV      r0,r2
0002e8  6b80              LDR      r0,[r0,#0x38]
0002ea  4a42              LDR      r2,|L20.1012|
0002ec  4390              BICS     r0,r0,r2
0002ee  2201              MOVS     r2,#1
0002f0  0492              LSLS     r2,r2,#18
0002f2  1880              ADDS     r0,r0,r2
0002f4  4a39              LDR      r2,|L20.988|
0002f6  6390              STR      r0,[r2,#0x38]
;;;288    			SYS->GPA_ALT.GPA10 	=3;		// UART_RTSn
0002f8  4610              MOV      r0,r2
0002fa  6b80              LDR      r0,[r0,#0x38]
0002fc  4a3e              LDR      r2,|L20.1016|
0002fe  4390              BICS     r0,r0,r2
000300  1880              ADDS     r0,r0,r2
000302  4a36              LDR      r2,|L20.988|
000304  6390              STR      r0,[r2,#0x38]
;;;289    			SYS->GPA_ALT.GPA11	=3;		// UART_CTSn
000306  4610              MOV      r0,r2
000308  6b80              LDR      r0,[r0,#0x38]
00030a  4a37              LDR      r2,|L20.1000|
00030c  4390              BICS     r0,r0,r2
00030e  1880              ADDS     r0,r0,r2
000310  4a32              LDR      r2,|L20.988|
000312  6390              STR      r0,[r2,#0x38]
;;;290    		}break;
000314  e05f              B        |L20.982|
                  |L20.790|
;;;291    
;;;292    		/*---------------------------------------------------------------------------------------------------------*/
;;;293    		/* TIMER                                                                                                   */
;;;294    		/*---------------------------------------------------------------------------------------------------------*/
;;;295    		case FUNC_TMR0:
;;;296    		{
;;;297    			SYS->GPA_ALT.GPA14 		=1;	   // TM0
000316  4831              LDR      r0,|L20.988|
000318  6b80              LDR      r0,[r0,#0x38]
00031a  2203              MOVS     r2,#3
00031c  0712              LSLS     r2,r2,#28
00031e  4390              BICS     r0,r0,r2
000320  2201              MOVS     r2,#1
000322  0712              LSLS     r2,r2,#28
000324  1880              ADDS     r0,r0,r2
000326  4a2d              LDR      r2,|L20.988|
000328  6390              STR      r0,[r2,#0x38]
;;;298    		}break;
00032a  e054              B        |L20.982|
                  |L20.812|
;;;299    	
;;;300    		case FUNC_TMR1:
;;;301    		{
;;;302    			SYS->GPA_ALT.GPA15 		=1;	   // TM1
00032c  482b              LDR      r0,|L20.988|
00032e  6b80              LDR      r0,[r0,#0x38]
000330  0080              LSLS     r0,r0,#2
000332  0880              LSRS     r0,r0,#2
000334  2201              MOVS     r2,#1
000336  0792              LSLS     r2,r2,#30
000338  1880              ADDS     r0,r0,r2
00033a  4a28              LDR      r2,|L20.988|
00033c  6390              STR      r0,[r2,#0x38]
;;;303    		}break;
00033e  e04a              B        |L20.982|
                  |L20.832|
;;;304    
;;;305    		/*---------------------------------------------------------------------------------------------------------*/
;;;306    		/* MCLK                                                                                                    */
;;;307    		/*---------------------------------------------------------------------------------------------------------*/
;;;308    		case FUNC_MCLK0:
;;;309    		{
;;;310    			SYS->GPA_ALT.GPA0 		=2;	   
000340  4826              LDR      r0,|L20.988|
000342  6b80              LDR      r0,[r0,#0x38]
000344  0880              LSRS     r0,r0,#2
000346  0080              LSLS     r0,r0,#2
000348  1c80              ADDS     r0,r0,#2
00034a  4a24              LDR      r2,|L20.988|
00034c  6390              STR      r0,[r2,#0x38]
;;;311    		}break;
00034e  e042              B        |L20.982|
                  |L20.848|
;;;312    
;;;313    		case FUNC_MCLK1:
;;;314    		{
;;;315    			SYS->GPB_ALT.GPB1 		=1;	   
000350  4822              LDR      r0,|L20.988|
000352  6bc0              LDR      r0,[r0,#0x3c]
000354  220c              MOVS     r2,#0xc
000356  4390              BICS     r0,r0,r2
000358  1d00              ADDS     r0,r0,#4
00035a  4a20              LDR      r2,|L20.988|
00035c  63d0              STR      r0,[r2,#0x3c]
;;;316    		}break;
00035e  e03a              B        |L20.982|
                  |L20.864|
;;;317    
;;;318      		/*---------------------------------------------------------------------------------------------------------*/
;;;319    		/* DMIC                                                 				                                   */
;;;320    		/*---------------------------------------------------------------------------------------------------------*/
;;;321    	  	case FUNC_DMIC0:
;;;322    		{
;;;323    			SYS->GPA_ALT.GPA14 		=2;		//SDCLK
000360  481e              LDR      r0,|L20.988|
000362  6b80              LDR      r0,[r0,#0x38]
000364  2203              MOVS     r2,#3
000366  0712              LSLS     r2,r2,#28
000368  4390              BICS     r0,r0,r2
00036a  2201              MOVS     r2,#1
00036c  0752              LSLS     r2,r2,#29
00036e  1880              ADDS     r0,r0,r2
000370  4a1a              LDR      r2,|L20.988|
000372  6390              STR      r0,[r2,#0x38]
;;;324    			SYS->GPA_ALT.GPA15 		=2;	    //SDIN
000374  4610              MOV      r0,r2
000376  6b80              LDR      r0,[r0,#0x38]
000378  0080              LSLS     r0,r0,#2
00037a  0880              LSRS     r0,r0,#2
00037c  00d2              LSLS     r2,r2,#3
00037e  1880              ADDS     r0,r0,r2
000380  4a16              LDR      r2,|L20.988|
000382  6390              STR      r0,[r2,#0x38]
;;;325    		}break;
000384  e027              B        |L20.982|
                  |L20.902|
;;;326    
;;;327    	  	case FUNC_DMIC1:
;;;328    		{
;;;329    			SYS->GPA_ALT.GPA14 		=3;		//!SDCLK
000386  4815              LDR      r0,|L20.988|
000388  6b80              LDR      r0,[r0,#0x38]
00038a  2203              MOVS     r2,#3
00038c  0712              LSLS     r2,r2,#28
00038e  4390              BICS     r0,r0,r2
000390  1880              ADDS     r0,r0,r2
000392  4a12              LDR      r2,|L20.988|
000394  6390              STR      r0,[r2,#0x38]
;;;330    			SYS->GPA_ALT.GPA15 		=2;	    //SDIN
000396  4610              MOV      r0,r2
000398  6b80              LDR      r0,[r0,#0x38]
00039a  0080              LSLS     r0,r0,#2
00039c  0880              LSRS     r0,r0,#2
00039e  00d2              LSLS     r2,r2,#3
0003a0  1880              ADDS     r0,r0,r2
0003a2  4a0e              LDR      r2,|L20.988|
0003a4  6390              STR      r0,[r2,#0x38]
;;;331    		}break;
0003a6  e016              B        |L20.982|
                  |L20.936|
;;;332    
;;;333    		/*---------------------------------------------------------------------------------------------------------*/
;;;334    		/* SPK   									                                                               */
;;;335    		/*---------------------------------------------------------------------------------------------------------*/
;;;336    		case FUNC_SPK:
;;;337    		{
;;;338    			SYS->GPA_ALT.GPA12 		=2;		//SPKP
0003a8  480c              LDR      r0,|L20.988|
0003aa  6b80              LDR      r0,[r0,#0x38]
0003ac  2203              MOVS     r2,#3
0003ae  0612              LSLS     r2,r2,#24
0003b0  4390              BICS     r0,r0,r2
0003b2  2201              MOVS     r2,#1
0003b4  0652              LSLS     r2,r2,#25
0003b6  1880              ADDS     r0,r0,r2
0003b8  4a08              LDR      r2,|L20.988|
0003ba  6390              STR      r0,[r2,#0x38]
;;;339    			SYS->GPA_ALT.GPA13		=2;		//SPKM
0003bc  4610              MOV      r0,r2
0003be  6b80              LDR      r0,[r0,#0x38]
0003c0  4a07              LDR      r2,|L20.992|
0003c2  4390              BICS     r0,r0,r2
0003c4  2201              MOVS     r2,#1
0003c6  06d2              LSLS     r2,r2,#27
0003c8  1880              ADDS     r0,r0,r2
0003ca  4a04              LDR      r2,|L20.988|
0003cc  6390              STR      r0,[r2,#0x38]
;;;340    		}break;
0003ce  e002              B        |L20.982|
                  |L20.976|
;;;341    
;;;342    		/*---------------------------------------------------------------------------------------------------------*/
;;;343    		/* NONE: user will configure GPIO manually	                                                               */
;;;344    		/*---------------------------------------------------------------------------------------------------------*/
;;;345    		case FUNC_NONE:
;;;346    		{
;;;347    		}break;
0003d0  e001              B        |L20.982|
                  |L20.978|
;;;348    
;;;349    		default:
;;;350    			return E_DRVGPIO_ARGUMENT;
0003d2  480b              LDR      r0,|L20.1024|
                  |L20.980|
;;;351    	}
;;;352    
;;;353    	return E_SUCCESS;
;;;354    }
0003d4  bd00              POP      {pc}
                  |L20.982|
0003d6  bf00              NOP                            ;176
0003d8  2000              MOVS     r0,#0                 ;353
0003da  e7fb              B        |L20.980|
;;;355    
                          ENDP

                  |L20.988|
                          DCD      0x50000000
                  |L20.992|
                          DCD      0x0c000000
                  |L20.996|
                          DCD      0x00000c00
                  |L20.1000|
                          DCD      0x00c00000
                  |L20.1004|
                          DCD      0x00003000
                  |L20.1008|
                          DCD      0x0000c000
                  |L20.1012|
                          DCD      0x000c0000
                  |L20.1016|
                          DCD      0x00300000
                  |L20.1020|
                          DCD      0x00000300
                  |L20.1024|
                          DCD      0xffff8901

                          AREA ||i.DrvGPIO_Open||, CODE, READONLY, ALIGN=2

                  DrvGPIO_Open PROC
;;;402    
;;;403    int32_t DrvGPIO_Open(DRVGPIO_PORT port,int32_t i32Bit,DRVGPIO_IO mode)
000000  b530              PUSH     {r4,r5,lr}
;;;404    {
000002  4603              MOV      r3,r0
;;;405        if(port > GPB)
000004  2b01              CMP      r3,#1
000006  dd01              BLE      |L21.12|
;;;406        {
;;;407            return E_DRVGPIO_ARGUMENT;
000008  4835              LDR      r0,|L21.224|
                  |L21.10|
;;;408        }
;;;409        
;;;410        if((i32Bit < 0) || (i32Bit > 16))
;;;411        {
;;;412            return E_DRVGPIO_ARGUMENT;
;;;413        }
;;;414        
;;;415        
;;;416        if(mode == IO_INPUT)
;;;417        {
;;;418            outpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET, (inpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET) & (~(3 << (i32Bit * 2)))));
;;;419        }
;;;420        else if(mode == IO_OUTPUT)
;;;421        {
;;;422    		outpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET, (inpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET) & (~(3 << (i32Bit * 2)))));
;;;423            outpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET, inpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET) | (1 << (i32Bit * 2)));
;;;424        }
;;;425        else if(mode == IO_OPENDRAIN)
;;;426        {
;;;427    		outpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET, (inpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET) & (~(3 << (i32Bit * 2)))));
;;;428            outpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET, inpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET) | (2 << (i32Bit * 2)));
;;;429        }
;;;430    	else if(mode == IO_QUASI)
;;;431        {
;;;432    		outpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET, (inpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET) & (~(3 << (i32Bit * 2)))));
;;;433            outpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET, inpw((uint32_t)&GPIOA->PMD + port * PORT_OFFSET) | (3 << (i32Bit * 2)));
;;;434        }
;;;435    	else
;;;436        {
;;;437            return E_DRVGPIO_ARGUMENT;
;;;438        }
;;;439            
;;;440    	return E_SUCCESS;
;;;441    }
00000a  bd30              POP      {r4,r5,pc}
                  |L21.12|
00000c  2900              CMP      r1,#0                 ;410
00000e  db01              BLT      |L21.20|
000010  2910              CMP      r1,#0x10              ;410
000012  dd01              BLE      |L21.24|
                  |L21.20|
000014  4832              LDR      r0,|L21.224|
000016  e7f8              B        |L21.10|
                  |L21.24|
000018  2a00              CMP      r2,#0                 ;416
00001a  d10c              BNE      |L21.54|
00001c  0198              LSLS     r0,r3,#6              ;418
00001e  4c31              LDR      r4,|L21.228|
000020  1900              ADDS     r0,r0,r4              ;418
000022  6800              LDR      r0,[r0,#0]            ;418
000024  004d              LSLS     r5,r1,#1              ;418
000026  2403              MOVS     r4,#3                 ;418
000028  40ac              LSLS     r4,r4,r5              ;418
00002a  43a0              BICS     r0,r0,r4              ;418
00002c  019c              LSLS     r4,r3,#6              ;418
00002e  4d2d              LDR      r5,|L21.228|
000030  1964              ADDS     r4,r4,r5              ;418
000032  6020              STR      r0,[r4,#0]            ;418
000034  e052              B        |L21.220|
                  |L21.54|
000036  2a01              CMP      r2,#1                 ;420
000038  d118              BNE      |L21.108|
00003a  0198              LSLS     r0,r3,#6              ;422
00003c  4c29              LDR      r4,|L21.228|
00003e  1900              ADDS     r0,r0,r4              ;422
000040  6800              LDR      r0,[r0,#0]            ;422
000042  004d              LSLS     r5,r1,#1              ;422
000044  2403              MOVS     r4,#3                 ;422
000046  40ac              LSLS     r4,r4,r5              ;422
000048  43a0              BICS     r0,r0,r4              ;422
00004a  019c              LSLS     r4,r3,#6              ;422
00004c  4d25              LDR      r5,|L21.228|
00004e  1964              ADDS     r4,r4,r5              ;422
000050  6020              STR      r0,[r4,#0]            ;422
000052  0198              LSLS     r0,r3,#6              ;423
000054  462c              MOV      r4,r5                 ;423
000056  1900              ADDS     r0,r0,r4              ;423
000058  6800              LDR      r0,[r0,#0]            ;423
00005a  004d              LSLS     r5,r1,#1              ;423
00005c  2401              MOVS     r4,#1                 ;423
00005e  40ac              LSLS     r4,r4,r5              ;423
000060  4320              ORRS     r0,r0,r4              ;423
000062  019c              LSLS     r4,r3,#6              ;423
000064  4d1f              LDR      r5,|L21.228|
000066  1964              ADDS     r4,r4,r5              ;423
000068  6020              STR      r0,[r4,#0]            ;423
00006a  e037              B        |L21.220|
                  |L21.108|
00006c  2a02              CMP      r2,#2                 ;425
00006e  d118              BNE      |L21.162|
000070  0198              LSLS     r0,r3,#6              ;427
000072  4c1c              LDR      r4,|L21.228|
000074  1900              ADDS     r0,r0,r4              ;427
000076  6800              LDR      r0,[r0,#0]            ;427
000078  004d              LSLS     r5,r1,#1              ;427
00007a  2403              MOVS     r4,#3                 ;427
00007c  40ac              LSLS     r4,r4,r5              ;427
00007e  43a0              BICS     r0,r0,r4              ;427
000080  019c              LSLS     r4,r3,#6              ;427
000082  4d18              LDR      r5,|L21.228|
000084  1964              ADDS     r4,r4,r5              ;427
000086  6020              STR      r0,[r4,#0]            ;427
000088  0198              LSLS     r0,r3,#6              ;428
00008a  462c              MOV      r4,r5                 ;428
00008c  1900              ADDS     r0,r0,r4              ;428
00008e  6800              LDR      r0,[r0,#0]            ;428
000090  004d              LSLS     r5,r1,#1              ;428
000092  2402              MOVS     r4,#2                 ;428
000094  40ac              LSLS     r4,r4,r5              ;428
000096  4320              ORRS     r0,r0,r4              ;428
000098  019c              LSLS     r4,r3,#6              ;428
00009a  4d12              LDR      r5,|L21.228|
00009c  1964              ADDS     r4,r4,r5              ;428
00009e  6020              STR      r0,[r4,#0]            ;428
0000a0  e01c              B        |L21.220|
                  |L21.162|
0000a2  2a03              CMP      r2,#3                 ;430
0000a4  d118              BNE      |L21.216|
0000a6  0198              LSLS     r0,r3,#6              ;432
0000a8  4c0e              LDR      r4,|L21.228|
0000aa  1900              ADDS     r0,r0,r4              ;432
0000ac  6804              LDR      r4,[r0,#0]            ;432
0000ae  004d              LSLS     r5,r1,#1              ;432
0000b0  2003              MOVS     r0,#3                 ;432
0000b2  40a8              LSLS     r0,r0,r5              ;432
0000b4  4384              BICS     r4,r4,r0              ;432
0000b6  0198              LSLS     r0,r3,#6              ;432
0000b8  4d0a              LDR      r5,|L21.228|
0000ba  1940              ADDS     r0,r0,r5              ;432
0000bc  6004              STR      r4,[r0,#0]            ;432
0000be  0198              LSLS     r0,r3,#6              ;433
0000c0  462c              MOV      r4,r5                 ;433
0000c2  1900              ADDS     r0,r0,r4              ;433
0000c4  6800              LDR      r0,[r0,#0]            ;433
0000c6  004d              LSLS     r5,r1,#1              ;433
0000c8  2403              MOVS     r4,#3                 ;433
0000ca  40ac              LSLS     r4,r4,r5              ;433
0000cc  4320              ORRS     r0,r0,r4              ;433
0000ce  019c              LSLS     r4,r3,#6              ;433
0000d0  4d04              LDR      r5,|L21.228|
0000d2  1964              ADDS     r4,r4,r5              ;433
0000d4  6020              STR      r0,[r4,#0]            ;433
0000d6  e001              B        |L21.220|
                  |L21.216|
0000d8  4801              LDR      r0,|L21.224|
0000da  e796              B        |L21.10|
                  |L21.220|
0000dc  2000              MOVS     r0,#0                 ;440
0000de  e794              B        |L21.10|
;;;442    
                          ENDP

                  |L21.224|
                          DCD      0xffff8901
                  |L21.228|
                          DCD      0x50004000

                          AREA ||i.DrvGPIO_SetBit||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetBit PROC
;;;545    
;;;546    int32_t DrvGPIO_SetBit(DRVGPIO_PORT port,int32_t i32Bit)
000000  4602              MOV      r2,r0
;;;547    {
;;;548      if(port > GPB)
000002  2a01              CMP      r2,#1
000004  dd01              BLE      |L22.10|
;;;549        {
;;;550            return E_DRVGPIO_ARGUMENT;
000006  4810              LDR      r0,|L22.72|
                  |L22.8|
;;;551        }
;;;552    
;;;553        if((i32Bit < 0) || (i32Bit > 16))
;;;554        {
;;;555            return E_DRVGPIO_ARGUMENT;
;;;556        }
;;;557    
;;;558        if(port == GPA)
;;;559    		GPIOA->DOUT |=	1 << i32Bit;
;;;560    	else if(port == GPB)
;;;561    		GPIOB->DOUT |=	1 << i32Bit;
;;;562    	else
;;;563    		return E_DRVGPIO_ARGUMENT;	
;;;564    
;;;565    	return E_SUCCESS;
;;;566    
;;;567    }
000008  4770              BX       lr
                  |L22.10|
00000a  2900              CMP      r1,#0                 ;553
00000c  db01              BLT      |L22.18|
00000e  2910              CMP      r1,#0x10              ;553
000010  dd01              BLE      |L22.22|
                  |L22.18|
000012  480d              LDR      r0,|L22.72|
000014  e7f8              B        |L22.8|
                  |L22.22|
000016  2a00              CMP      r2,#0                 ;558
000018  d107              BNE      |L22.42|
00001a  480c              LDR      r0,|L22.76|
00001c  6880              LDR      r0,[r0,#8]            ;559
00001e  2301              MOVS     r3,#1                 ;559
000020  408b              LSLS     r3,r3,r1              ;559
000022  4318              ORRS     r0,r0,r3              ;559
000024  4b09              LDR      r3,|L22.76|
000026  6098              STR      r0,[r3,#8]            ;559
000028  e00c              B        |L22.68|
                  |L22.42|
00002a  2a01              CMP      r2,#1                 ;560
00002c  d108              BNE      |L22.64|
00002e  4807              LDR      r0,|L22.76|
000030  3040              ADDS     r0,r0,#0x40           ;561
000032  6880              LDR      r0,[r0,#8]            ;561
000034  2301              MOVS     r3,#1                 ;561
000036  408b              LSLS     r3,r3,r1              ;561
000038  4318              ORRS     r0,r0,r3              ;561
00003a  4b05              LDR      r3,|L22.80|
00003c  6098              STR      r0,[r3,#8]            ;561
00003e  e001              B        |L22.68|
                  |L22.64|
000040  4801              LDR      r0,|L22.72|
000042  e7e1              B        |L22.8|
                  |L22.68|
000044  2000              MOVS     r0,#0                 ;565
000046  e7df              B        |L22.8|
;;;568    
                          ENDP

                  |L22.72|
                          DCD      0xffff8901
                  |L22.76|
                          DCD      0x50004000
                  |L22.80|
                          DCD      0x50004040

                          AREA ||i.DrvGPIO_SetBitMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetBitMask PROC
;;;796    /*---------------------------------------------------------------------------------------------------------*/
;;;797    int32_t DrvGPIO_SetBitMask(DRVGPIO_PORT port, int32_t i32Bit)
000000  b510              PUSH     {r4,lr}
;;;798    {
000002  4602              MOV      r2,r0
;;;799    
;;;800    	outpw((uint32_t)&GPIOA->DMASK+ port*PORT_OFFSET , inpw((uint32_t)&GPIOA->DMASK+ port*PORT_OFFSET) | (1<<i32Bit));
000004  4805              LDR      r0,|L23.28|
000006  0193              LSLS     r3,r2,#6
000008  58c0              LDR      r0,[r0,r3]
00000a  2301              MOVS     r3,#1
00000c  408b              LSLS     r3,r3,r1
00000e  4318              ORRS     r0,r0,r3
000010  4b02              LDR      r3,|L23.28|
000012  0194              LSLS     r4,r2,#6
000014  5118              STR      r0,[r3,r4]
;;;801    
;;;802    	return E_SUCCESS;
000016  2000              MOVS     r0,#0
;;;803    }
000018  bd10              POP      {r4,pc}
;;;804    
                          ENDP

00001a  0000              DCW      0x0000
                  |L23.28|
                          DCD      0x5000400c

                          AREA ||i.DrvGPIO_SetDebounceTime||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetDebounceTime PROC
;;;668    
;;;669    int32_t DrvGPIO_SetDebounceTime(uint32_t u32DebounceClk,DRVGPIO_DBCLKSRC clockSource)
000000  b510              PUSH     {r4,lr}
;;;670    {
000002  4602              MOV      r2,r0
;;;671    
;;;672        /* Maximum debounce time is 2^(15) * clockSource */
;;;673        if(u32DebounceClk > 15)
000004  2a0f              CMP      r2,#0xf
000006  d900              BLS      |L24.10|
;;;674        {
;;;675            u32DebounceClk = 15;
000008  220f              MOVS     r2,#0xf
                  |L24.10|
;;;676        }
;;;677        
;;;678    	GPIO_DBNCECON->DBCLKSEL = u32DebounceClk ; // 0x5000_4180[3:0]
00000a  480a              LDR      r0,|L24.52|
00000c  6800              LDR      r0,[r0,#0]
00000e  0900              LSRS     r0,r0,#4
000010  0100              LSLS     r0,r0,#4
000012  0713              LSLS     r3,r2,#28
000014  0f1b              LSRS     r3,r3,#28
000016  4318              ORRS     r0,r0,r3
000018  4b06              LDR      r3,|L24.52|
00001a  6018              STR      r0,[r3,#0]
;;;679    
;;;680    	GPIO_DBNCECON->DBCLKSRC = clockSource ; // 0x5000_4180[4]
00001c  4618              MOV      r0,r3
00001e  6800              LDR      r0,[r0,#0]
000020  2310              MOVS     r3,#0x10
000022  4398              BICS     r0,r0,r3
000024  010b              LSLS     r3,r1,#4
000026  2410              MOVS     r4,#0x10
000028  4023              ANDS     r3,r3,r4
00002a  4318              ORRS     r0,r0,r3
00002c  4b01              LDR      r3,|L24.52|
00002e  6018              STR      r0,[r3,#0]
;;;681    
;;;682        return E_SUCCESS;
000030  2000              MOVS     r0,#0
;;;683    }
000032  bd10              POP      {r4,pc}
;;;684    
                          ENDP

                  |L24.52|
                          DCD      0x50004180

                          AREA ||i.DrvGPIO_SetIntCallback||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetIntCallback PROC
;;;112    /*---------------------------------------------------------------------------------------------------------*/
;;;113    void DrvGPIO_SetIntCallback(
000000  4901              LDR      r1,|L25.8|
;;;114        GPIO_GPAB_CALLBACK pfGPABCallback
;;;115    )
;;;116    {
;;;117        _pfGPABCallback  = (void (*)(uint32_t, uint32_t))pfGPABCallback;
000002  6008              STR      r0,[r1,#0]  ; _pfGPABCallback
;;;118          
;;;119    }
000004  4770              BX       lr
;;;120    
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      _pfGPABCallback

                          AREA ||i.DrvGPIO_SetPortBits||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetPortBits PROC
;;;456    
;;;457    int32_t DrvGPIO_SetPortBits(DRVGPIO_PORT port,int32_t i32Data)
000000  4602              MOV      r2,r0
;;;458    {
;;;459        if(port > GPB)
000002  2a01              CMP      r2,#1
000004  dd01              BLE      |L26.10|
;;;460        {
;;;461            return E_DRVGPIO_ARGUMENT;
000006  4808              LDR      r0,|L26.40|
                  |L26.8|
;;;462        }
;;;463        
;;;464        if(port == GPA)
;;;465    		GPIOA->DOUT =	i32Data; //(0x5000_0000 + 2<<2)[31:0]= 0x5000_0004[31:0]
;;;466    	else if(port == GPB)
;;;467    		GPIOB->DOUT =	i32Data; //(0x5000_0040 + 2<<2)[31:0]= 0x5000_0044[31:0]
;;;468    	else
;;;469    		return E_DRVGPIO_ARGUMENT;	
;;;470    
;;;471        return E_SUCCESS;
;;;472    }
000008  4770              BX       lr
                  |L26.10|
00000a  2a00              CMP      r2,#0                 ;464
00000c  d102              BNE      |L26.20|
00000e  4807              LDR      r0,|L26.44|
000010  6081              STR      r1,[r0,#8]            ;465
000012  e006              B        |L26.34|
                  |L26.20|
000014  2a01              CMP      r2,#1                 ;466
000016  d102              BNE      |L26.30|
000018  4805              LDR      r0,|L26.48|
00001a  6081              STR      r1,[r0,#8]            ;467
00001c  e001              B        |L26.34|
                  |L26.30|
00001e  4802              LDR      r0,|L26.40|
000020  e7f2              B        |L26.8|
                  |L26.34|
000022  2000              MOVS     r0,#0                 ;471
000024  e7f0              B        |L26.8|
;;;473    
                          ENDP

000026  0000              DCW      0x0000
                  |L26.40|
                          DCD      0xffff8901
                  |L26.44|
                          DCD      0x50004000
                  |L26.48|
                          DCD      0x50004040

                          AREA ||i.DrvGPIO_SetPortMask||, CODE, READONLY, ALIGN=2

                  DrvGPIO_SetPortMask PROC
;;;771    /*---------------------------------------------------------------------------------------------------------*/
;;;772    int32_t DrvGPIO_SetPortMask(DRVGPIO_PORT port, uint32_t u32Mask)
000000  4602              MOV      r2,r0
;;;773    {
;;;774        if(port > GPB)
000002  2a01              CMP      r2,#1
000004  dd01              BLE      |L27.10|
;;;775    		return E_DRVGPIO_ARGUMENT;	
000006  4803              LDR      r0,|L27.20|
                  |L27.8|
;;;776    
;;;777    	//&GPIOA->DMASK: (0x5000_4000 + 3<< 4)[31:0] = 0x5000_400C[31:0]
;;;778        outpw((uint32_t)&GPIOA->DMASK + port * PORT_OFFSET, u32Mask);
;;;779    
;;;780        return E_SUCCESS;
;;;781    }
000008  4770              BX       lr
                  |L27.10|
00000a  4803              LDR      r0,|L27.24|
00000c  0193              LSLS     r3,r2,#6              ;778
00000e  50c1              STR      r1,[r0,r3]            ;778
000010  2000              MOVS     r0,#0                 ;780
000012  e7f9              B        |L27.8|
;;;782    
                          ENDP

                  |L27.20|
                          DCD      0xffff8901
                  |L27.24|
                          DCD      0x5000400c

                          AREA ||i.EINT0_IRQHandler||, CODE, READONLY, ALIGN=2

                  EINT0_IRQHandler PROC
;;;74     /*---------------------------------------------------------------------------------------------------------*/
;;;75     void EINT0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77         /* EINT0 = GPB0. Clear the interrupt */
;;;78       	GPIOB->ISRC  = 1UL << 0;
000002  2001              MOVS     r0,#1
000004  4904              LDR      r1,|L28.24|
000006  6208              STR      r0,[r1,#0x20]
;;;79     	if(_pfEINT0Callback)
000008  4804              LDR      r0,|L28.28|
00000a  6800              LDR      r0,[r0,#0]  ; _pfEINT0Callback
00000c  2800              CMP      r0,#0
00000e  d002              BEQ      |L28.22|
;;;80             _pfEINT0Callback();
000010  4802              LDR      r0,|L28.28|
000012  6800              LDR      r0,[r0,#0]  ; _pfEINT0Callback
000014  4780              BLX      r0
                  |L28.22|
;;;81     }
000016  bd10              POP      {r4,pc}
;;;82     
                          ENDP

                  |L28.24|
                          DCD      0x50004040
                  |L28.28|
                          DCD      _pfEINT0Callback

                          AREA ||i.EINT1_IRQHandler||, CODE, READONLY, ALIGN=2

                  EINT1_IRQHandler PROC
;;;93     /*---------------------------------------------------------------------------------------------------------*/
;;;94     void EINT1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96         /* EINT1 = GPB1. Clear the interrupt */
;;;97       	GPIOB->ISRC  = 1UL << 1;
000002  2002              MOVS     r0,#2
000004  4904              LDR      r1,|L29.24|
000006  6208              STR      r0,[r1,#0x20]
;;;98     	if(_pfEINT1Callback)
000008  4804              LDR      r0,|L29.28|
00000a  6800              LDR      r0,[r0,#0]  ; _pfEINT1Callback
00000c  2800              CMP      r0,#0
00000e  d002              BEQ      |L29.22|
;;;99             _pfEINT1Callback();
000010  4802              LDR      r0,|L29.28|
000012  6800              LDR      r0,[r0,#0]  ; _pfEINT1Callback
000014  4780              BLX      r0
                  |L29.22|
;;;100    }
000016  bd10              POP      {r4,pc}
;;;101    
                          ENDP

                  |L29.24|
                          DCD      0x50004040
                  |L29.28|
                          DCD      _pfEINT1Callback

                          AREA ||i.GPAB_IRQHandler||, CODE, READONLY, ALIGN=2

                  GPAB_IRQHandler PROC
;;;40     //#ifdef USE_DRIVER_GPIO_IRQ
;;;41     void GPAB_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;42     {
;;;43     	uint32_t u32GpaStatus, u32GpbStatus;
;;;44     	
;;;45         /* Keep the interrupt source */
;;;46     	u32GpaStatus = GPIOA->ISRC;// (0x5000_4000 + 8 << 2)[31:0] = 0x5000_4020[31:0]
000002  4809              LDR      r0,|L30.40|
000004  6a04              LDR      r4,[r0,#0x20]
;;;47     	u32GpbStatus = GPIOB->ISRC;// (0x5000_4040 + 8 << 2)[31:0] = 0x5000_4060[31:0]
000006  4809              LDR      r0,|L30.44|
000008  6a05              LDR      r5,[r0,#0x20]
;;;48     
;;;49         /* Clear the interrupt */
;;;50         GPIOA->ISRC = u32GpaStatus;
00000a  4807              LDR      r0,|L30.40|
00000c  6204              STR      r4,[r0,#0x20]
;;;51         GPIOB->ISRC = u32GpbStatus;
00000e  4807              LDR      r0,|L30.44|
000010  6205              STR      r5,[r0,#0x20]
;;;52     
;;;53         /* Call the callback function of GPIOAB interrupt */
;;;54         if(_pfGPABCallback)
000012  4807              LDR      r0,|L30.48|
000014  6800              LDR      r0,[r0,#0]  ; _pfGPABCallback
000016  2800              CMP      r0,#0
000018  d004              BEQ      |L30.36|
;;;55             _pfGPABCallback(u32GpaStatus, u32GpbStatus);    
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  4a04              LDR      r2,|L30.48|
000020  6812              LDR      r2,[r2,#0]  ; _pfGPABCallback
000022  4790              BLX      r2
                  |L30.36|
;;;56     
;;;57     }
000024  bd70              POP      {r4-r6,pc}
;;;58     //	  #endif
                          ENDP

000026  0000              DCW      0x0000
                  |L30.40|
                          DCD      0x50004000
                  |L30.44|
                          DCD      0x50004040
                  |L30.48|
                          DCD      _pfGPABCallback

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;554     */
;;;555    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;556    {
;;;557      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L31.16|
00000a  6011              STR      r1,[r2,#0]
;;;558    }
00000c  4770              BX       lr
;;;559    
                          ENDP

00000e  0000              DCW      0x0000
                  |L31.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;541     */
;;;542    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;543    {
;;;544      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L32.16|
00000a  6011              STR      r1,[r2,#0]
;;;545    }
00000c  4770              BX       lr
;;;546    
                          ENDP

00000e  0000              DCW      0x0000
                  |L32.16|
                          DCD      0xe000e100

                          AREA ||.data||, DATA, ALIGN=2

                  _pfGPABCallback
                          DCD      0x00000000
                  _pfEINT0Callback
                          DCD      0x00000000
                  _pfEINT1Callback
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L199.24|
                  |L199.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L199.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L199.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\ISD91XX_SDK\\NuvotonPlatform_Keil\\Src\\Driver\\DrvGPIO.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_DrvGPIO_c_90e6b153____REV16|
#line 112 "..\\..\\ISD91XX_SDK\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___9_DrvGPIO_c_90e6b153____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_DrvGPIO_c_90e6b153____REVSH|
#line 130
|__asm___9_DrvGPIO_c_90e6b153____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
