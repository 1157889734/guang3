; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\drvtimer.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\output\drvtimer.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport -I..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Nuvoton --omf_browse=..\output\drvtimer.crf ..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\DrvTimer.c]
                          THUMB

                          AREA ||i.CalTimerInitValue||, CODE, READONLY, ALIGN=1

                  CalTimerInitValue PROC
;;;450    /*---------------------------------------------------------------------------------------------------------*/
;;;451    static uint32_t CalTimerInitValue(uint32_t u32ClockSrc, uint32_t u32TicksPerSec)
000000  b5f8              PUSH     {r3-r7,lr}
;;;452    {
000002  4607              MOV      r7,r0
000004  460e              MOV      r6,r1
;;;453        uint32_t u32PreScale;
;;;454        uint32_t u32InitValue;
;;;455    
;;;456        if((u32ClockSrc < 2) || (u32TicksPerSec == 0))
000006  2f02              CMP      r7,#2
000008  d301              BCC      |L1.14|
00000a  2e00              CMP      r6,#0
00000c  d102              BNE      |L1.20|
                  |L1.14|
;;;457            return (uint32_t)-1;
00000e  2000              MOVS     r0,#0
000010  43c0              MVNS     r0,r0
                  |L1.18|
;;;458    
;;;459        for(u32PreScale = 1;u32PreScale < 256;u32PreScale++)
;;;460        {
;;;461            u32InitValue = u32ClockSrc / (u32TicksPerSec * u32PreScale);
;;;462    
;;;463            /* The initial value must > 1 */
;;;464    	   if ((u32InitValue > 1) && (u32InitValue < 0x1000000))
;;;465                return (((u32PreScale-1) << 24) | u32InitValue);
;;;466      
;;;467        
;;;468        }
;;;469        
;;;470        return (uint32_t)-1;
;;;471    }
000012  bdf8              POP      {r3-r7,pc}
                  |L1.20|
000014  2401              MOVS     r4,#1                 ;459
000016  e011              B        |L1.60|
                  |L1.24|
000018  4630              MOV      r0,r6                 ;461
00001a  4360              MULS     r0,r4,r0              ;461
00001c  4601              MOV      r1,r0                 ;461
00001e  4638              MOV      r0,r7                 ;461
000020  f7fffffe          BL       __aeabi_uidivmod
000024  4605              MOV      r5,r0                 ;461
000026  2d01              CMP      r5,#1                 ;464
000028  d907              BLS      |L1.58|
00002a  2001              MOVS     r0,#1                 ;464
00002c  0600              LSLS     r0,r0,#24             ;464
00002e  4285              CMP      r5,r0                 ;464
000030  d203              BCS      |L1.58|
000032  1e60              SUBS     r0,r4,#1              ;465
000034  0600              LSLS     r0,r0,#24             ;465
000036  4328              ORRS     r0,r0,r5              ;465
000038  e7eb              B        |L1.18|
                  |L1.58|
00003a  1c64              ADDS     r4,r4,#1              ;459
                  |L1.60|
00003c  2cff              CMP      r4,#0xff              ;459
00003e  d9eb              BLS      |L1.24|
000040  2000              MOVS     r0,#0                 ;470
000042  43c0              MVNS     r0,r0                 ;470
000044  e7e5              B        |L1.18|
;;;472    
                          ENDP


                          AREA ||i.DrvTIMER_ClearTimerEvent||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearTimerEvent PROC
;;;309    /*---------------------------------------------------------------------------------------------------------*/
;;;310    void DrvTIMER_ClearTimerEvent(TIMER_CHANNEL channel, uint32_t uTimeEventNo)
000000  b510              PUSH     {r4,lr}
;;;311    {
;;;312        switch (channel)
000002  2800              CMP      r0,#0
000004  d002              BEQ      |L2.12|
000006  2801              CMP      r0,#1
000008  d122              BNE      |L2.80|
00000a  e010              B        |L2.46|
                  |L2.12|
;;;313        {
;;;314            case TMR0:
;;;315            {
;;;316                tTime0Event[uTimeEventNo].active = FALSE;
00000c  2300              MOVS     r3,#0
00000e  2214              MOVS     r2,#0x14
000010  434a              MULS     r2,r1,r2
000012  4c11              LDR      r4,|L2.88|
000014  50a3              STR      r3,[r4,r2]
;;;317                uTime0EventCount--;
000016  4a11              LDR      r2,|L2.92|
000018  6812              LDR      r2,[r2,#0]  ; uTime0EventCount
00001a  1e52              SUBS     r2,r2,#1
00001c  4b0f              LDR      r3,|L2.92|
00001e  601a              STR      r2,[r3,#0]  ; uTime0EventCount
;;;318                if (uTime0EventCount == 0)
000020  461a              MOV      r2,r3
000022  6812              LDR      r2,[r2,#0]  ; uTime0EventCount
000024  2a00              CMP      r2,#0
000026  d101              BNE      |L2.44|
;;;319                {
;;;320                    bIsSetTime0Event = FALSE;
000028  4b0d              LDR      r3,|L2.96|
00002a  601a              STR      r2,[r3,#0]  ; bIsSetTime0Event
                  |L2.44|
;;;321                }
;;;322    			break;
00002c  e011              B        |L2.82|
                  |L2.46|
;;;323            }
;;;324            case TMR1:
;;;325            {
;;;326                tTime1Event[uTimeEventNo].active = FALSE;
00002e  2300              MOVS     r3,#0
000030  2214              MOVS     r2,#0x14
000032  434a              MULS     r2,r1,r2
000034  4c0b              LDR      r4,|L2.100|
000036  50a3              STR      r3,[r4,r2]
;;;327                uTime1EventCount--;
000038  4a0b              LDR      r2,|L2.104|
00003a  6812              LDR      r2,[r2,#0]  ; uTime1EventCount
00003c  1e52              SUBS     r2,r2,#1
00003e  4b0a              LDR      r3,|L2.104|
000040  601a              STR      r2,[r3,#0]  ; uTime1EventCount
;;;328                if (uTime1EventCount == 0)
000042  461a              MOV      r2,r3
000044  6812              LDR      r2,[r2,#0]  ; uTime1EventCount
000046  2a00              CMP      r2,#0
000048  d101              BNE      |L2.78|
;;;329                {
;;;330                    bIsSetTime1Event = FALSE;
00004a  4b08              LDR      r3,|L2.108|
00004c  601a              STR      r2,[r3,#0]  ; bIsSetTime1Event
                  |L2.78|
;;;331                }
;;;332                break;
00004e  e000              B        |L2.82|
                  |L2.80|
;;;333            }
;;;334    
;;;335            default:
;;;336            {
;;;337                break;
000050  bf00              NOP      
                  |L2.82|
000052  bf00              NOP                            ;322
;;;338            }
;;;339    		
;;;340        }
;;;341    }
000054  bd10              POP      {r4,pc}
;;;342    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      tTime0Event
                  |L2.92|
                          DCD      uTime0EventCount
                  |L2.96|
                          DCD      bIsSetTime0Event
                  |L2.100|
                          DCD      tTime1Event
                  |L2.104|
                          DCD      uTime1EventCount
                  |L2.108|
                          DCD      bIsSetTime1Event

                          AREA ||i.DrvTIMER_Close||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Close PROC
;;;799    /*---------------------------------------------------------------------------------------------------------*/
;;;800    int32_t DrvTIMER_Close(TIMER_CHANNEL channel)
000000  b510              PUSH     {r4,lr}
;;;801    {
000002  4604              MOV      r4,r0
;;;802    
;;;803        if (channel > TMR1)
000004  2c01              CMP      r4,#1
000006  dd01              BLE      |L3.12|
;;;804    	{
;;;805            return E_DRVTIMER_CMD;
000008  4815              LDR      r0,|L3.96|
                  |L3.10|
;;;806        }
;;;807    
;;;808        switch (channel)
;;;809        {
;;;810            case TMR0:
;;;811            {
;;;812                bIsTimer0Used       = FALSE;
;;;813                bIsSetTime0Event    = FALSE;
;;;814                DrvTIMER_Ioctl(TMR0, TIMER_IOC_DISABLE_INT, 0);
;;;815                DrvTIMER_Ioctl(TMR0, TIMER_IOC_RESET_TIMER, 0);
;;;816                break;
;;;817    
;;;818            }
;;;819            case TMR1:
;;;820            {
;;;821                bIsTimer1Used       = FALSE;
;;;822                bIsSetTime1Event    = FALSE;
;;;823                DrvTIMER_Ioctl(TMR1,TIMER_IOC_DISABLE_INT,  0);
;;;824                DrvTIMER_Ioctl(TMR1, TIMER_IOC_RESET_TIMER, 0);
;;;825                break;
;;;826    
;;;827            }
;;;828    
;;;829            default:
;;;830            {
;;;831                return E_DRVTIMER_CMD ;
;;;832            }
;;;833        }
;;;834    
;;;835        return E_SUCCESS;
;;;836    }
00000a  bd10              POP      {r4,pc}
                  |L3.12|
00000c  2c00              CMP      r4,#0                 ;808
00000e  d002              BEQ      |L3.22|
000010  2c01              CMP      r4,#1                 ;808
000012  d120              BNE      |L3.86|
000014  e00f              B        |L3.54|
                  |L3.22|
000016  2000              MOVS     r0,#0                 ;812
000018  4912              LDR      r1,|L3.100|
00001a  6008              STR      r0,[r1,#0]            ;812  ; bIsTimer0Used
00001c  4912              LDR      r1,|L3.104|
00001e  6008              STR      r0,[r1,#0]            ;813  ; bIsSetTime0Event
000020  2200              MOVS     r2,#0                 ;814
000022  2103              MOVS     r1,#3                 ;814
000024  4610              MOV      r0,r2                 ;814
000026  f7fffffe          BL       DrvTIMER_Ioctl
00002a  2200              MOVS     r2,#0                 ;815
00002c  2104              MOVS     r1,#4                 ;815
00002e  4610              MOV      r0,r2                 ;815
000030  f7fffffe          BL       DrvTIMER_Ioctl
000034  e011              B        |L3.90|
                  |L3.54|
000036  2000              MOVS     r0,#0                 ;821
000038  490c              LDR      r1,|L3.108|
00003a  6008              STR      r0,[r1,#0]            ;821  ; bIsTimer1Used
00003c  490c              LDR      r1,|L3.112|
00003e  6008              STR      r0,[r1,#0]            ;822  ; bIsSetTime1Event
000040  2200              MOVS     r2,#0                 ;823
000042  2103              MOVS     r1,#3                 ;823
000044  2001              MOVS     r0,#1                 ;823
000046  f7fffffe          BL       DrvTIMER_Ioctl
00004a  2200              MOVS     r2,#0                 ;824
00004c  2104              MOVS     r1,#4                 ;824
00004e  2001              MOVS     r0,#1                 ;824
000050  f7fffffe          BL       DrvTIMER_Ioctl
000054  e001              B        |L3.90|
                  |L3.86|
000056  4802              LDR      r0,|L3.96|
000058  e7d7              B        |L3.10|
                  |L3.90|
00005a  bf00              NOP                            ;816
00005c  2000              MOVS     r0,#0                 ;835
00005e  e7d4              B        |L3.10|
;;;837    
                          ENDP

                  |L3.96|
                          DCD      0xffff9701
                  |L3.100|
                          DCD      bIsTimer0Used
                  |L3.104|
                          DCD      bIsSetTime0Event
                  |L3.108|
                          DCD      bIsTimer1Used
                  |L3.112|
                          DCD      bIsSetTime1Event

                          AREA ||i.DrvTIMER_Delay||, CODE, READONLY, ALIGN=1

                  DrvTIMER_Delay PROC
;;;641    /*---------------------------------------------------------------------------------------------------------*/
;;;642    void DrvTIMER_Delay(uint32_t uTicks)
000000  b500              PUSH     {lr}
;;;643    {
000002  4602              MOV      r2,r0
;;;644        uint32_t volatile btime;
;;;645    
;;;646        btime = DrvTIMER_GetTicks(TMR0);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       DrvTIMER_GetTicks
00000a  4603              MOV      r3,r0
;;;647        
;;;648        while (1)
00000c  e006              B        |L4.28|
                  |L4.14|
;;;649        {
;;;650            if ((DrvTIMER_GetTicks(TMR0) - btime) > uTicks)
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       DrvTIMER_GetTicks
000014  1ac0              SUBS     r0,r0,r3
000016  4290              CMP      r0,r2
000018  d900              BLS      |L4.28|
;;;651            {
;;;652                break;
00001a  e000              B        |L4.30|
                  |L4.28|
00001c  e7f7              B        |L4.14|
                  |L4.30|
00001e  bf00              NOP      
;;;653            }
;;;654        }
;;;655    
;;;656    }
000020  bd00              POP      {pc}
;;;657    
                          ENDP


                          AREA ||i.DrvTIMER_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableInt PROC
;;;354    /*---------------------------------------------------------------------------------------------------------*/
;;;355    int32_t DrvTIMER_EnableInt(TIMER_CHANNEL channel)
000000  b510              PUSH     {r4,lr}
;;;356    {
000002  4604              MOV      r4,r0
;;;357        switch (channel)
000004  2c00              CMP      r4,#0
000006  d002              BEQ      |L5.14|
000008  2c01              CMP      r4,#1
00000a  d118              BNE      |L5.62|
00000c  e00b              B        |L5.38|
                  |L5.14|
;;;358        {
;;;359            case TMR0:
;;;360            {
;;;361                TIMER0->TCSR.IE =1 ;
00000e  480e              LDR      r0,|L5.72|
000010  6800              LDR      r0,[r0,#0]
000012  2101              MOVS     r1,#1
000014  0749              LSLS     r1,r1,#29
000016  4388              BICS     r0,r0,r1
000018  1840              ADDS     r0,r0,r1
00001a  490b              LDR      r1,|L5.72|
00001c  6008              STR      r0,[r1,#0]
;;;362    			NVIC_EnableIRQ(TMR0_IRQn); 
00001e  2008              MOVS     r0,#8
000020  f7fffffe          BL       NVIC_EnableIRQ
;;;363                break;
000024  e00d              B        |L5.66|
                  |L5.38|
;;;364            }
;;;365            case TMR1:
;;;366            {
;;;367                TIMER1->TCSR.IE =1 ;
000026  4808              LDR      r0,|L5.72|
000028  6a00              LDR      r0,[r0,#0x20]
00002a  2101              MOVS     r1,#1
00002c  0749              LSLS     r1,r1,#29
00002e  4388              BICS     r0,r0,r1
000030  1840              ADDS     r0,r0,r1
000032  4905              LDR      r1,|L5.72|
000034  6208              STR      r0,[r1,#0x20]
;;;368    			NVIC_EnableIRQ(TMR1_IRQn); 
000036  2009              MOVS     r0,#9
000038  f7fffffe          BL       NVIC_EnableIRQ
;;;369                break;
00003c  e001              B        |L5.66|
                  |L5.62|
;;;370            }
;;;371    
;;;372            default:
;;;373            {
;;;374    			return E_DRVTIMER_CHANNEL;
00003e  4803              LDR      r0,|L5.76|
                  |L5.64|
;;;375            }
;;;376        }
;;;377        
;;;378        return E_SUCCESS ;
;;;379    }
000040  bd10              POP      {r4,pc}
                  |L5.66|
000042  bf00              NOP                            ;363
000044  2000              MOVS     r0,#0                 ;378
000046  e7fb              B        |L5.64|
;;;380    
                          ENDP

                  |L5.72|
                          DCD      0x40010000
                  |L5.76|
                          DCD      0xffff9702

                          AREA ||i.DrvTIMER_GetStatus||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetStatus PROC
;;;135    /*---------------------------------------------------------------------------------------------------------*/
;;;136    int32_t DrvTIMER_GetStatus(TIMER_CHANNEL ch)
000000  4602              MOV      r2,r0
;;;137    {
;;;138    	int32_t IsStatus;
;;;139    
;;;140    	if(ch == TMR0 )
000002  2a00              CMP      r2,#0
000004  d104              BNE      |L6.16|
;;;141    		IsStatus =  TIMER0->TISR.TIF ;
000006  4808              LDR      r0,|L6.40|
000008  6880              LDR      r0,[r0,#8]
00000a  07c1              LSLS     r1,r0,#31
00000c  0fc9              LSRS     r1,r1,#31
00000e  e008              B        |L6.34|
                  |L6.16|
;;;142    	else if(ch == TMR1 )
000010  2a01              CMP      r2,#1
000012  d104              BNE      |L6.30|
;;;143        	IsStatus =  TIMER1->TISR.TIF ;
000014  4804              LDR      r0,|L6.40|
000016  6a80              LDR      r0,[r0,#0x28]
000018  07c1              LSLS     r1,r0,#31
00001a  0fc9              LSRS     r1,r1,#31
00001c  e001              B        |L6.34|
                  |L6.30|
;;;144    	else 
;;;145        	return E_DRVTIMER_CHANNEL;
00001e  4803              LDR      r0,|L6.44|
                  |L6.32|
;;;146    
;;;147    	return IsStatus;
;;;148    }
000020  4770              BX       lr
                  |L6.34|
000022  4608              MOV      r0,r1                 ;147
000024  e7fc              B        |L6.32|
;;;149    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      0x40010000
                  |L6.44|
                          DCD      0xffff9702

                          AREA ||i.DrvTIMER_GetTicks||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetTicks PROC
;;;604    /*---------------------------------------------------------------------------------------------------------*/
;;;605    uint32_t DrvTIMER_GetTicks(TIMER_CHANNEL channel)
000000  4601              MOV      r1,r0
;;;606    {
;;;607    
;;;608        switch (channel)
000002  2900              CMP      r1,#0
000004  d002              BEQ      |L7.12|
000006  2901              CMP      r1,#1
000008  d106              BNE      |L7.24|
00000a  e002              B        |L7.18|
                  |L7.12|
;;;609        {
;;;610            case TMR0:
;;;611            {
;;;612                return uTimer0Count;
00000c  4804              LDR      r0,|L7.32|
00000e  6800              LDR      r0,[r0,#0]  ; uTimer0Count
                  |L7.16|
;;;613      
;;;614            }
;;;615            case TMR1:
;;;616            {
;;;617                return uTimer1Count;
;;;618    
;;;619            }	
;;;620            default:
;;;621            {
;;;622                break;
;;;623            }
;;;624        }
;;;625        return 0;
;;;626    }
000010  4770              BX       lr
                  |L7.18|
000012  4804              LDR      r0,|L7.36|
000014  6800              LDR      r0,[r0,#0]            ;617  ; uTimer1Count
000016  e7fb              B        |L7.16|
                  |L7.24|
000018  bf00              NOP                            ;622
00001a  bf00              NOP                            ;622
00001c  2000              MOVS     r0,#0                 ;625
00001e  e7f7              B        |L7.16|
;;;627    
                          ENDP

                  |L7.32|
                          DCD      uTimer0Count
                  |L7.36|
                          DCD      uTimer1Count

                          AREA ||i.DrvTIMER_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetVersion PROC
;;;1048   /*---------------------------------------------------------------------------------------------------------*/
;;;1049   int32_t DrvTIMER_GetVersion(void)
000000  4800              LDR      r0,|L8.4|
;;;1050   {
;;;1051   	return DRVTIMER_VERSION_NUM;
;;;1052   }
000002  4770              BX       lr
;;;1053   
                          ENDP

                  |L8.4|
                          DCD      0x00010001

                          AREA ||i.DrvTIMER_Init||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Init PROC
;;;426    /*---------------------------------------------------------------------------------------------------------*/
;;;427    void DrvTIMER_Init(void)
000000  2001              MOVS     r0,#1
;;;428    {
;;;429    
;;;430        bIsTimer0Initial    = TRUE;
000002  4902              LDR      r1,|L9.12|
000004  6008              STR      r0,[r1,#0]  ; bIsTimer0Initial
;;;431        bIsTimer1Initial    = TRUE;
000006  4902              LDR      r1,|L9.16|
000008  6008              STR      r0,[r1,#0]  ; bIsTimer1Initial
;;;432    
;;;433    }
00000a  4770              BX       lr
;;;434    
                          ENDP

                  |L9.12|
                          DCD      bIsTimer0Initial
                  |L9.16|
                          DCD      bIsTimer1Initial

                          AREA ||i.DrvTIMER_Ioctl||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Ioctl PROC
;;;692    /*---------------------------------------------------------------------------------------------------------*/
;;;693    int32_t DrvTIMER_Ioctl(TIMER_CHANNEL channel, TIMER_CMD uCmd,uint32_t uArg1)
000000  b510              PUSH     {r4,lr}
;;;694    {
000002  4604              MOV      r4,r0
;;;695    
;;;696        switch (uCmd)
000004  000b              MOVS     r3,r1
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0705              DCB      0x07,0x05
00000c  1d334b61          DCB      0x1d,0x33,0x4b,0x61
000010  79929f00          DCB      0x79,0x92,0x9f,0x00
;;;697        {
;;;698            case TIMER_IOC_START_COUNT :		  	/* Start Timer Count */
;;;699            {
;;;700                if(channel == TMR0)
000014  2c00              CMP      r4,#0
000016  d108              BNE      |L10.42|
;;;701    				TIMER0->TCSR.CEN =1 ;
000018  484e              LDR      r0,|L10.340|
00001a  6800              LDR      r0,[r0,#0]
00001c  2301              MOVS     r3,#1
00001e  079b              LSLS     r3,r3,#30
000020  4398              BICS     r0,r0,r3
000022  18c0              ADDS     r0,r0,r3
000024  4b4b              LDR      r3,|L10.340|
000026  6018              STR      r0,[r3,#0]
000028  e00b              B        |L10.66|
                  |L10.42|
;;;702    			else if(channel == TMR1)
00002a  2c01              CMP      r4,#1
00002c  d107              BNE      |L10.62|
;;;703    				TIMER1->TCSR.CEN =1 ;
00002e  4849              LDR      r0,|L10.340|
000030  6a00              LDR      r0,[r0,#0x20]
000032  07a3              LSLS     r3,r4,#30
000034  4398              BICS     r0,r0,r3
000036  18c0              ADDS     r0,r0,r3
000038  4b46              LDR      r3,|L10.340|
00003a  6218              STR      r0,[r3,#0x20]
00003c  e001              B        |L10.66|
                  |L10.62|
;;;704    			else
;;;705    				return E_DRVTIMER_CHANNEL;						
00003e  4846              LDR      r0,|L10.344|
                  |L10.64|
;;;706    
;;;707    			break;
;;;708            }
;;;709            case TIMER_IOC_STOP_COUNT :				/* Stop Timer Count */
;;;710            {
;;;711                if(channel == TMR0)
;;;712    				TIMER0->TCSR.CEN =0 ;
;;;713    			else if(channel == TMR1)
;;;714    				TIMER1->TCSR.CEN =0 ;
;;;715    			else
;;;716    				return E_DRVTIMER_CHANNEL;						
;;;717    
;;;718                break;
;;;719            }
;;;720            case TIMER_IOC_ENABLE_INT :			   	/* Enable Specified Channel Interrupt */
;;;721            {
;;;722    			if(channel == TMR0)
;;;723    				TIMER0->TCSR.IE =1 ;
;;;724    			else if(channel == TMR1)
;;;725    				TIMER1->TCSR.IE =1 ;
;;;726    			else
;;;727    				return E_DRVTIMER_CHANNEL;
;;;728                break;
;;;729            }
;;;730    
;;;731            case TIMER_IOC_DISABLE_INT :			/* Disable Specified Channel Interrupt */
;;;732            {
;;;733    			if(channel == TMR0)
;;;734    				TIMER0->TCSR.IE =0 ;
;;;735    			else if(channel == TMR1)
;;;736    				TIMER1->TCSR.IE =0 ;
;;;737    			else
;;;738    				return E_DRVTIMER_CHANNEL;
;;;739    
;;;740                break;
;;;741            }
;;;742    
;;;743            case TIMER_IOC_RESET_TIMER :			/* Reset specified channel */
;;;744            {
;;;745    			if(channel == TMR0)
;;;746    				TIMER0->TCSR.CRST =1 ;
;;;747    			else if(channel == TMR1)
;;;748    				TIMER1->TCSR.CRST =1 ;
;;;749    			else
;;;750    				return E_DRVTIMER_CHANNEL;
;;;751                break;
;;;752            }
;;;753    
;;;754            case TIMER_IOC_SET_PRESCALE  :			/* Set Specified channel prescale parameter */
;;;755            {
;;;756         		if(channel == TMR0)
;;;757    				TIMER0->TCSR.PRESCALE = uArg1 ;
;;;758    			else if(channel == TMR1)
;;;759    				TIMER1->TCSR.PRESCALE = uArg1 ;
;;;760    			else
;;;761    				return E_DRVTIMER_CHANNEL;
;;;762                break;
;;;763            }
;;;764    
;;;765            case TIMER_IOC_SET_INITIAL_COUNT :	  	/* Set Inital Count value */
;;;766            {
;;;767                if(channel == TMR0)
;;;768    				TIMER0->TCMPR = uArg1 ;
;;;769    			else if(channel == TMR1)
;;;770    				TIMER1->TCMPR = uArg1 ;
;;;771    			else
;;;772    				return E_DRVTIMER_CHANNEL;
;;;773    
;;;774                break;
;;;775            }
;;;776    
;;;777            default:
;;;778            {
;;;779                return E_DRVTIMER_CMD;
;;;780      
;;;781            }
;;;782        }
;;;783    
;;;784        return E_SUCCESS;
;;;785    }
000040  bd10              POP      {r4,pc}
                  |L10.66|
000042  e084              B        |L10.334|
000044  2c00              CMP      r4,#0                 ;711
000046  d107              BNE      |L10.88|
000048  4842              LDR      r0,|L10.340|
00004a  6800              LDR      r0,[r0,#0]            ;712
00004c  2301              MOVS     r3,#1                 ;712
00004e  079b              LSLS     r3,r3,#30             ;712
000050  4398              BICS     r0,r0,r3              ;712
000052  4b40              LDR      r3,|L10.340|
000054  6018              STR      r0,[r3,#0]            ;712
000056  e00a              B        |L10.110|
                  |L10.88|
000058  2c01              CMP      r4,#1                 ;713
00005a  d106              BNE      |L10.106|
00005c  483d              LDR      r0,|L10.340|
00005e  6a00              LDR      r0,[r0,#0x20]         ;714
000060  07a3              LSLS     r3,r4,#30             ;714
000062  4398              BICS     r0,r0,r3              ;714
000064  4b3b              LDR      r3,|L10.340|
000066  6218              STR      r0,[r3,#0x20]         ;714
000068  e001              B        |L10.110|
                  |L10.106|
00006a  483b              LDR      r0,|L10.344|
00006c  e7e8              B        |L10.64|
                  |L10.110|
00006e  e06e              B        |L10.334|
000070  2c00              CMP      r4,#0                 ;722
000072  d108              BNE      |L10.134|
000074  4837              LDR      r0,|L10.340|
000076  6800              LDR      r0,[r0,#0]            ;723
000078  2301              MOVS     r3,#1                 ;723
00007a  075b              LSLS     r3,r3,#29             ;723
00007c  4398              BICS     r0,r0,r3              ;723
00007e  18c0              ADDS     r0,r0,r3              ;723
000080  4b34              LDR      r3,|L10.340|
000082  6018              STR      r0,[r3,#0]            ;723
000084  e00b              B        |L10.158|
                  |L10.134|
000086  2c01              CMP      r4,#1                 ;724
000088  d107              BNE      |L10.154|
00008a  4832              LDR      r0,|L10.340|
00008c  6a00              LDR      r0,[r0,#0x20]         ;725
00008e  0763              LSLS     r3,r4,#29             ;725
000090  4398              BICS     r0,r0,r3              ;725
000092  18c0              ADDS     r0,r0,r3              ;725
000094  4b2f              LDR      r3,|L10.340|
000096  6218              STR      r0,[r3,#0x20]         ;725
000098  e001              B        |L10.158|
                  |L10.154|
00009a  482f              LDR      r0,|L10.344|
00009c  e7d0              B        |L10.64|
                  |L10.158|
00009e  e056              B        |L10.334|
0000a0  2c00              CMP      r4,#0                 ;733
0000a2  d107              BNE      |L10.180|
0000a4  482b              LDR      r0,|L10.340|
0000a6  6800              LDR      r0,[r0,#0]            ;734
0000a8  2301              MOVS     r3,#1                 ;734
0000aa  075b              LSLS     r3,r3,#29             ;734
0000ac  4398              BICS     r0,r0,r3              ;734
0000ae  4b29              LDR      r3,|L10.340|
0000b0  6018              STR      r0,[r3,#0]            ;734
0000b2  e00a              B        |L10.202|
                  |L10.180|
0000b4  2c01              CMP      r4,#1                 ;735
0000b6  d106              BNE      |L10.198|
0000b8  4826              LDR      r0,|L10.340|
0000ba  6a00              LDR      r0,[r0,#0x20]         ;736
0000bc  0763              LSLS     r3,r4,#29             ;736
0000be  4398              BICS     r0,r0,r3              ;736
0000c0  4b24              LDR      r3,|L10.340|
0000c2  6218              STR      r0,[r3,#0x20]         ;736
0000c4  e001              B        |L10.202|
                  |L10.198|
0000c6  4824              LDR      r0,|L10.344|
0000c8  e7ba              B        |L10.64|
                  |L10.202|
0000ca  e040              B        |L10.334|
0000cc  2c00              CMP      r4,#0                 ;745
0000ce  d108              BNE      |L10.226|
0000d0  4820              LDR      r0,|L10.340|
0000d2  6800              LDR      r0,[r0,#0]            ;746
0000d4  2301              MOVS     r3,#1                 ;746
0000d6  069b              LSLS     r3,r3,#26             ;746
0000d8  4398              BICS     r0,r0,r3              ;746
0000da  18c0              ADDS     r0,r0,r3              ;746
0000dc  4b1d              LDR      r3,|L10.340|
0000de  6018              STR      r0,[r3,#0]            ;746
0000e0  e00b              B        |L10.250|
                  |L10.226|
0000e2  2c01              CMP      r4,#1                 ;747
0000e4  d107              BNE      |L10.246|
0000e6  481b              LDR      r0,|L10.340|
0000e8  6a00              LDR      r0,[r0,#0x20]         ;748
0000ea  06a3              LSLS     r3,r4,#26             ;748
0000ec  4398              BICS     r0,r0,r3              ;748
0000ee  18c0              ADDS     r0,r0,r3              ;748
0000f0  4b18              LDR      r3,|L10.340|
0000f2  6218              STR      r0,[r3,#0x20]         ;748
0000f4  e001              B        |L10.250|
                  |L10.246|
0000f6  4818              LDR      r0,|L10.344|
0000f8  e7a2              B        |L10.64|
                  |L10.250|
0000fa  e028              B        |L10.334|
0000fc  2c00              CMP      r4,#0                 ;756
0000fe  d108              BNE      |L10.274|
000100  4814              LDR      r0,|L10.340|
000102  6800              LDR      r0,[r0,#0]            ;757
000104  0a00              LSRS     r0,r0,#8              ;757
000106  0200              LSLS     r0,r0,#8              ;757
000108  b2d3              UXTB     r3,r2                 ;757
00010a  4318              ORRS     r0,r0,r3              ;757
00010c  4b11              LDR      r3,|L10.340|
00010e  6018              STR      r0,[r3,#0]            ;757
000110  e00c              B        |L10.300|
                  |L10.274|
000112  2c01              CMP      r4,#1                 ;758
000114  d108              BNE      |L10.296|
000116  480f              LDR      r0,|L10.340|
000118  6a00              LDR      r0,[r0,#0x20]         ;759
00011a  0a00              LSRS     r0,r0,#8              ;759
00011c  0200              LSLS     r0,r0,#8              ;759
00011e  b2d3              UXTB     r3,r2                 ;759
000120  4318              ORRS     r0,r0,r3              ;759
000122  4b0c              LDR      r3,|L10.340|
000124  6218              STR      r0,[r3,#0x20]         ;759
000126  e001              B        |L10.300|
                  |L10.296|
000128  480b              LDR      r0,|L10.344|
00012a  e789              B        |L10.64|
                  |L10.300|
00012c  e00f              B        |L10.334|
00012e  2c00              CMP      r4,#0                 ;767
000130  d102              BNE      |L10.312|
000132  4808              LDR      r0,|L10.340|
000134  6042              STR      r2,[r0,#4]            ;768
000136  e006              B        |L10.326|
                  |L10.312|
000138  2c01              CMP      r4,#1                 ;769
00013a  d102              BNE      |L10.322|
00013c  4805              LDR      r0,|L10.340|
00013e  6242              STR      r2,[r0,#0x24]         ;770
000140  e001              B        |L10.326|
                  |L10.322|
000142  4805              LDR      r0,|L10.344|
000144  e77c              B        |L10.64|
                  |L10.326|
000146  e002              B        |L10.334|
000148  4803              LDR      r0,|L10.344|
00014a  1e40              SUBS     r0,r0,#1              ;779
00014c  e778              B        |L10.64|
                  |L10.334|
00014e  bf00              NOP                            ;707
000150  2000              MOVS     r0,#0                 ;784
000152  e775              B        |L10.64|
;;;786    
                          ENDP

                  |L10.340|
                          DCD      0x40010000
                  |L10.344|
                          DCD      0xffff9702

                          AREA ||i.DrvTIMER_Open||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Open PROC
;;;485    /*---------------------------------------------------------------------------------------------------------*/
;;;486    int32_t DrvTIMER_Open(TIMER_CHANNEL channel, uint32_t uTicksPerSecond, TIMER_OPMODE mode )
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;487    {
000002  b082              SUB      sp,sp,#8
000004  460f              MOV      r7,r1
;;;488        uint32_t i;
;;;489        uint32_t uRegTcmpr, uRegTcr;
;;;490    
;;;491        if ( (bIsTimer0Initial == FALSE)|(bIsTimer1Initial == FALSE))
000006  485f              LDR      r0,|L11.388|
000008  6800              LDR      r0,[r0,#0]  ; bIsTimer0Initial
00000a  2800              CMP      r0,#0
00000c  d101              BNE      |L11.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L11.20|
                  |L11.18|
000012  2000              MOVS     r0,#0
                  |L11.20|
000014  495c              LDR      r1,|L11.392|
000016  6809              LDR      r1,[r1,#0]  ; bIsTimer1Initial
000018  2900              CMP      r1,#0
00001a  d101              BNE      |L11.32|
00001c  2101              MOVS     r1,#1
00001e  e000              B        |L11.34|
                  |L11.32|
000020  2100              MOVS     r1,#0
                  |L11.34|
000022  4308              ORRS     r0,r0,r1
000024  d002              BEQ      |L11.44|
;;;492        {
;;;493            return E_DRVTIMER_EIO;
000026  4859              LDR      r0,|L11.396|
                  |L11.40|
;;;494    
;;;495        }
;;;496    
;;;497        uRegTcr = (uint32_t)( 0x60010000 | ( mode << 27) );        /* Start Timer and set operation mode       */
;;;498        
;;;499    	
;;;500    
;;;501        switch (channel)
;;;502        {
;;;503            case TMR0:
;;;504            {
;;;505                if ( (bIsTimer0Initial != TRUE)|(bIsTimer0Used   != FALSE))
;;;506                    return E_DRVTIMER_EIO;
;;;507                
;;;508                bIsTimer0Used   = TRUE;
;;;509               
;;;510    		   	SYSCLK->APBCLK.TMR0_EN =1;
;;;511    			
;;;512    			outpw((uint32_t)&TIMER0->TCSR ,0 );                         /* disable timer                              */
;;;513               
;;;514    		    TIMER0->TISR.TIF = 1;                             /* write 1 to clear for safty                 */
;;;515    
;;;516                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;517                {
;;;518                    tTime0Event[i].active = FALSE;
;;;519                }
;;;520                uTimer0Count = 0;
;;;521    			
;;;522    			_sys_uTimer0TickPerSecond = uTicksPerSecond;
;;;523                		
;;;524                uRegTcmpr = CalTimerInitValue(GetTimerCLk(TMR0), uTicksPerSecond); 
;;;525    
;;;526    			if(uRegTcmpr == 0xFFFFFFFF)		
;;;527    			{
;;;528    				return E_DRVTIMER_CMD;			
;;;529    			}
;;;530    
;;;531    			TIMER0->TCMPR = (uRegTcmpr << 8) >> 8;
;;;532                uRegTcr |= (uRegTcmpr >> 24);
;;;533    		
;;;534    			outpw((uint32_t)&TIMER0->TCSR,  (uint32_t)uRegTcr);   
;;;535    			
;;;536    			NVIC_EnableIRQ(TMR0_IRQn); 
;;;537    
;;;538                break;
;;;539            }
;;;540    
;;;541            case TMR1:
;;;542            {
;;;543                if ( (bIsTimer1Initial != TRUE)|(bIsTimer1Used   != FALSE))
;;;544                {
;;;545                    return E_DRVTIMER_EIO;
;;;546                }
;;;547    
;;;548                bIsTimer1Used   = TRUE;
;;;549    
;;;550                SYSCLK->APBCLK.TMR1_EN =1;
;;;551    			
;;;552    			outpw((uint32_t)&TIMER1->TCSR ,0 );                       	/* disable timer                               */
;;;553                
;;;554    			TIMER1->TISR.TIF =1;                            	/* write 1 to clear for safty                  */
;;;555    
;;;556                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;557                {
;;;558                    tTime1Event[i].active = FALSE;
;;;559                }
;;;560                uTimer1Count = 0;
;;;561                _sys_uTimer1TickPerSecond = uTicksPerSecond;
;;;562    
;;;563                uRegTcmpr = CalTimerInitValue(GetTimerCLk(TMR1), uTicksPerSecond); 
;;;564    
;;;565    			if(uRegTcmpr == 0xFFFFFFFF)		
;;;566    			{
;;;567    				return E_DRVTIMER_CMD;			
;;;568    			}
;;;569    
;;;570    			TIMER1->TCMPR = (uRegTcmpr << 8) >> 8;
;;;571                uRegTcr |= (uRegTcmpr >> 24);
;;;572    		
;;;573    			outpw((uint32_t)&TIMER1->TCSR,  (uint32_t)uRegTcr);   
;;;574    
;;;575    			NVIC_EnableIRQ(TMR1_IRQn); 
;;;576    
;;;577                break;
;;;578            }
;;;579    
;;;580    
;;;581            default:
;;;582            {
;;;583                return E_DRVTIMER_CMD ;
;;;584     
;;;585            }
;;;586        }
;;;587        return E_SUCCESS;
;;;588    
;;;589    }
000028  b005              ADD      sp,sp,#0x14
00002a  bdf0              POP      {r4-r7,pc}
                  |L11.44|
00002c  9804              LDR      r0,[sp,#0x10]         ;497
00002e  06c6              LSLS     r6,r0,#27             ;497
000030  4957              LDR      r1,|L11.400|
000032  430e              ORRS     r6,r6,r1              ;497
000034  9802              LDR      r0,[sp,#8]            ;501
000036  2800              CMP      r0,#0                 ;501
000038  d002              BEQ      |L11.64|
00003a  2801              CMP      r0,#1                 ;501
00003c  d174              BNE      |L11.296|
00003e  e04c              B        |L11.218|
                  |L11.64|
000040  4850              LDR      r0,|L11.388|
000042  6800              LDR      r0,[r0,#0]            ;505  ; bIsTimer0Initial
000044  2801              CMP      r0,#1                 ;505
000046  d001              BEQ      |L11.76|
000048  2001              MOVS     r0,#1                 ;505
00004a  e000              B        |L11.78|
                  |L11.76|
00004c  2000              MOVS     r0,#0                 ;505
                  |L11.78|
00004e  4951              LDR      r1,|L11.404|
000050  6809              LDR      r1,[r1,#0]            ;505  ; bIsTimer0Used
000052  2900              CMP      r1,#0                 ;505
000054  d001              BEQ      |L11.90|
000056  2101              MOVS     r1,#1                 ;505
000058  e000              B        |L11.92|
                  |L11.90|
00005a  2100              MOVS     r1,#0                 ;505
                  |L11.92|
00005c  4308              ORRS     r0,r0,r1              ;505
00005e  d001              BEQ      |L11.100|
000060  484a              LDR      r0,|L11.396|
000062  e7e1              B        |L11.40|
                  |L11.100|
000064  2001              MOVS     r0,#1                 ;508
000066  494b              LDR      r1,|L11.404|
000068  6008              STR      r0,[r1,#0]            ;508  ; bIsTimer0Used
00006a  484b              LDR      r0,|L11.408|
00006c  6880              LDR      r0,[r0,#8]            ;510
00006e  2140              MOVS     r1,#0x40              ;510
000070  4388              BICS     r0,r0,r1              ;510
000072  3040              ADDS     r0,r0,#0x40           ;510
000074  4948              LDR      r1,|L11.408|
000076  6088              STR      r0,[r1,#8]            ;510
000078  2000              MOVS     r0,#0                 ;512
00007a  4948              LDR      r1,|L11.412|
00007c  6008              STR      r0,[r1,#0]            ;512
00007e  4608              MOV      r0,r1                 ;514
000080  6880              LDR      r0,[r0,#8]            ;514
000082  0840              LSRS     r0,r0,#1              ;514
000084  0040              LSLS     r0,r0,#1              ;514
000086  1c40              ADDS     r0,r0,#1              ;514
000088  6088              STR      r0,[r1,#8]            ;514
00008a  2500              MOVS     r5,#0                 ;516
00008c  e005              B        |L11.154|
                  |L11.142|
00008e  2100              MOVS     r1,#0                 ;518
000090  2014              MOVS     r0,#0x14              ;518
000092  4368              MULS     r0,r5,r0              ;518
000094  4a42              LDR      r2,|L11.416|
000096  5011              STR      r1,[r2,r0]            ;518
000098  1c6d              ADDS     r5,r5,#1              ;516
                  |L11.154|
00009a  2d0a              CMP      r5,#0xa               ;516
00009c  d3f7              BCC      |L11.142|
00009e  2000              MOVS     r0,#0                 ;520
0000a0  4940              LDR      r1,|L11.420|
0000a2  6008              STR      r0,[r1,#0]            ;520  ; uTimer0Count
0000a4  4840              LDR      r0,|L11.424|
0000a6  6007              STR      r7,[r0,#0]            ;522  ; _sys_uTimer0TickPerSecond
0000a8  2000              MOVS     r0,#0                 ;524
0000aa  f7fffffe          BL       GetTimerCLk
0000ae  4639              MOV      r1,r7                 ;524
0000b0  9001              STR      r0,[sp,#4]            ;524
0000b2  f7fffffe          BL       CalTimerInitValue
0000b6  4604              MOV      r4,r0                 ;524
0000b8  1c60              ADDS     r0,r4,#1              ;526
0000ba  d102              BNE      |L11.194|
0000bc  4833              LDR      r0,|L11.396|
0000be  1ec0              SUBS     r0,r0,#3              ;528
0000c0  e7b2              B        |L11.40|
                  |L11.194|
0000c2  0220              LSLS     r0,r4,#8              ;531
0000c4  0a00              LSRS     r0,r0,#8              ;531
0000c6  4935              LDR      r1,|L11.412|
0000c8  6048              STR      r0,[r1,#4]            ;531
0000ca  0e20              LSRS     r0,r4,#24             ;532
0000cc  4306              ORRS     r6,r6,r0              ;532
0000ce  4608              MOV      r0,r1                 ;534
0000d0  6006              STR      r6,[r0,#0]            ;534
0000d2  2008              MOVS     r0,#8                 ;536
0000d4  f7fffffe          BL       NVIC_EnableIRQ
0000d8  e050              B        |L11.380|
                  |L11.218|
0000da  482b              LDR      r0,|L11.392|
0000dc  6800              LDR      r0,[r0,#0]            ;543  ; bIsTimer1Initial
0000de  2801              CMP      r0,#1                 ;543
0000e0  d001              BEQ      |L11.230|
0000e2  2001              MOVS     r0,#1                 ;543
0000e4  e000              B        |L11.232|
                  |L11.230|
0000e6  2000              MOVS     r0,#0                 ;543
                  |L11.232|
0000e8  4930              LDR      r1,|L11.428|
0000ea  6809              LDR      r1,[r1,#0]            ;543  ; bIsTimer1Used
0000ec  2900              CMP      r1,#0                 ;543
0000ee  d001              BEQ      |L11.244|
0000f0  2101              MOVS     r1,#1                 ;543
0000f2  e000              B        |L11.246|
                  |L11.244|
0000f4  2100              MOVS     r1,#0                 ;543
                  |L11.246|
0000f6  4308              ORRS     r0,r0,r1              ;543
0000f8  d001              BEQ      |L11.254|
0000fa  4824              LDR      r0,|L11.396|
0000fc  e794              B        |L11.40|
                  |L11.254|
0000fe  2001              MOVS     r0,#1                 ;548
000100  492a              LDR      r1,|L11.428|
000102  6008              STR      r0,[r1,#0]            ;548  ; bIsTimer1Used
000104  4824              LDR      r0,|L11.408|
000106  6880              LDR      r0,[r0,#8]            ;550
000108  2180              MOVS     r1,#0x80              ;550
00010a  4388              BICS     r0,r0,r1              ;550
00010c  3080              ADDS     r0,r0,#0x80           ;550
00010e  4922              LDR      r1,|L11.408|
000110  6088              STR      r0,[r1,#8]            ;550
000112  2000              MOVS     r0,#0                 ;552
000114  4921              LDR      r1,|L11.412|
000116  6208              STR      r0,[r1,#0x20]         ;552
000118  4608              MOV      r0,r1                 ;554
00011a  6a80              LDR      r0,[r0,#0x28]         ;554
00011c  0840              LSRS     r0,r0,#1              ;554
00011e  0040              LSLS     r0,r0,#1              ;554
000120  1c40              ADDS     r0,r0,#1              ;554
000122  6288              STR      r0,[r1,#0x28]         ;554
000124  2500              MOVS     r5,#0                 ;556
000126  e006              B        |L11.310|
                  |L11.296|
000128  e025              B        |L11.374|
                  |L11.298|
00012a  2100              MOVS     r1,#0                 ;558
00012c  2014              MOVS     r0,#0x14              ;558
00012e  4368              MULS     r0,r5,r0              ;558
000130  4a1f              LDR      r2,|L11.432|
000132  5011              STR      r1,[r2,r0]            ;558
000134  1c6d              ADDS     r5,r5,#1              ;556
                  |L11.310|
000136  2d0a              CMP      r5,#0xa               ;556
000138  d3f7              BCC      |L11.298|
00013a  2000              MOVS     r0,#0                 ;560
00013c  491d              LDR      r1,|L11.436|
00013e  6008              STR      r0,[r1,#0]            ;560  ; uTimer1Count
000140  481d              LDR      r0,|L11.440|
000142  6007              STR      r7,[r0,#0]            ;561  ; _sys_uTimer1TickPerSecond
000144  2001              MOVS     r0,#1                 ;563
000146  f7fffffe          BL       GetTimerCLk
00014a  4639              MOV      r1,r7                 ;563
00014c  9001              STR      r0,[sp,#4]            ;563
00014e  f7fffffe          BL       CalTimerInitValue
000152  4604              MOV      r4,r0                 ;563
000154  1c60              ADDS     r0,r4,#1              ;565
000156  d102              BNE      |L11.350|
000158  480c              LDR      r0,|L11.396|
00015a  1ec0              SUBS     r0,r0,#3              ;567
00015c  e764              B        |L11.40|
                  |L11.350|
00015e  0220              LSLS     r0,r4,#8              ;570
000160  0a00              LSRS     r0,r0,#8              ;570
000162  490e              LDR      r1,|L11.412|
000164  6248              STR      r0,[r1,#0x24]         ;570
000166  0e20              LSRS     r0,r4,#24             ;571
000168  4306              ORRS     r6,r6,r0              ;571
00016a  4608              MOV      r0,r1                 ;573
00016c  6206              STR      r6,[r0,#0x20]         ;573
00016e  2009              MOVS     r0,#9                 ;575
000170  f7fffffe          BL       NVIC_EnableIRQ
000174  e002              B        |L11.380|
                  |L11.374|
000176  4805              LDR      r0,|L11.396|
000178  1ec0              SUBS     r0,r0,#3              ;583
00017a  e755              B        |L11.40|
                  |L11.380|
00017c  bf00              NOP                            ;538
00017e  2000              MOVS     r0,#0                 ;587
000180  e752              B        |L11.40|
;;;590    
                          ENDP

000182  0000              DCW      0x0000
                  |L11.388|
                          DCD      bIsTimer0Initial
                  |L11.392|
                          DCD      bIsTimer1Initial
                  |L11.396|
                          DCD      0xffff9704
                  |L11.400|
                          DCD      0x60010000
                  |L11.404|
                          DCD      bIsTimer0Used
                  |L11.408|
                          DCD      0x50000200
                  |L11.412|
                          DCD      0x40010000
                  |L11.416|
                          DCD      tTime0Event
                  |L11.420|
                          DCD      uTimer0Count
                  |L11.424|
                          DCD      _sys_uTimer0TickPerSecond
                  |L11.428|
                          DCD      bIsTimer1Used
                  |L11.432|
                          DCD      tTime1Event
                  |L11.436|
                          DCD      uTimer1Count
                  |L11.440|
                          DCD      _sys_uTimer1TickPerSecond

                          AREA ||i.DrvTIMER_ResetTicks||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ResetTicks PROC
;;;392    /*---------------------------------------------------------------------------------------------------------*/
;;;393    int32_t DrvTIMER_ResetTicks(TIMER_CHANNEL channel)
000000  4601              MOV      r1,r0
;;;394    {
;;;395        switch (channel)
000002  2900              CMP      r1,#0
000004  d002              BEQ      |L12.12|
000006  2901              CMP      r1,#1
000008  d108              BNE      |L12.28|
00000a  e003              B        |L12.20|
                  |L12.12|
;;;396        {
;;;397            case TMR0:
;;;398            {
;;;399                uTimer0Count = 0;
00000c  2000              MOVS     r0,#0
00000e  4a06              LDR      r2,|L12.40|
000010  6010              STR      r0,[r2,#0]  ; uTimer0Count
;;;400                break;
000012  e005              B        |L12.32|
                  |L12.20|
;;;401            }
;;;402            case TMR1:
;;;403            {
;;;404                uTimer1Count = 0;
000014  2000              MOVS     r0,#0
000016  4a05              LDR      r2,|L12.44|
000018  6010              STR      r0,[r2,#0]  ; uTimer1Count
;;;405                break;
00001a  e001              B        |L12.32|
                  |L12.28|
;;;406            }
;;;407    
;;;408            default:
;;;409            {
;;;410                return E_DRVTIMER_CHANNEL;
00001c  4804              LDR      r0,|L12.48|
                  |L12.30|
;;;411            }
;;;412        }
;;;413        return E_SUCCESS;
;;;414    }
00001e  4770              BX       lr
                  |L12.32|
000020  bf00              NOP                            ;400
000022  2000              MOVS     r0,#0                 ;413
000024  e7fb              B        |L12.30|
;;;415    
                          ENDP

000026  0000              DCW      0x0000
                  |L12.40|
                          DCD      uTimer0Count
                  |L12.44|
                          DCD      uTimer1Count
                  |L12.48|
                          DCD      0xffff9702

                          AREA ||i.DrvTIMER_SetEXTClockFreq||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SetEXTClockFreq PROC
;;;671    /*---------------------------------------------------------------------------------------------------------*/
;;;672    void DrvTIMER_SetEXTClockFreq(uint32_t u32ClockFreq)
000000  4901              LDR      r1,|L13.8|
;;;673    {
;;;674    	u32EXTClockFreq = u32ClockFreq;
000002  6008              STR      r0,[r1,#0]  ; u32EXTClockFreq
;;;675    }
000004  4770              BX       lr
;;;676    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      u32EXTClockFreq

                          AREA ||i.DrvTIMER_SetTimerEvent||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SetTimerEvent PROC
;;;239    /*---------------------------------------------------------------------------------------------------------*/
;;;240    int32_t DrvTIMER_SetTimerEvent(TIMER_CHANNEL channel, uint32_t uTimeTick, TIMER_CALLBACK pvFun ,uint32_t parameter)
000000  b5ff              PUSH     {r0-r7,lr}
;;;241    {
000002  460c              MOV      r4,r1
;;;242        int32_t volatile i;
;;;243        int32_t val=0;
000004  2000              MOVS     r0,#0
;;;244    
;;;245    
;;;246        switch (channel)
000006  9d00              LDR      r5,[sp,#0]
000008  2d00              CMP      r5,#0
00000a  d002              BEQ      |L14.18|
00000c  2d01              CMP      r5,#1
00000e  d15a              BNE      |L14.198|
000010  e02c              B        |L14.108|
                  |L14.18|
;;;247        {
;;;248            case TMR0:
;;;249            {
;;;250                bIsSetTime0Event = TRUE;
000012  2501              MOVS     r5,#1
000014  4e2e              LDR      r6,|L14.208|
000016  6035              STR      r5,[r6,#0]  ; bIsSetTime0Event
;;;251                uTime0EventCount++;
000018  4d2e              LDR      r5,|L14.212|
00001a  682d              LDR      r5,[r5,#0]  ; uTime0EventCount
00001c  1c6d              ADDS     r5,r5,#1
00001e  4e2d              LDR      r6,|L14.212|
000020  6035              STR      r5,[r6,#0]  ; uTime0EventCount
;;;252                for (i=0; i<TIMER_EVENT_COUNT; i++)
000022  2100              MOVS     r1,#0
000024  e01e              B        |L14.100|
                  |L14.38|
;;;253                {
;;;254                    if (tTime0Event[i].active  == FALSE)
000026  2514              MOVS     r5,#0x14
000028  434d              MULS     r5,r1,r5
00002a  4e2b              LDR      r6,|L14.216|
00002c  5975              LDR      r5,[r6,r5]
00002e  2d00              CMP      r5,#0
000030  d117              BNE      |L14.98|
;;;255                    {
;;;256                        tTime0Event[i].active   	= TRUE;
000032  2601              MOVS     r6,#1
000034  2514              MOVS     r5,#0x14
000036  434d              MULS     r5,r1,r5
000038  4f27              LDR      r7,|L14.216|
00003a  517e              STR      r6,[r7,r5]
;;;257                        tTime0Event[i].initTick 	= uTimeTick;
00003c  2514              MOVS     r5,#0x14
00003e  434d              MULS     r5,r1,r5
000040  463e              MOV      r6,r7
000042  19ad              ADDS     r5,r5,r6
000044  606c              STR      r4,[r5,#4]
;;;258                        tTime0Event[i].curTick  	= uTimeTick;
000046  2514              MOVS     r5,#0x14
000048  434d              MULS     r5,r1,r5
00004a  19ad              ADDS     r5,r5,r6
00004c  60ac              STR      r4,[r5,#8]
;;;259                        tTime0Event[i].funPtr   	= (TIMER_CALLBACK)pvFun;
00004e  2514              MOVS     r5,#0x14
000050  434d              MULS     r5,r1,r5
000052  19ad              ADDS     r5,r5,r6
000054  60ea              STR      r2,[r5,#0xc]
;;;260                        tTime0Event[i].transParam   = parameter;
000056  2514              MOVS     r5,#0x14
000058  434d              MULS     r5,r1,r5
00005a  19ad              ADDS     r5,r5,r6
00005c  612b              STR      r3,[r5,#0x10]
;;;261                        val = i;
00005e  4608              MOV      r0,r1
;;;262                        break;
000060  e002              B        |L14.104|
                  |L14.98|
000062  1c49              ADDS     r1,r1,#1              ;252
                  |L14.100|
000064  290a              CMP      r1,#0xa               ;252
000066  dbde              BLT      |L14.38|
                  |L14.104|
000068  bf00              NOP      
;;;263                    }
;;;264                }
;;;265                break;
00006a  e02d              B        |L14.200|
                  |L14.108|
;;;266            }
;;;267            case TMR1:
;;;268            {
;;;269                bIsSetTime1Event = TRUE;
00006c  2501              MOVS     r5,#1
00006e  4e1b              LDR      r6,|L14.220|
000070  6035              STR      r5,[r6,#0]  ; bIsSetTime1Event
;;;270                uTime1EventCount++;
000072  4d1b              LDR      r5,|L14.224|
000074  682d              LDR      r5,[r5,#0]  ; uTime1EventCount
000076  1c6d              ADDS     r5,r5,#1
000078  4e19              LDR      r6,|L14.224|
00007a  6035              STR      r5,[r6,#0]  ; uTime1EventCount
;;;271                for (i=0; i<TIMER_EVENT_COUNT; i++)
00007c  2100              MOVS     r1,#0
00007e  e01e              B        |L14.190|
                  |L14.128|
;;;272                {
;;;273                    if (tTime1Event[i].active   == FALSE)
000080  2514              MOVS     r5,#0x14
000082  434d              MULS     r5,r1,r5
000084  4e17              LDR      r6,|L14.228|
000086  5975              LDR      r5,[r6,r5]
000088  2d00              CMP      r5,#0
00008a  d117              BNE      |L14.188|
;;;274                    {
;;;275                        tTime1Event[i].active   	= TRUE;
00008c  2601              MOVS     r6,#1
00008e  2514              MOVS     r5,#0x14
000090  434d              MULS     r5,r1,r5
000092  4f14              LDR      r7,|L14.228|
000094  517e              STR      r6,[r7,r5]
;;;276                        tTime1Event[i].initTick 	= uTimeTick;
000096  2514              MOVS     r5,#0x14
000098  434d              MULS     r5,r1,r5
00009a  463e              MOV      r6,r7
00009c  19ad              ADDS     r5,r5,r6
00009e  606c              STR      r4,[r5,#4]
;;;277                        tTime1Event[i].curTick  	= uTimeTick;
0000a0  2514              MOVS     r5,#0x14
0000a2  434d              MULS     r5,r1,r5
0000a4  19ad              ADDS     r5,r5,r6
0000a6  60ac              STR      r4,[r5,#8]
;;;278                        tTime1Event[i].funPtr   	= (TIMER_CALLBACK)pvFun;
0000a8  2514              MOVS     r5,#0x14
0000aa  434d              MULS     r5,r1,r5
0000ac  19ad              ADDS     r5,r5,r6
0000ae  60ea              STR      r2,[r5,#0xc]
;;;279                        tTime1Event[i].transParam   = parameter;
0000b0  2514              MOVS     r5,#0x14
0000b2  434d              MULS     r5,r1,r5
0000b4  19ad              ADDS     r5,r5,r6
0000b6  612b              STR      r3,[r5,#0x10]
;;;280                        val = i;
0000b8  4608              MOV      r0,r1
;;;281                        break;
0000ba  e002              B        |L14.194|
                  |L14.188|
0000bc  1c49              ADDS     r1,r1,#1              ;271
                  |L14.190|
0000be  290a              CMP      r1,#0xa               ;271
0000c0  dbde              BLT      |L14.128|
                  |L14.194|
0000c2  bf00              NOP      
;;;282                    }
;;;283                }
;;;284                break;
0000c4  e000              B        |L14.200|
                  |L14.198|
;;;285            }
;;;286    
;;;287    
;;;288            default:
;;;289            {
;;;290                break;
0000c6  bf00              NOP      
                  |L14.200|
0000c8  bf00              NOP                            ;265
;;;291            }
;;;292        }
;;;293    
;;;294        return val;
;;;295    }
0000ca  b004              ADD      sp,sp,#0x10
0000cc  bdf0              POP      {r4-r7,pc}
;;;296    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L14.208|
                          DCD      bIsSetTime0Event
                  |L14.212|
                          DCD      uTime0EventCount
                  |L14.216|
                          DCD      tTime0Event
                  |L14.220|
                          DCD      bIsSetTime1Event
                  |L14.224|
                          DCD      uTime1EventCount
                  |L14.228|
                          DCD      tTime1Event

                          AREA ||i.DrvWDT_Close||, CODE, READONLY, ALIGN=2

                  DrvWDT_Close PROC
;;;1009   
;;;1010   void DrvWDT_Close(void)
000000  b510              PUSH     {r4,lr}
;;;1011   {
;;;1012       DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);     /* Stop WDT */
000002  2100              MOVS     r1,#0
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       DrvWDT_Ioctl
;;;1013       DrvWDT_Ioctl(E_WDT_IOC_DISABLE_INT, 0);    /* Disable WDT Interrupt */
00000a  2100              MOVS     r1,#0
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       DrvWDT_Ioctl
;;;1014   
;;;1015       SYSCLK->APBCLK.WDG_EN = 0;
000012  4803              LDR      r0,|L15.32|
000014  6880              LDR      r0,[r0,#8]
000016  0840              LSRS     r0,r0,#1
000018  0040              LSLS     r0,r0,#1
00001a  4901              LDR      r1,|L15.32|
00001c  6088              STR      r0,[r1,#8]
;;;1016   }
00001e  bd10              POP      {r4,pc}
;;;1017   
                          ENDP

                  |L15.32|
                          DCD      0x50000200

                          AREA ||i.DrvWDT_InstallISR||, CODE, READONLY, ALIGN=2

                  DrvWDT_InstallISR PROC
;;;849    /*---------------------------------------------------------------------------------------------------------*/
;;;850    void DrvWDT_InstallISR(TIMER_CALLBACK pvNewISR)
000000  4904              LDR      r1,|L16.20|
;;;851    {
;;;852    	WDT->WTCR.WTIE =1 ;
000002  6809              LDR      r1,[r1,#0]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  3140              ADDS     r1,r1,#0x40
00000a  4a02              LDR      r2,|L16.20|
00000c  6011              STR      r1,[r2,#0]
;;;853    	fnCallBack_WDT = (TIMER_CALLBACK)pvNewISR; 
00000e  4902              LDR      r1,|L16.24|
000010  6008              STR      r0,[r1,#0]  ; fnCallBack_WDT
;;;854    }
000012  4770              BX       lr
;;;855    
                          ENDP

                  |L16.20|
                          DCD      0x40004000
                  |L16.24|
                          DCD      fnCallBack_WDT

                          AREA ||i.DrvWDT_Ioctl||, CODE, READONLY, ALIGN=2

                  DrvWDT_Ioctl PROC
;;;931    
;;;932    int32_t DrvWDT_Ioctl(E_WDT_CMD uWDTCmd, uint32_t uArgument)
000000  b570              PUSH     {r4-r6,lr}
;;;933    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;934        switch (uWDTCmd)
000006  0023              MOVS     r3,r4
000008  f7fffffe          BL       __ARM_common_switch8
00000c  0a060e15          DCB      0x0a,0x06,0x0e,0x15
000010  2051512d          DCB      0x20,0x51,0x51,0x2d
000014  353d4451          DCB      0x35,0x3d,0x44,0x51
;;;935        {
;;;936            case E_WDT_IOC_START_TIMER  :
;;;937            {
;;;938     			WDT->WTCR.WTE = 1;
000018  4827              LDR      r0,|L17.184|
00001a  6800              LDR      r0,[r0,#0]
00001c  2180              MOVS     r1,#0x80
00001e  4388              BICS     r0,r0,r1
000020  3080              ADDS     r0,r0,#0x80
000022  4925              LDR      r1,|L17.184|
000024  6008              STR      r0,[r1,#0]
;;;939                break ;
000026  e044              B        |L17.178|
;;;940            }
;;;941    
;;;942            case E_WDT_IOC_STOP_TIMER :
;;;943            {
;;;944     			WDT->WTCR.WTE = 0;
000028  4823              LDR      r0,|L17.184|
00002a  6800              LDR      r0,[r0,#0]
00002c  2180              MOVS     r1,#0x80
00002e  4388              BICS     r0,r0,r1
000030  4921              LDR      r1,|L17.184|
000032  6008              STR      r0,[r1,#0]
;;;945                break ;
000034  e03d              B        |L17.178|
;;;946            }
;;;947    
;;;948            case E_WDT_IOC_ENABLE_INT :
;;;949            {
;;;950     			WDT->WTCR.WTIE = 1;
000036  4820              LDR      r0,|L17.184|
000038  6800              LDR      r0,[r0,#0]
00003a  2140              MOVS     r1,#0x40
00003c  4388              BICS     r0,r0,r1
00003e  3040              ADDS     r0,r0,#0x40
000040  491d              LDR      r1,|L17.184|
000042  6008              STR      r0,[r1,#0]
;;;951    			NVIC_EnableIRQ(WDT_IRQn);
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       NVIC_EnableIRQ
;;;952                break ;
00004a  e032              B        |L17.178|
;;;953            }
;;;954    
;;;955            case E_WDT_IOC_DISABLE_INT :
;;;956            {
;;;957      			WDT->WTCR.WTIE = 0;
00004c  481a              LDR      r0,|L17.184|
00004e  6800              LDR      r0,[r0,#0]
000050  2140              MOVS     r1,#0x40
000052  4388              BICS     r0,r0,r1
000054  4918              LDR      r1,|L17.184|
000056  6008              STR      r0,[r1,#0]
;;;958    			NVIC_DisableIRQ(WDT_IRQn); 
000058  2001              MOVS     r0,#1
00005a  2101              MOVS     r1,#1
00005c  4081              LSLS     r1,r1,r0
00005e  4a17              LDR      r2,|L17.188|
000060  6011              STR      r1,[r2,#0]
000062  bf00              NOP      
;;;959                break ;
000064  e025              B        |L17.178|
;;;960            }
;;;961    
;;;962            case E_WDT_IOC_RESET_TIMER:
;;;963            {
;;;964     			WDT->WTCR.WTR = 1;
000066  4814              LDR      r0,|L17.184|
000068  6800              LDR      r0,[r0,#0]
00006a  0840              LSRS     r0,r0,#1
00006c  0040              LSLS     r0,r0,#1
00006e  1c40              ADDS     r0,r0,#1
000070  4911              LDR      r1,|L17.184|
000072  6008              STR      r0,[r1,#0]
;;;965                break ;
000074  e01d              B        |L17.178|
;;;966            }
;;;967    
;;;968            case E_WDT_IOC_ENABLE_RESET_FUNC :
;;;969            {
;;;970    			WDT->WTCR.WTRE = 1;
000076  4810              LDR      r0,|L17.184|
000078  6800              LDR      r0,[r0,#0]
00007a  2102              MOVS     r1,#2
00007c  4388              BICS     r0,r0,r1
00007e  1c80              ADDS     r0,r0,#2
000080  490d              LDR      r1,|L17.184|
000082  6008              STR      r0,[r1,#0]
;;;971                break ;
000084  e015              B        |L17.178|
;;;972            }
;;;973    
;;;974            case E_WDT_IOC_DISABLE_RESET_FUNC:
;;;975            {
;;;976     			WDT->WTCR.WTRE = 0;
000086  480c              LDR      r0,|L17.184|
000088  6800              LDR      r0,[r0,#0]
00008a  2102              MOVS     r1,#2
00008c  4388              BICS     r0,r0,r1
00008e  490a              LDR      r1,|L17.184|
000090  6008              STR      r0,[r1,#0]
;;;977                break ;
000092  e00e              B        |L17.178|
;;;978            }
;;;979    
;;;980            case E_WDT_IOC_SET_INTERVAL:
;;;981            {
;;;982                WDT->WTCR.WTIS = (E_WDT_INTERVAL)uArgument;
000094  4808              LDR      r0,|L17.184|
000096  6800              LDR      r0,[r0,#0]
000098  2107              MOVS     r1,#7
00009a  0209              LSLS     r1,r1,#8
00009c  4388              BICS     r0,r0,r1
00009e  0229              LSLS     r1,r5,#8
0000a0  2207              MOVS     r2,#7
0000a2  0212              LSLS     r2,r2,#8
0000a4  4011              ANDS     r1,r1,r2
0000a6  4308              ORRS     r0,r0,r1
0000a8  4903              LDR      r1,|L17.184|
0000aa  6008              STR      r0,[r1,#0]
;;;983    
;;;984                break ;
0000ac  e001              B        |L17.178|
;;;985            }
;;;986           
;;;987    		default :
;;;988            {
;;;989                return E_DRVWDT_CMD;
0000ae  4804              LDR      r0,|L17.192|
                  |L17.176|
;;;990            }
;;;991        }
;;;992    
;;;993        return E_SUCCESS;
;;;994    }
0000b0  bd70              POP      {r4-r6,pc}
                  |L17.178|
0000b2  bf00              NOP                            ;939
0000b4  2000              MOVS     r0,#0                 ;993
0000b6  e7fb              B        |L17.176|
;;;995    
                          ENDP

                  |L17.184|
                          DCD      0x40004000
                  |L17.188|
                          DCD      0xe000e180
                  |L17.192|
                          DCD      0xffff9705

                          AREA ||i.DrvWDT_Open||, CODE, READONLY, ALIGN=2

                  DrvWDT_Open PROC
;;;868    
;;;869    void DrvWDT_Open(E_WDT_INTERVAL WDTlevel)
000000  b510              PUSH     {r4,lr}
;;;870    {
000002  4604              MOV      r4,r0
;;;871        DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);  /* Stop WDT first */
000004  2100              MOVS     r1,#0
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       DrvWDT_Ioctl
;;;872    
;;;873        SYSCLK->APBCLK.WDG_EN = 1;  /* Enable WatchDog Timer Clock */    
00000c  4808              LDR      r0,|L18.48|
00000e  6880              LDR      r0,[r0,#8]
000010  0840              LSRS     r0,r0,#1
000012  0040              LSLS     r0,r0,#1
000014  1c40              ADDS     r0,r0,#1
000016  4906              LDR      r1,|L18.48|
000018  6088              STR      r0,[r1,#8]
;;;874    
;;;875        WDT->WTCR.WTIS = WDTlevel;  /* Select WatchDog Timer Interval */
00001a  4806              LDR      r0,|L18.52|
00001c  6800              LDR      r0,[r0,#0]
00001e  4906              LDR      r1,|L18.56|
000020  4388              BICS     r0,r0,r1
000022  0221              LSLS     r1,r4,#8
000024  4a04              LDR      r2,|L18.56|
000026  4011              ANDS     r1,r1,r2
000028  4308              ORRS     r0,r0,r1
00002a  4902              LDR      r1,|L18.52|
00002c  6008              STR      r0,[r1,#0]
;;;876    }
00002e  bd10              POP      {r4,pc}
;;;877    
                          ENDP

                  |L18.48|
                          DCD      0x50000200
                  |L18.52|
                          DCD      0x40004000
                  |L18.56|
                          DCD      0x00000700

                          AREA ||i.DrvWDT_ResetCount||, CODE, READONLY, ALIGN=2

                  DrvWDT_ResetCount PROC
;;;1028   /*---------------------------------------------------------------------------------------------------------*/
;;;1029   void DrvWDT_ResetCount(void)
000000  4803              LDR      r0,|L19.16|
;;;1030   {
;;;1031       WDT->WTCR.WTR =1 ;
000002  6800              LDR      r0,[r0,#0]
000004  0840              LSRS     r0,r0,#1
000006  0040              LSLS     r0,r0,#1
000008  1c40              ADDS     r0,r0,#1
00000a  4901              LDR      r1,|L19.16|
00000c  6008              STR      r0,[r1,#0]
;;;1032   
;;;1033   }
00000e  4770              BX       lr
;;;1034   
                          ENDP

                  |L19.16|
                          DCD      0x40004000

                          AREA ||i.GetTimerCLk||, CODE, READONLY, ALIGN=2

                  GetTimerCLk PROC
;;;61     /*---------------------------------------------------------------------------------------------------------*/
;;;62     static uint32_t GetTimerCLk(TIMER_CHANNEL ch)
000000  b570              PUSH     {r4-r6,lr}
;;;63     {
000002  4605              MOV      r5,r0
;;;64     	volatile uint32_t clk =0 ;
000004  2400              MOVS     r4,#0
;;;65     	
;;;66     	
;;;67     	if(ch == TMR0 )
000006  2d00              CMP      r5,#0
000008  d12b              BNE      |L20.98|
;;;68     	{
;;;69     		if(SYSCLK->CLKSEL1.TMR0_S == 0)			
00000a  482f              LDR      r0,|L20.200|
00000c  6940              LDR      r0,[r0,#0x14]
00000e  0540              LSLS     r0,r0,#21
000010  0f40              LSRS     r0,r0,#29
000012  d101              BNE      |L20.24|
;;;70     		{
;;;71     		    clk = 10000;						/* Option 0: 10K  */ 
000014  4c2d              LDR      r4,|L20.204|
000016  e054              B        |L20.194|
                  |L20.24|
;;;72     		}
;;;73     		else if(SYSCLK->CLKSEL1.TMR0_S == 1)
000018  482b              LDR      r0,|L20.200|
00001a  6940              LDR      r0,[r0,#0x14]
00001c  0540              LSLS     r0,r0,#21
00001e  0f40              LSRS     r0,r0,#29
000020  2801              CMP      r0,#1
000022  d106              BNE      |L20.50|
;;;74     		{
;;;75     			clk = DrvSYS_GetEXTClock()*1000;						/* Option 1: 32K */
000024  f7fffffe          BL       DrvSYS_GetEXTClock
000028  217d              MOVS     r1,#0x7d
00002a  00c9              LSLS     r1,r1,#3
00002c  4348              MULS     r0,r1,r0
00002e  4604              MOV      r4,r0
000030  e047              B        |L20.194|
                  |L20.50|
;;;76     		}
;;;77     		else if(SYSCLK->CLKSEL1.TMR0_S == 2)
000032  4825              LDR      r0,|L20.200|
000034  6940              LDR      r0,[r0,#0x14]
000036  0540              LSLS     r0,r0,#21
000038  0f40              LSRS     r0,r0,#29
00003a  2802              CMP      r0,#2
00003c  d106              BNE      |L20.76|
;;;78     		{
;;;79     		
;;;80     			clk = DrvSYS_GetHCLK() * 1000 ;		/* Option 2: HCLK */
00003e  f7fffffe          BL       DrvSYS_GetHCLK
000042  217d              MOVS     r1,#0x7d
000044  00c9              LSLS     r1,r1,#3
000046  4348              MULS     r0,r1,r0
000048  4604              MOV      r4,r0
00004a  e03a              B        |L20.194|
                  |L20.76|
;;;81     		}
;;;82     		else if(SYSCLK->CLKSEL1.TMR0_S == 3)
00004c  481e              LDR      r0,|L20.200|
00004e  6940              LDR      r0,[r0,#0x14]
000050  0540              LSLS     r0,r0,#21
000052  0f40              LSRS     r0,r0,#29
000054  2803              CMP      r0,#3
000056  d102              BNE      |L20.94|
;;;83     		{
;;;84     			clk = u32EXTClockFreq;				/* Option 3: External Trigger */
000058  481d              LDR      r0,|L20.208|
00005a  6804              LDR      r4,[r0,#0]  ; u32EXTClockFreq
00005c  e031              B        |L20.194|
                  |L20.94|
;;;85     		}
;;;86     		else 
;;;87     		{
;;;88     			clk = 48000000; 					/* Option 4: 48MHz*/
00005e  4c1d              LDR      r4,|L20.212|
000060  e02f              B        |L20.194|
                  |L20.98|
;;;89     		}
;;;90     
;;;91     	}
;;;92     	else if(ch == TMR1 )
000062  2d01              CMP      r5,#1
000064  d12b              BNE      |L20.190|
;;;93     	{
;;;94         	if(SYSCLK->CLKSEL1.TMR1_S == 0)			
000066  4818              LDR      r0,|L20.200|
000068  6940              LDR      r0,[r0,#0x14]
00006a  0440              LSLS     r0,r0,#17
00006c  0f40              LSRS     r0,r0,#29
00006e  d101              BNE      |L20.116|
;;;95     		{
;;;96     			clk = 10000;						/* Option 0: 10K */
000070  4c16              LDR      r4,|L20.204|
000072  e026              B        |L20.194|
                  |L20.116|
;;;97     		}
;;;98     		else if(SYSCLK->CLKSEL1.TMR1_S == 1)
000074  4814              LDR      r0,|L20.200|
000076  6940              LDR      r0,[r0,#0x14]
000078  0440              LSLS     r0,r0,#17
00007a  0f40              LSRS     r0,r0,#29
00007c  2801              CMP      r0,#1
00007e  d106              BNE      |L20.142|
;;;99     		{
;;;100    			clk = DrvSYS_GetEXTClock()*1000;						/* Option 1: 32K */
000080  f7fffffe          BL       DrvSYS_GetEXTClock
000084  217d              MOVS     r1,#0x7d
000086  00c9              LSLS     r1,r1,#3
000088  4348              MULS     r0,r1,r0
00008a  4604              MOV      r4,r0
00008c  e019              B        |L20.194|
                  |L20.142|
;;;101    		}
;;;102    		else if(SYSCLK->CLKSEL1.TMR1_S == 2)
00008e  480e              LDR      r0,|L20.200|
000090  6940              LDR      r0,[r0,#0x14]
000092  0440              LSLS     r0,r0,#17
000094  0f40              LSRS     r0,r0,#29
000096  2802              CMP      r0,#2
000098  d106              BNE      |L20.168|
;;;103    		{
;;;104    		    clk = DrvSYS_GetHCLK() * 1000 ;		/* Option 2: HCLK */
00009a  f7fffffe          BL       DrvSYS_GetHCLK
00009e  217d              MOVS     r1,#0x7d
0000a0  00c9              LSLS     r1,r1,#3
0000a2  4348              MULS     r0,r1,r0
0000a4  4604              MOV      r4,r0
0000a6  e00c              B        |L20.194|
                  |L20.168|
;;;105    		}
;;;106    		else if(SYSCLK->CLKSEL1.TMR1_S == 3)
0000a8  4807              LDR      r0,|L20.200|
0000aa  6940              LDR      r0,[r0,#0x14]
0000ac  0440              LSLS     r0,r0,#17
0000ae  0f40              LSRS     r0,r0,#29
0000b0  2803              CMP      r0,#3
0000b2  d102              BNE      |L20.186|
;;;107    		{
;;;108    			clk = u32EXTClockFreq;				/* Option 3: External Trigger */
0000b4  4806              LDR      r0,|L20.208|
0000b6  6804              LDR      r4,[r0,#0]  ; u32EXTClockFreq
0000b8  e003              B        |L20.194|
                  |L20.186|
;;;109    		}
;;;110    		else 
;;;111    		{
;;;112    			clk = 48000000; 					/* Option 4: 48MHz*/
0000ba  4c06              LDR      r4,|L20.212|
0000bc  e001              B        |L20.194|
                  |L20.190|
;;;113    		}
;;;114    	}
;;;115    	
;;;116    
;;;117    	else 
;;;118        	return E_DRVTIMER_CHANNEL;
0000be  4806              LDR      r0,|L20.216|
                  |L20.192|
;;;119    			
;;;120    
;;;121    	return clk;
;;;122    }
0000c0  bd70              POP      {r4-r6,pc}
                  |L20.194|
0000c2  4620              MOV      r0,r4                 ;121
0000c4  e7fc              B        |L20.192|
;;;123    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L20.200|
                          DCD      0x50000200
                  |L20.204|
                          DCD      0x00002710
                  |L20.208|
                          DCD      u32EXTClockFreq
                  |L20.212|
                          DCD      0x02dc6c00
                  |L20.216|
                          DCD      0xffff9702

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;541     */
;;;542    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;543    {
;;;544      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L21.16|
00000a  6011              STR      r1,[r2,#0]
;;;545    }
00000c  4770              BX       lr
;;;546    
                          ENDP

00000e  0000              DCW      0x0000
                  |L21.16|
                          DCD      0xe000e100

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;160    /*---------------------------------------------------------------------------------------------------------*/
;;;161    void TMR0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;162    {
;;;163        int32_t i;
;;;164        uTimer0Count++;
000002  4820              LDR      r0,|L22.132|
000004  6800              LDR      r0,[r0,#0]  ; uTimer0Count
000006  1c40              ADDS     r0,r0,#1
000008  491e              LDR      r1,|L22.132|
00000a  6008              STR      r0,[r1,#0]  ; uTimer0Count
;;;165    
;;;166    
;;;167     	TIMER0->TISR.TIF =1;
00000c  481e              LDR      r0,|L22.136|
00000e  6880              LDR      r0,[r0,#8]
000010  0840              LSRS     r0,r0,#1
000012  0040              LSLS     r0,r0,#1
000014  1c40              ADDS     r0,r0,#1
000016  491c              LDR      r1,|L22.136|
000018  6088              STR      r0,[r1,#8]
;;;168     
;;;169     	if (bIsSetTime0Event)                               /* Timer Event Handle                               */
00001a  481c              LDR      r0,|L22.140|
00001c  6800              LDR      r0,[r0,#0]  ; bIsSetTime0Event
00001e  2800              CMP      r0,#0
000020  d02f              BEQ      |L22.130|
;;;170        {
;;;171            for (i=0; i<TIMER_EVENT_COUNT; i++)
000022  2400              MOVS     r4,#0
000024  e02b              B        |L22.126|
                  |L22.38|
;;;172            {
;;;173                if (tTime0Event[i].active)
000026  2014              MOVS     r0,#0x14
000028  4360              MULS     r0,r4,r0
00002a  4919              LDR      r1,|L22.144|
00002c  5808              LDR      r0,[r1,r0]
00002e  2800              CMP      r0,#0
000030  d024              BEQ      |L22.124|
;;;174                {
;;;175                    tTime0Event[i].curTick--;
000032  2014              MOVS     r0,#0x14
000034  4360              MULS     r0,r4,r0
000036  1840              ADDS     r0,r0,r1
000038  6880              LDR      r0,[r0,#8]
00003a  1e40              SUBS     r0,r0,#1
00003c  2114              MOVS     r1,#0x14
00003e  4361              MULS     r1,r4,r1
000040  4a13              LDR      r2,|L22.144|
000042  1889              ADDS     r1,r1,r2
000044  6088              STR      r0,[r1,#8]
;;;176                    if (tTime0Event[i].curTick == 0)
000046  2014              MOVS     r0,#0x14
000048  4360              MULS     r0,r4,r0
00004a  4611              MOV      r1,r2
00004c  1840              ADDS     r0,r0,r1
00004e  6880              LDR      r0,[r0,#8]
000050  2800              CMP      r0,#0
000052  d113              BNE      |L22.124|
;;;177                    {
;;;178                        (*tTime0Event[i].funPtr)(tTime0Event[i].transParam);
000054  2214              MOVS     r2,#0x14
000056  4362              MULS     r2,r4,r2
000058  460b              MOV      r3,r1
00005a  18d2              ADDS     r2,r2,r3
00005c  6910              LDR      r0,[r2,#0x10]
00005e  2214              MOVS     r2,#0x14
000060  4362              MULS     r2,r4,r2
000062  18d2              ADDS     r2,r2,r3
000064  68d1              LDR      r1,[r2,#0xc]
000066  4788              BLX      r1
;;;179                        tTime0Event[i].curTick = tTime0Event[i].initTick;
000068  2014              MOVS     r0,#0x14
00006a  4360              MULS     r0,r4,r0
00006c  4908              LDR      r1,|L22.144|
00006e  1840              ADDS     r0,r0,r1
000070  6841              LDR      r1,[r0,#4]
000072  2014              MOVS     r0,#0x14
000074  4360              MULS     r0,r4,r0
000076  4a06              LDR      r2,|L22.144|
000078  1880              ADDS     r0,r0,r2
00007a  6081              STR      r1,[r0,#8]
                  |L22.124|
00007c  1c64              ADDS     r4,r4,#1              ;171
                  |L22.126|
00007e  2c0a              CMP      r4,#0xa               ;171
000080  dbd1              BLT      |L22.38|
                  |L22.130|
;;;180                    }
;;;181                }
;;;182            }
;;;183        }
;;;184    }
000082  bd10              POP      {r4,pc}
;;;185    
                          ENDP

                  |L22.132|
                          DCD      uTimer0Count
                  |L22.136|
                          DCD      0x40010000
                  |L22.140|
                          DCD      bIsSetTime0Event
                  |L22.144|
                          DCD      tTime0Event

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;198    /*---------------------------------------------------------------------------------------------------------*/
;;;199    void TMR1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;200    {
;;;201        int32_t i;
;;;202        
;;;203        uTimer1Count++;
000002  4820              LDR      r0,|L23.132|
000004  6800              LDR      r0,[r0,#0]  ; uTimer1Count
000006  1c40              ADDS     r0,r0,#1
000008  491e              LDR      r1,|L23.132|
00000a  6008              STR      r0,[r1,#0]  ; uTimer1Count
;;;204    
;;;205      	TIMER1->TISR.TIF =1;
00000c  481e              LDR      r0,|L23.136|
00000e  6a80              LDR      r0,[r0,#0x28]
000010  0840              LSRS     r0,r0,#1
000012  0040              LSLS     r0,r0,#1
000014  1c40              ADDS     r0,r0,#1
000016  491c              LDR      r1,|L23.136|
000018  6288              STR      r0,[r1,#0x28]
;;;206        if (bIsSetTime1Event)                           /* Timer Event Handle                                  */
00001a  481c              LDR      r0,|L23.140|
00001c  6800              LDR      r0,[r0,#0]  ; bIsSetTime1Event
00001e  2800              CMP      r0,#0
000020  d02f              BEQ      |L23.130|
;;;207        {
;;;208            for (i=0; i<TIMER_EVENT_COUNT; i++)
000022  2400              MOVS     r4,#0
000024  e02b              B        |L23.126|
                  |L23.38|
;;;209            {
;;;210                if (tTime1Event[i].active)
000026  2014              MOVS     r0,#0x14
000028  4360              MULS     r0,r4,r0
00002a  4919              LDR      r1,|L23.144|
00002c  5808              LDR      r0,[r1,r0]
00002e  2800              CMP      r0,#0
000030  d024              BEQ      |L23.124|
;;;211                {
;;;212                    tTime1Event[i].curTick--;
000032  2014              MOVS     r0,#0x14
000034  4360              MULS     r0,r4,r0
000036  1840              ADDS     r0,r0,r1
000038  6880              LDR      r0,[r0,#8]
00003a  1e40              SUBS     r0,r0,#1
00003c  2114              MOVS     r1,#0x14
00003e  4361              MULS     r1,r4,r1
000040  4a13              LDR      r2,|L23.144|
000042  1889              ADDS     r1,r1,r2
000044  6088              STR      r0,[r1,#8]
;;;213                    if (tTime1Event[i].curTick == 0)
000046  2014              MOVS     r0,#0x14
000048  4360              MULS     r0,r4,r0
00004a  4611              MOV      r1,r2
00004c  1840              ADDS     r0,r0,r1
00004e  6880              LDR      r0,[r0,#8]
000050  2800              CMP      r0,#0
000052  d113              BNE      |L23.124|
;;;214                    {
;;;215                        (*tTime1Event[i].funPtr)(tTime1Event[i].transParam);
000054  2214              MOVS     r2,#0x14
000056  4362              MULS     r2,r4,r2
000058  460b              MOV      r3,r1
00005a  18d2              ADDS     r2,r2,r3
00005c  6910              LDR      r0,[r2,#0x10]
00005e  2214              MOVS     r2,#0x14
000060  4362              MULS     r2,r4,r2
000062  18d2              ADDS     r2,r2,r3
000064  68d1              LDR      r1,[r2,#0xc]
000066  4788              BLX      r1
;;;216                        tTime1Event[i].curTick = tTime1Event[i].initTick;
000068  2014              MOVS     r0,#0x14
00006a  4360              MULS     r0,r4,r0
00006c  4908              LDR      r1,|L23.144|
00006e  1840              ADDS     r0,r0,r1
000070  6841              LDR      r1,[r0,#4]
000072  2014              MOVS     r0,#0x14
000074  4360              MULS     r0,r4,r0
000076  4a06              LDR      r2,|L23.144|
000078  1880              ADDS     r0,r0,r2
00007a  6081              STR      r1,[r0,#8]
                  |L23.124|
00007c  1c64              ADDS     r4,r4,#1              ;208
                  |L23.126|
00007e  2c0a              CMP      r4,#0xa               ;208
000080  dbd1              BLT      |L23.38|
                  |L23.130|
;;;217                    }
;;;218                }
;;;219            }
;;;220        }
;;;221    }
000082  bd10              POP      {r4,pc}
;;;222    
                          ENDP

                  |L23.132|
                          DCD      uTimer1Count
                  |L23.136|
                          DCD      0x40010000
                  |L23.140|
                          DCD      bIsSetTime1Event
                  |L23.144|
                          DCD      tTime1Event

                          AREA ||i.WDT_IRQHandler||, CODE, READONLY, ALIGN=2

                  WDT_IRQHandler PROC
;;;889    /*---------------------------------------------------------------------------------------------------------*/
;;;890    void WDT_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;891    {
;;;892    
;;;893    
;;;894        WDT->WTCR.WTIF =1;                  				/* Clear INT32 Flag */
000002  4808              LDR      r0,|L24.36|
000004  6800              LDR      r0,[r0,#0]
000006  2108              MOVS     r1,#8
000008  4388              BICS     r0,r0,r1
00000a  3008              ADDS     r0,r0,#8
00000c  4905              LDR      r1,|L24.36|
00000e  6008              STR      r0,[r1,#0]
;;;895    
;;;896        if((fnCallBack_WDT) )                              /* Install WDT Callback Function  */
000010  4805              LDR      r0,|L24.40|
000012  6800              LDR      r0,[r0,#0]  ; fnCallBack_WDT
000014  2800              CMP      r0,#0
000016  d003              BEQ      |L24.32|
;;;897        {
;;;898             fnCallBack_WDT(NULL);
000018  2000              MOVS     r0,#0
00001a  4903              LDR      r1,|L24.40|
00001c  6809              LDR      r1,[r1,#0]  ; fnCallBack_WDT
00001e  4788              BLX      r1
                  |L24.32|
;;;899        }
;;;900    
;;;901    }
000020  bd10              POP      {r4,pc}
;;;902    
                          ENDP

000022  0000              DCW      0x0000
                  |L24.36|
                          DCD      0x40004000
                  |L24.40|
                          DCD      fnCallBack_WDT

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        200
                  tTime1Event
                          %        200

                          AREA ||.data||, DATA, ALIGN=2

                  bIsTimer0Initial
                          DCD      0x00000000
                  bIsTimer1Initial
                          DCD      0x00000000
                  bIsTimer0Used
                          DCD      0x00000000
                  bIsTimer1Used
                          DCD      0x00000000
                  bIsSetTime0Event
                          DCD      0x00000000
                  bIsSetTime1Event
                          DCD      0x00000000
                  uTimer0Count
                          DCD      0x00000000
                  uTimer1Count
                          DCD      0x00000000
                  uTime0EventCount
                          DCD      0x00000000
                  uTime1EventCount
                          DCD      0x00000000
                  u32EXTClockFreq
                          DCD      0x01e84800
                  fnCallBack_WDT
                          DCD      0x00000000
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer1TickPerSecond
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L152.24|
                  |L152.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L152.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L152.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\ISD91XX_SDK\\NuvotonPlatform_Keil\\Src\\Driver\\DrvTimer.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_DrvTimer_c_237d6c7d____REV16|
#line 112 "..\\..\\ISD91XX_SDK\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___10_DrvTimer_c_237d6c7d____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_DrvTimer_c_237d6c7d____REVSH|
#line 130
|__asm___10_DrvTimer_c_237d6c7d____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
