; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\timer.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\output\timer.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport -I..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Nuvoton --omf_browse=..\output\timer.crf ..\src\timer.c]
                          THUMB

                          AREA ||i.TMR0_Callback||, CODE, READONLY, ALIGN=2

                  TMR0_Callback PROC
;;;9      
;;;10     static void TMR0_Callback(void)		// 10msÖÐ¶Ï
000000  4825              LDR      r0,|L1.152|
;;;11     {
;;;12     	alarm_led_flash_interval++;
000002  8800              LDRH     r0,[r0,#0]  ; alarm_led_flash_interval
000004  1c40              ADDS     r0,r0,#1
000006  4924              LDR      r1,|L1.152|
000008  8008              STRH     r0,[r1,#0]
;;;13     	busy_led_flash_interval++;
00000a  4824              LDR      r0,|L1.156|
00000c  8800              LDRH     r0,[r0,#0]  ; busy_led_flash_interval
00000e  1c40              ADDS     r0,r0,#1
000010  4922              LDR      r1,|L1.156|
000012  8008              STRH     r0,[r1,#0]
;;;14     	com_led_flash_interval++;
000014  4822              LDR      r0,|L1.160|
000016  8800              LDRH     r0,[r0,#0]  ; com_led_flash_interval
000018  1c40              ADDS     r0,r0,#1
00001a  4921              LDR      r1,|L1.160|
00001c  8008              STRH     r0,[r1,#0]
;;;15     
;;;16     	if(uart_tx_delay_time > 0)
00001e  4821              LDR      r0,|L1.164|
000020  7800              LDRB     r0,[r0,#0]  ; uart_tx_delay_time
000022  2800              CMP      r0,#0
000024  dd04              BLE      |L1.48|
;;;17     		uart_tx_delay_time--;
000026  481f              LDR      r0,|L1.164|
000028  7800              LDRB     r0,[r0,#0]  ; uart_tx_delay_time
00002a  1e40              SUBS     r0,r0,#1
00002c  491d              LDR      r1,|L1.164|
00002e  7008              STRB     r0,[r1,#0]
                  |L1.48|
;;;18     
;;;19     	if(pecu_com_timeout < PECU_COM_TIMEOUT)
000030  481d              LDR      r0,|L1.168|
000032  8800              LDRH     r0,[r0,#0]  ; pecu_com_timeout
000034  21ff              MOVS     r1,#0xff
000036  31f5              ADDS     r1,r1,#0xf5
000038  4288              CMP      r0,r1
00003a  da04              BGE      |L1.70|
;;;20     		pecu_com_timeout++;
00003c  481a              LDR      r0,|L1.168|
00003e  8800              LDRH     r0,[r0,#0]  ; pecu_com_timeout
000040  1c40              ADDS     r0,r0,#1
000042  4919              LDR      r1,|L1.168|
000044  8008              STRH     r0,[r1,#0]
                  |L1.70|
;;;21     
;;;22     	if(alarm_timeout < ALARM_TIMEOUT)
000046  4819              LDR      r0,|L1.172|
000048  8800              LDRH     r0,[r0,#0]  ; alarm_timeout
00004a  4919              LDR      r1,|L1.176|
00004c  4288              CMP      r0,r1
00004e  da04              BGE      |L1.90|
;;;23     		alarm_timeout++;
000050  4816              LDR      r0,|L1.172|
000052  8800              LDRH     r0,[r0,#0]  ; alarm_timeout
000054  1c40              ADDS     r0,r0,#1
000056  4915              LDR      r1,|L1.172|
000058  8008              STRH     r0,[r1,#0]
                  |L1.90|
;;;24     
;;;25     	if(ptt_timeout < PTT_TIMEOUT)
00005a  4816              LDR      r0,|L1.180|
00005c  8800              LDRH     r0,[r0,#0]  ; ptt_timeout
00005e  4914              LDR      r1,|L1.176|
000060  4288              CMP      r0,r1
000062  da04              BGE      |L1.110|
;;;26     		ptt_timeout++;
000064  4813              LDR      r0,|L1.180|
000066  8800              LDRH     r0,[r0,#0]  ; ptt_timeout
000068  1c40              ADDS     r0,r0,#1
00006a  4912              LDR      r1,|L1.180|
00006c  8008              STRH     r0,[r1,#0]
                  |L1.110|
;;;27     
;;;28     	if(com_delay_time > 0)
00006e  4812              LDR      r0,|L1.184|
000070  7800              LDRB     r0,[r0,#0]  ; com_delay_time
000072  2800              CMP      r0,#0
000074  dd04              BLE      |L1.128|
;;;29     		com_delay_time--;
000076  4810              LDR      r0,|L1.184|
000078  7800              LDRB     r0,[r0,#0]  ; com_delay_time
00007a  1e40              SUBS     r0,r0,#1
00007c  490e              LDR      r1,|L1.184|
00007e  7008              STRB     r0,[r1,#0]
                  |L1.128|
;;;30     
;;;31     	playback_time++;
000080  480e              LDR      r0,|L1.188|
000082  8800              LDRH     r0,[r0,#0]  ; playback_time
000084  1c40              ADDS     r0,r0,#1
000086  490d              LDR      r1,|L1.188|
000088  8008              STRH     r0,[r1,#0]
;;;32     		
;;;33     	test_time++;
00008a  480d              LDR      r0,|L1.192|
00008c  8800              LDRH     r0,[r0,#0]  ; test_time
00008e  1c40              ADDS     r0,r0,#1
000090  490b              LDR      r1,|L1.192|
000092  8008              STRH     r0,[r1,#0]
;;;34     }
000094  4770              BX       lr
;;;35     
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      alarm_led_flash_interval
                  |L1.156|
                          DCD      busy_led_flash_interval
                  |L1.160|
                          DCD      com_led_flash_interval
                  |L1.164|
                          DCD      uart_tx_delay_time
                  |L1.168|
                          DCD      pecu_com_timeout
                  |L1.172|
                          DCD      alarm_timeout
                  |L1.176|
                          DCD      0x00004650
                  |L1.180|
                          DCD      ptt_timeout
                  |L1.184|
                          DCD      com_delay_time
                  |L1.188|
                          DCD      playback_time
                  |L1.192|
                          DCD      test_time

                          AREA ||i.TMR0_Configuration||, CODE, READONLY, ALIGN=2

                  TMR0_Configuration PROC
;;;35     
;;;36     void TMR0_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;37     {
;;;38     	DrvTIMER_Init();
000002  f7fffffe          BL       DrvTIMER_Init
;;;39     	DrvSYS_SetIPClockSource(E_SYS_TMR0_CLKSRC, 2);		// TIMER0 clock source select6 010 = clock source from HCLK
000006  2102              MOVS     r1,#2
000008  2004              MOVS     r0,#4
00000a  f7fffffe          BL       DrvSYS_SetIPClockSource
;;;40     	DrvTIMER_Open(TMR0, 200, PERIODIC_MODE);				// Using TIMER0 PERIODIC_MODE, 200 tick / SEC
00000e  2201              MOVS     r2,#1
000010  21c8              MOVS     r1,#0xc8
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       DrvTIMER_Open
;;;41     	DrvTIMER_SetTimerEvent(TMR0, 2, (TIMER_CALLBACK)TMR0_Callback, 0);	// Install Callback function "call back" when Interrupt happen twice time
000018  2300              MOVS     r3,#0
00001a  4a04              LDR      r2,|L2.44|
00001c  2102              MOVS     r1,#2
00001e  4618              MOV      r0,r3
000020  f7fffffe          BL       DrvTIMER_SetTimerEvent
;;;42     	DrvTIMER_EnableInt(TMR0);							// Enable TIMER0 Interrupt
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       DrvTIMER_EnableInt
;;;43     }
00002a  bd10              POP      {r4,pc}
;;;44     
                          ENDP

                  |L2.44|
                          DCD      TMR0_Callback

;*** Start embedded assembler ***

#line 1 "..\\src\\timer.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_timer_c_5c4c69c8____REV16|
#line 112 "..\\..\\ISD91XX_SDK\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___7_timer_c_5c4c69c8____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_timer_c_5c4c69c8____REVSH|
#line 130
|__asm___7_timer_c_5c4c69c8____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
