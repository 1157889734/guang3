L 1 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\DrvTimer.c"
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright(c) 2011 Nuvoton Technology Corp. All rights reserved.                                         */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N 
N/*---------------------------------------------------------------------------------------------------------*/
N/* Includes of system headers                                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Includes of local headers                                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#include "ISD9xx.h"
L 1 "..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx\ISD9xx.h" 1
N/*----------------------------------------------------------------------------------------------*/
N/*                                                                                              */
N/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                  */
N/*                                                                                              */
N/*----------------------------------------------------------------------------------------------*/
N/*
N * @file     ISD0xx.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N *           for ISD91XX CM0 Device Series
N * @date     5. April 2011
N *
N ------------------------------------------------------------------------------------------------*/
N#ifndef __ISD9xx_H__
N#define __ISD9xx_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif 
N#if 0
S} /* Fool Emacs into not indenting things. */
N#endif
N/** @addtogroup ISD91XX_Definitions ISD91XX Definitions
N    This file defines all structures and symbols for ISD91XX:
N    - registers and bitfields
N    - peripheral base address
N    - peripheral ID
N    - Peripheral definitions
N    @{
N*/
N/******************************************************************************/
N/*                Processor and Core Peripherals                              */
N/******************************************************************************/
N/** @addtogroup ISD91XX_CMSIS Device CMSIS Definitions
N    Configuration of the Cortex-M# Processor and Core Peripherals
N    @{
N*/
N/*
N * ==========================================================================
N * ---------- Interrupt Number Definition -----------------------------------
N * ==========================================================================
N */
N 
Ntypedef enum IRQn
N    {
N        /******  Cortex-M0 Processor Exceptions Numbers *************************************************/
N        NonMaskableInt_IRQn       = -14,    /*!< 2 Non Maskable Interrupt                               */
N        HardFault_IRQn		      = -13,    /*!< 3 Cortex-M0 Hard Fault Interrupt                       */
N        SVCall_IRQn               = -5,     /*!< 11 Cortex-M0 SV Call Interrupt                         */
N        PendSV_IRQn               = -2,     /*!< 14 Cortex-M0 Pend SV Interrupt                         */
N        SysTick_IRQn              = -1,     /*!< 15 Cortex-M0 System Tick Interrupt                     */
N        /******  ARMIKMCU Swift specific Interrupt Numbers **********************************************/
N        BOD_IRQn                  = 0,        /*!< 16 Brown Out Detector Device Interrupt               */
N        WDT_IRQn                  = 1,        /*!< 17 Watchdog Timer Device Interrupt                   */   
N        EINT0_IRQn                = 2,        /*!< 18 External Interrupt PB0 Interrupt                    */
N        EINT1_IRQn                = 3,        /*!< 19 External Interrupt PB1 Interrupt                    */
N        GPAB_IRQn                 = 4,        /*!< 20 GPIO Interrupt                                    */  
N        ALC_IRQn                  = 5,        /*!< 21 ALC Interrupt                                     */
N        PWMA_IRQn                 = 6,        /*!< 22 PWM Peripheral Device Interrupt                   */  
N        IRQ7n                     = 7,
N        TMR0_IRQn                 = 8,        /*!< 24 Timer 0 Interrupt                                 */
N        TMR1_IRQn                 = 9,        /*!< 25 Timer 1 Interrupt                                 */
N        IRQ10n                    = 10,
N        IRQ11n                    = 11,
N        UART0_IRQn                = 12,        /*!< 28 UART Device Interrupt                            */    
N        IRQ13n                    = 13,
N        SPI0_IRQn                 = 14,        /*!< 30 SPI Interface Interrupt                          */  
N        IRQ15n                    = 15,
N        IRQ16n                    = 16,
N        IRQ17n                    = 17,
N        I2C0_IRQn                 = 18,        /*!< 34 I2C Interface Interrupt                          */    
N        IRQ19n                    = 19,
N        IRQ20n                    = 20,        
N        TALARM_IRQn               = 21,        /*!< 37 Temperature Alaram Interrupt                     */   
N        IRQ22n                    = 22,
N        IRQ23n                    = 23,
N        IRQ24n                    = 24,
N        ACMP_IRQn                 = 25,        /*!< 41 Analog Comparator Interrupt                      */    
N        PDMA_IRQn                 = 26,        /*!< 42 Peripheral DMA Interrupt                         */
N        I2S_IRQn                  = 27,        /*!< 43 I2S Interface Device Interrupt                   */ 
N        CAPS_IRQn                 = 28,        /*!< 44 CapSense Device Interrupt                        */
N        ADC_IRQn                  = 29,        /*!< 45 Audio ADC Device Interrupt                       */ 
N        IRQ30n                    = 30,
N        RTC_IRQn                  = 31         /*!< 47 Real Time Clock Interrupt                        */
N         
N        /*!< maximum of 32 Interrupts are possible                */
N    } IRQn_Type;
N
N
N/*
N * ==========================================================================
N * ----------- Processor and Core Peripheral Section ------------------------
N * ==========================================================================
N */
N
N/* Configuration of the Cortex-M0 Processor and Core Peripherals */
N#define __MPU_PRESENT           0       /*!< armikcmu does not provide a MPU present or not       */
N#define __NVIC_PRIO_BITS        2       /*!< armikcmu Supports 2 Bits for the Priority Levels     */
N#define __Vendor_SysTickConfig  0       /*!< Set to 1 if different SysTick Config is used         */
N/*@}*/ /* end of group ISD91XX_CMSIS */
N
N#include "core_cm0.h"                   /* Cortex-M0 processor and core peripherals               */
L 1 "..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N#if defined ( __ICCARM__ )                   
X#if 0L                   
S #pragma system_include  /* treat file as system include file for MISRA check */
N#endif
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N#ifndef __CORE_CM0_H_GENERIC
N#define __CORE_CM0_H_GENERIC
N
N
N/** \mainpage CMSIS Cortex-M0
N   
N  This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
N  It consists of:
N 
N     - Cortex-M Core Register Definitions
N     - Cortex-M functions
N     - Cortex-M instructions
N 
N  The CMSIS Cortex-M0 Core Peripheral Access Layer contains C and assembly functions that ease 
N  access to the Cortex-M Core
N */ 
N
N/** \defgroup CMSIS_LintCinfiguration CMSIS Lint Configuration
N  List of Lint messages which will be suppressed and not shown:
N    - not yet checked
N  .
N  Note:  To re-enable a Message, insert a space before 'lint' *
N 
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/** \defgroup CMSIS_core_definitions CMSIS Core Definitions
N  This file defines all structures and symbols for CMSIS core:
N   - CMSIS version number
N   - Cortex-M core 
N   - Cortex-M core Revision Number
N  @{
N */
N
N/*  CMSIS CM0 definitions */
N#define __CM0_CMSIS_VERSION_MAIN  (0x02)                                                       /*!< [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   (0x00)                                                       /*!< [15:0]  CMSIS HAL sub version  */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!< CMSIS HAL version number       */
N
N#define __CORTEX_M                (0x00)                                                       /*!< Cortex core                    */
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
N
N#elif defined ( __ICCARM__ )
S  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler          */
S  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
S
S#elif defined   (  __GNUC__  )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S
S#elif defined   (  __TASKING__  )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
S
N#endif
N
N#include <stdint.h>                      /*!< standard types definitions                      */
L 1 "C:\Keil\ARM\RV31\INC\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 137748 $
N * Checkin $Date: 2008-09-11 17:34:24 +0100 (Thu, 11 Sep 2008) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
L 95 "..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport\core_cm0.h" 2
N#include "core_cmInstr.h"                /*!< Core Instruction Access                         */
L 1 "..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport\core_cmInstr.h" 1
N/**************************************************************************//**
N * @file     core_cmInstr.h
N * @brief    CMSIS Cortex-M Core Instruction Access Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CORE_CMINSTR_H__
N#define __CORE_CMINSTR_H__
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N#if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N/** \brief  No Operation
N
N    No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/** \brief  Wait For Interrupt
N
N    Wait For Interrupt is a hint instruction that suspends execution
N    until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/** \brief  Wait For Event
N
N    Wait For Event is a hint instruction that permits the processor to enter
N    a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/** \brief  Send Event
N
N    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/** \brief  Instruction Synchronization Barrier
N
N    Instruction Synchronization Barrier flushes the pipeline in the processor, 
N    so that all instructions following the ISB are fetched from cache or 
N    memory, after the instruction has been completed.
N */
N#define __ISB()                           __isb(0xF)
N
N
N/** \brief  Data Synchronization Barrier
N
N    This function acts as a special kind of Data Memory Barrier. 
N    It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB()                           __dsb(0xF)
N
N
N/** \brief  Data Memory Barrier
N
N    This function ensures the apparent order of the explicit memory operations before 
N    and after the instruction, without ensuring their completion.
N */
N#define __DMB()                           __dmb(0xF)
N
N
N/** \brief  Reverse byte order (32 bit)
N
N    This function reverses the byte order in integer value.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/** \brief  Reverse byte order (16 bit)
N
N    This function reverses the byte order in two unsigned short values.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#if (__ARMCC_VERSION < 400677)
X#if (410791 < 400677)
Sextern uint32_t __REV16(uint32_t value);
N#else  /* (__ARMCC_VERSION >= 400677)  */
Nstatic __INLINE __ASM uint32_t __REV16(uint32_t value)
Xstatic __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif /* __ARMCC_VERSION  */ 
N
N
N/** \brief  Reverse byte order in signed short value
N
N    This function reverses the byte order in a signed short value with sign extension to integer.
N
N    \param [in]    value  Value to reverse
N    \return               Reversed value
N */
N#if (__ARMCC_VERSION < 400677)
X#if (410791 < 400677)
Sextern int32_t __REVSH(int32_t value);
N#else  /* (__ARMCC_VERSION >= 400677)  */
Nstatic __INLINE __ASM int32_t __REVSH(int32_t value)
Xstatic __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif /* __ARMCC_VERSION  */ 
N
N
N#if       (__CORTEX_M >= 0x03)
X#if       ((0x00) >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S#define __RBIT                            __rbit
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
S#define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
S#define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S#define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S#define __STREXB(value, ptr)              __strex(value, ptr)
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S#define __STREXH(value, ptr)              __strex(value, ptr)
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S#define __STREXW(value, ptr)              __strex(value, ptr)
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
S#if (__ARMCC_VERSION < 400000)
Sextern void __CLREX(void);
S#else  /* (__ARMCC_VERSION >= 400000)  */
S#define __CLREX                           __clrex
S#endif /* __ARMCC_VERSION  */ 
S
S
S/** \brief  Signed Saturate
S
S    This function saturates a signed value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (1..32)
S    \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/** \brief  Unsigned Saturate
S
S    This function saturates an unsigned value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (0..31)
S    \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/** \brief  Count leading zeros
S
S    This function counts the number of leading zeros of a data value.
S
S    \param [in]  value  Value to count the leading zeros
S    \return             number of leading zeros in value
S */
S#define __CLZ                             __clz 
S
N#endif /* (__CORTEX_M >= 0x03) */
N
N
N
N#elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
S/* IAR iccarm specific functions */
S
S#include <intrinsics.h>                     /* IAR Intrinsics   */
S
S#pragma diag_suppress=Pe940
S
S/** \brief  No Operation
S
S    No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S#define __NOP                           __no_operation
S
S
S/** \brief  Wait For Interrupt
S
S    Wait For Interrupt is a hint instruction that suspends execution
S    until one of a number of events occurs.
S */
Sstatic __INLINE  void __WFI(void)
S{
S  __ASM ("wfi");
S}
S
S
S/** \brief  Wait For Event
S
S    Wait For Event is a hint instruction that permits the processor to enter
S    a low-power state until one of a number of events occurs.
S */
Sstatic __INLINE  void __WFE(void)
S{
S  __ASM ("wfe");
S}
S
S
S/** \brief  Send Event
S
S    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
S */
Sstatic __INLINE  void __SEV(void)
S{
S  __ASM ("sev");
S}
S
S
S/* intrinsic     void __ISB(void)            (see intrinsics.h) */
S/* intrinsic     void __DSB(void)            (see intrinsics.h) */
S/* intrinsic     void __DMB(void)            (see intrinsics.h) */
S/* intrinsic uint32_t __REV(uint32_t value)  (see intrinsics.h) */
S/* intrinsic          __SSAT                 (see intrinsics.h) */
S/* intrinsic          __USAT                 (see intrinsics.h) */
S
S
S/** \brief  Reverse byte order (16 bit)
S
S    This function reverses the byte order in two unsigned short values.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
Sstatic uint32_t __REV16(uint32_t value)
S{
S  __ASM("rev16 r0, r0");
S}
S
S
S/* intrinsic uint32_t __REVSH(uint32_t value)  (see intrinsics.h */
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
Sstatic uint32_t __RBIT(uint32_t value)
S{
S  __ASM("rbit r0, r0");
S}
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
Sstatic uint8_t __LDREXB(volatile uint8_t *addr)
S{
S  __ASM("ldrexb r0, [r0]");
S}
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
Sstatic uint16_t __LDREXH(volatile uint16_t *addr)
S{
S  __ASM("ldrexh r0, [r0]");
S}
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S/* intrinsic unsigned long __LDREX(unsigned long *)  (see intrinsics.h) */
Sstatic uint32_t __LDREXW(volatile uint32_t *addr)
S{
S  __ASM("ldrex r0, [r0]");
S}
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
Sstatic uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
S{
S  __ASM("strexb r0, r0, [r1]");
S}
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
Sstatic uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
S{
S  __ASM("strexh r0, r0, [r1]");
S}
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S/* intrinsic unsigned long __STREX(unsigned long, unsigned long)  (see intrinsics.h )*/
Sstatic uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
S{
S  __ASM("strex r0, r0, [r1]");
S}
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
Sstatic __INLINE void __CLREX(void)
S{
S  __ASM ("clrex");
S}
S
S/* intrinsic   unsigned char __CLZ( unsigned long )      (see intrinsics.h) */
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S#pragma diag_default=Pe940
S
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/** \brief  No Operation
S
S    No Operation does nothing. This instruction can be used for code alignment purposes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
S{
S  __ASM volatile ("nop");
S}
S
S
S/** \brief  Wait For Interrupt
S
S    Wait For Interrupt is a hint instruction that suspends execution
S    until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
S{
S  __ASM volatile ("wfi");
S}
S
S
S/** \brief  Wait For Event
S
S    Wait For Event is a hint instruction that permits the processor to enter
S    a low-power state until one of a number of events occurs.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
S{
S  __ASM volatile ("wfe");
S}
S
S
S/** \brief  Send Event
S
S    Send Event is a hint instruction. It causes an event to be signaled to the CPU.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
S{
S  __ASM volatile ("sev");
S}
S
S
S/** \brief  Instruction Synchronization Barrier
S
S    Instruction Synchronization Barrier flushes the pipeline in the processor, 
S    so that all instructions following the ISB are fetched from cache or 
S    memory, after the instruction has been completed.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
S{
S  __ASM volatile ("isb");
S}
S
S
S/** \brief  Data Synchronization Barrier
S
S    This function acts as a special kind of Data Memory Barrier. 
S    It completes when all explicit memory accesses before this instruction complete.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
S{
S  __ASM volatile ("dsb");
S}
S
S
S/** \brief  Data Memory Barrier
S
S    This function ensures the apparent order of the explicit memory operations before 
S    and after the instruction, without ensuring their completion.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
S{
S  __ASM volatile ("dmb");
S}
S
S
S/** \brief  Reverse byte order (32 bit)
S
S    This function reverses the byte order in integer value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S/** \brief  Reverse byte order (16 bit)
S
S    This function reverses the byte order in two unsigned short values.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV16(uint32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S/** \brief  Reverse byte order in signed short value
S
S    This function reverses the byte order in a signed short value with sign extension to integer.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE int32_t __REVSH(int32_t value)
S{
S  uint32_t result;
S  
S  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Reverse bit order of value
S
S    This function reverses the bit order of the given value.
S
S    \param [in]    value  Value to reverse
S    \return               Reversed value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __RBIT(uint32_t value)
S{
S  uint32_t result;
S  
S   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (8 bit)
S
S    This function performs a exclusive LDR command for 8 bit value.
S
S    \param [in]    ptr  Pointer to data
S    \return             value of type uint8_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint8_t __LDREXB(volatile uint8_t *addr)
S{
S    uint8_t result;
S  
S   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (16 bit)
S
S    This function performs a exclusive LDR command for 16 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint16_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint16_t __LDREXH(volatile uint16_t *addr)
S{
S    uint16_t result;
S  
S   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  LDR Exclusive (32 bit)
S
S    This function performs a exclusive LDR command for 32 bit values.
S
S    \param [in]    ptr  Pointer to data
S    \return        value of type uint32_t at (*ptr)
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __LDREXW(volatile uint32_t *addr)
S{
S    uint32_t result;
S  
S   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (8 bit)
S
S    This function performs a exclusive STR command for 8 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (16 bit)
S
S    This function performs a exclusive STR command for 16 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  STR Exclusive (32 bit)
S
S    This function performs a exclusive STR command for 32 bit values.
S
S    \param [in]  value  Value to store
S    \param [in]    ptr  Pointer to location
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
S{
S   uint32_t result;
S  
S   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
S   return(result);
S}
S
S
S/** \brief  Remove the exclusive lock
S
S    This function removes the exclusive lock which is created by LDREX.
S
S */
S__attribute__( ( always_inline ) ) static __INLINE void __CLREX(void)
S{
S  __ASM volatile ("clrex");
S}
S
S
S/** \brief  Signed Saturate
S
S    This function saturates a signed value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (1..32)
S    \return             Saturated value
S */
S#define __SSAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __SSAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Unsigned Saturate
S
S    This function saturates an unsigned value.
S
S    \param [in]  value  Value to be saturated
S    \param [in]    sat  Bit position to saturate to (0..31)
S    \return             Saturated value
S */
S#define __USAT(ARG1,ARG2) \
S({                          \
S  uint32_t __RES, __ARG1 = (ARG1); \
S  __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) ); \
S  __RES; \
S })
X#define __USAT(ARG1,ARG2) ({                            uint32_t __RES, __ARG1 = (ARG1);   __ASM ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) );   __RES;  })
S
S
S/** \brief  Count leading zeros
S
S    This function counts the number of leading zeros of a data value.
S
S    \param [in]  value  Value to count the leading zeros
S    \return             number of leading zeros in value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint8_t __CLZ(uint32_t value)
S{
S  uint8_t result;
S  
S  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
S  return(result);
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S
S
S#elif (defined (__TASKING__)) /*--------------- TASKING Compiler -----------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N#endif /* __CORE_CMINSTR_H__ */
L 96 "..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport\core_cm0.h" 2
N#include "core_cmFunc.h"                 /*!< Core Function Access                            */
L 1 "..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport\core_cmFunc.h" 1
N/**************************************************************************//**
N * @file     core_cmFunc.h
N * @brief    CMSIS Cortex-M Core Function Access Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CORE_CMFUNC_H__
N#define __CORE_CMFUNC_H__
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N#if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N/** \brief  Get Control Register
N
N    This function returns the content of the Control Register.
N
N    \return               Control Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          uint32_t __get_CONTROL(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Control Register
N
N    This function writes the given value to the Control Register.
N
N    \param [in]    control  Control Register value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          void __set_CONTROL(uint32_t control);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get ISPR Register
N
N    This function returns the content of the ISPR Register.
N
N    \return               ISPR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          uint32_t __get_IPSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get APSR Register
N
N    This function returns the content of the APSR Register.
N
N    \return               APSR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          uint32_t __get_APSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get xPSR Register
N
N    This function returns the content of the xPSR Register.
N
N    \return               xPSR Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          uint32_t __get_xPSR(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Process Stack Pointer
N
N    This function returns the current value of the Process Stack Pointer (PSP).
N
N    \return               PSP Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          uint32_t __get_PSP(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Process Stack Pointer
N
N    This function assigns the given value to the Process Stack Pointer (PSP).
N
N    \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          void __set_PSP(uint32_t topOfProcStack);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Main Stack Pointer
N
N    This function returns the current value of the Main Stack Pointer (MSP).
N
N    \return               MSP Register value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          uint32_t __get_MSP(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Main Stack Pointer
N
N    This function assigns the given value to the Main Stack Pointer (MSP).
N
N    \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          void __set_MSP(uint32_t topOfMainStack);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Get Priority Mask
N
N    This function returns the current state of the priority mask bit from the Priority Mask Register.
N
N    \return               Priority Mask value
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          uint32_t __get_PRIMASK(void);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N#endif /*  __ARMCC_VERSION  */ 
N
N
N/** \brief  Set Priority Mask
N
N    This function assigns the given value to the Priority Mask Register.
N
N    \param [in]    priMask  Priority Mask
N */
N#if       (__ARMCC_VERSION <  400000)
X#if       (410791 <  400000)
Sextern          void __set_PRIMASK(uint32_t priMask);
N#else  /* (__ARMCC_VERSION >= 400000) */
Nstatic __INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N#endif /*  __ARMCC_VERSION  */ 
N 
N
N#if       (__CORTEX_M >= 0x03)
X#if       ((0x00) >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/** \brief  Get Base Priority
S
S    This function returns the current value of the Base Priority register.
S
S    \return               Base Priority register value
S */
S#if       (__ARMCC_VERSION <  400000)
Sextern          uint32_t __get_BASEPRI(void);
S#else  /* (__ARMCC_VERSION >= 400000) */
Sstatic __INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S#endif /*  __ARMCC_VERSION  */ 
S
S
S/** \brief  Set Base Priority
S
S    This function assigns the given value to the Base Priority register.
S
S    \param [in]    basePri  Base Priority value to set
S */
S#if       (__ARMCC_VERSION <  400000)
Sextern          void __set_BASEPRI(uint32_t basePri);
S#else  /* (__ARMCC_VERSION >= 400000) */
Sstatic __INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xff);
S}
S#endif /*  __ARMCC_VERSION  */ 
S 
S
S/** \brief  Get Fault Mask
S
S    This function returns the current value of the Fault Mask register.
S
S    \return               Fault Mask register value
S */
S#if       (__ARMCC_VERSION <  400000)
Sextern          uint32_t __get_FAULTMASK(void);
S#else  /* (__ARMCC_VERSION >= 400000) */
Sstatic __INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S#endif /*  __ARMCC_VERSION  */ 
S
S
S/** \brief  Set Fault Mask
S
S    This function assigns the given value to the Fault Mask register.
S
S    \param [in]    faultMask  Fault Mask value to set
S */
S#if       (__ARMCC_VERSION <  400000)
Sextern          void __set_FAULTMASK(uint32_t faultMask);
S#else  /* (__ARMCC_VERSION >= 400000) */
Sstatic __INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & 1);
S}
S#endif /*  __ARMCC_VERSION  */ 
S
N#endif /* (__CORTEX_M >= 0x03) */
N
N
N#if       (__CORTEX_M == 0x04)
X#if       ((0x00) == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
Sstatic __INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
Sstatic __INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#endif
S}
S
N#endif /* (__CORTEX_M == 0x04) */
N
N
N #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
S/* IAR iccarm specific functions */
S
S#if defined (__ICCARM__)
S  #include <intrinsics.h>                     /* IAR Intrinsics   */
S#endif
S
S#pragma diag_suppress=Pe940
S
S/** \brief  Enable IRQ Interrupts
S
S  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S#define __enable_irq                              __enable_interrupt
S
S
S/** \brief  Disable IRQ Interrupts
S
S  This function disables IRQ interrupts by setting the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S#define __disable_irq                             __disable_interrupt
S
S
S/* intrinsic unsigned long __get_CONTROL( void ); (see intrinsic.h) */
S/* intrinsic void __set_CONTROL( unsigned long ); (see intrinsic.h) */
S
S
S/** \brief  Get ISPR Register
S
S    This function returns the content of the ISPR Register.
S
S    \return               ISPR Register value
S */
Sstatic uint32_t __get_IPSR(void)
S{
S  __ASM("mrs r0, ipsr");
S}
S
S
S/** \brief  Get APSR Register
S
S    This function returns the content of the APSR Register.
S
S    \return               APSR Register value
S */
Sstatic uint32_t __get_APSR(void)
S{
S  __ASM("mrs r0, apsr");
S}
S
S
S/** \brief  Get xPSR Register
S
S    This function returns the content of the xPSR Register.
S
S    \return               xPSR Register value
S */
Sstatic uint32_t __get_xPSR(void)
S{
S  __ASM("mrs r0, psr");           // assembler does not know "xpsr"
S}
S
S
S/** \brief  Get Process Stack Pointer
S
S    This function returns the current value of the Process Stack Pointer (PSP).
S
S    \return               PSP Register value
S */
Sstatic uint32_t __get_PSP(void)
S{
S  __ASM("mrs r0, psp");
S}
S 
S
S/** \brief  Set Process Stack Pointer
S
S    This function assigns the given value to the Process Stack Pointer (PSP).
S
S    \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
Sstatic void __set_PSP(uint32_t topOfProcStack)
S{
S  __ASM("msr psp, r0");
S}
S
S
S/** \brief  Get Main Stack Pointer
S
S    This function returns the current value of the Main Stack Pointer (MSP).
S
S    \return               MSP Register value
S */
Sstatic uint32_t __get_MSP(void)
S{
S  __ASM("mrs r0, msp");
S}
S 
S
S/** \brief  Set Main Stack Pointer
S
S    This function assigns the given value to the Main Stack Pointer (MSP).
S
S    \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
Sstatic void __set_MSP(uint32_t topOfMainStack)
S{
S  __ASM("msr msp, r0");
S}
S 
S
S/* intrinsic unsigned long __get_PRIMASK( void ); (see intrinsic.h) */
S/* intrinsic void __set_PRIMASK( unsigned long ); (see intrinsic.h) */
S 
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
Sstatic __INLINE void __enable_fault_irq(void)
S{
S  __ASM ("cpsie f");
S}
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
Sstatic __INLINE void __disable_fault_irq(void)
S{
S  __ASM ("cpsid f");
S}
S
S
S/* intrinsic unsigned long __get_BASEPRI( void );   (see intrinsic.h) */
S/* intrinsic void __set_BASEPRI( unsigned long );   (see intrinsic.h) */
S/* intrinsic unsigned long __get_FAULTMASK( void ); (see intrinsic.h) */
S/* intrinsic void __set_FAULTMASK(unsigned long);   (see intrinsic.h) */
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S#if       (__CORTEX_M == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
Sstatic uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM("vmrs r0, fpscr"); 
S#else
S  return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
Sstatic void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM("vmsr fpscr, r0");
S#endif
S}
S
S#endif /* (__CORTEX_M == 0x04) */
S
S#pragma diag_default=Pe940
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
S/** \brief  Enable IRQ Interrupts
S
S  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
S{
S  __ASM volatile ("cpsie i");
S}
S
S
S/** \brief  Disable IRQ Interrupts
S
S  This function disables IRQ interrupts by setting the I-bit in the CPSR.
S  Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
S{
S  __ASM volatile ("cpsid i");
S}
S
S
S/** \brief  Get Control Register
S
S    This function returns the content of the Control Register.
S
S    \return               Control Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, control" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Control Register
S
S    This function writes the given value to the Control Register.
S
S    \param [in]    control  Control Register value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
S{
S  __ASM volatile ("MSR control, %0" : : "r" (control) );
S}
S
S
S/** \brief  Get ISPR Register
S
S    This function returns the content of the ISPR Register.
S
S    \return               ISPR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get APSR Register
S
S    This function returns the content of the APSR Register.
S
S    \return               APSR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_APSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, apsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get xPSR Register
S
S    This function returns the content of the xPSR Register.
S
S    \return               xPSR Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_xPSR(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Get Process Stack Pointer
S
S    This function returns the current value of the Process Stack Pointer (PSP).
S
S    \return               PSP Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
S  return(result);
S}
S 
S
S/** \brief  Set Process Stack Pointer
S
S    This function assigns the given value to the Process Stack Pointer (PSP).
S
S    \param [in]    topOfProcStack  Process Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_PSP(uint32_t topOfProcStack)
S{
S  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
S}
S
S
S/** \brief  Get Main Stack Pointer
S
S    This function returns the current value of the Main Stack Pointer (MSP).
S
S    \return               MSP Register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
S{
S  register uint32_t result;
S
S  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
S  return(result);
S}
S 
S
S/** \brief  Set Main Stack Pointer
S
S    This function assigns the given value to the Main Stack Pointer (MSP).
S
S    \param [in]    topOfMainStack  Main Stack Pointer value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_MSP(uint32_t topOfMainStack)
S{
S  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
S}
S
S
S/** \brief  Get Priority Mask
S
S    This function returns the current state of the priority mask bit from the Priority Mask Register.
S
S    \return               Priority Mask value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PRIMASK(void)
S{
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, primask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Priority Mask
S
S    This function assigns the given value to the Priority Mask Register.
S
S    \param [in]    priMask  Priority Mask
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_PRIMASK(uint32_t priMask)
S{
S  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
S}
S 
S
S#if       (__CORTEX_M >= 0x03)
S
S/** \brief  Enable FIQ
S
S    This function enables FIQ interrupts by clearing the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __enable_fault_irq(void)
S{
S  __ASM volatile ("cpsie f");
S}
S
S
S/** \brief  Disable FIQ
S
S    This function disables FIQ interrupts by setting the F-bit in the CPSR.
S    Can only be executed in Privileged modes.
S */
S__attribute__( ( always_inline ) ) static __INLINE void __disable_fault_irq(void)
S{
S  __ASM volatile ("cpsid f");
S}
S
S
S/** \brief  Get Base Priority
S
S    This function returns the current value of the Base Priority register.
S
S    \return               Base Priority register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_BASEPRI(void)
S{
S  uint32_t result;
S  
S  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Base Priority
S
S    This function assigns the given value to the Base Priority register.
S
S    \param [in]    basePri  Base Priority value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_BASEPRI(uint32_t value)
S{
S  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
S}
S
S
S/** \brief  Get Fault Mask
S
S    This function returns the current value of the Fault Mask register.
S
S    \return               Fault Mask register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_FAULTMASK(void)
S{
S  uint32_t result;
S  
S  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
S  return(result);
S}
S
S
S/** \brief  Set Fault Mask
S
S    This function assigns the given value to the Fault Mask register.
S
S    \param [in]    faultMask  Fault Mask value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
S}
S
S#endif /* (__CORTEX_M >= 0x03) */
S
S
S#if       (__CORTEX_M == 0x04)
S
S/** \brief  Get FPSCR
S
S    This function returns the current value of the Floating Point Status/Control register.
S
S    \return               Floating Point Status/Control register value
S */
S__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_FPSCR(void)
S{
S#if (__FPU_PRESENT == 1)
S  uint32_t result;
S
S  __ASM volatile ("MRS %0, fpscr" : "=r" (result) );
S  return(result);
S#else
S   return(0);
S#endif
S}
S
S
S/** \brief  Set FPSCR
S
S    This function assigns the given value to the Floating Point Status/Control register.
S
S    \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__attribute__( ( always_inline ) ) static __INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if (__FPU_PRESENT == 1)
S  __ASM volatile ("MSR fpscr, %0" : : "r" (fpscr) );
S#endif
S}
S
S#endif /* (__CORTEX_M == 0x04) */
S
S
S#elif (defined (__TASKING__)) /*--------------- TASKING Compiler -----------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N#endif /* __CORE_CMFUNC_H__ */
L 97 "..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport\core_cm0.h" 2
N
N#endif /* __CORE_CM0_H_GENERIC */
N
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
N#define __CORE_CM0_H_DEPENDANT
N
N/* IO definitions (access restrictions to peripheral registers) */
N#ifdef __cplusplus
S  #define     __I     volatile           /*!< defines 'read only' permissions                 */
N#else
N  #define     __I     volatile const     /*!< defines 'read only' permissions                 */
N#endif
N#define     __O     volatile             /*!< defines 'write only' permissions                */
N#define     __IO    volatile             /*!< defines 'read / write' permissions              */
N
N/*@} end of group CMSIS_core_definitions */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N ******************************************************************************/
N/** \defgroup CMSIS_core_register CMSIS Core Register
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N  - Core Debug Register
N*/
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_CORE CMSIS Core
N  Type definitions for the Cortex-M Core Registers
N  @{
N */
N
N/** \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N#if (__CORTEX_M != 0x04)
X#if ((0x00) != 0x04)
N    uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
N#else
S    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
N#endif
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */ 
N} APSR_Type;
N
N
N/** \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} IPSR_Type;
N
N
N/** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
N#if (__CORTEX_M != 0x04)
X#if ((0x00) != 0x04)
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
N#else
S    uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
N#endif
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
N    uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
N    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} xPSR_Type;
N
N
N/** \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
N    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
N    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
N  } b;                                   /*!< Structure used for bit  access                  */
N  uint32_t w;                            /*!< Type      used for word access                  */
N} CONTROL_Type;
N
N/*@} end of group CMSIS_CORE */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_NVIC CMSIS NVIC
N  Type definitions for the Cortex-M NVIC Registers
N  @{
N */
N
N/** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register           */
X  volatile uint32_t ISER[1];                  
N       uint32_t RESERVED0[31];
N  __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register          */
X  volatile uint32_t ICER[1];                  
N       uint32_t RSERVED1[31];
N  __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register           */
X  volatile uint32_t ISPR[1];                  
N       uint32_t RESERVED2[31];
N  __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register         */
X  volatile uint32_t ICPR[1];                  
N       uint32_t RESERVED3[31];
N       uint32_t RESERVED4[64];
N  __IO uint32_t IPR[8];                  /*!< Offset: 0x3EC (R/W)  Interrupt Priority Register              */
X  volatile uint32_t IPR[8];                   
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_SCB CMSIS SCB
N  Type definitions for the Cortex-M System Control Block Registers
N  @{
N */
N
N/** \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register                                  */
X  volatile const  uint32_t CPUID;                    
N  __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register                      */
X  volatile uint32_t ICSR;                     
N       uint32_t RESERVED0;                                      
N  __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Control Register        */
X  volatile uint32_t AIRCR;                    
N  __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
X  volatile uint32_t SCR;                      
N  __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
X  volatile uint32_t CCR;                      
N       uint32_t RESERVED1;                                      
N  __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED   */
X  volatile uint32_t SHP[2];                   
N  __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
X  volatile uint32_t SHCSR;                    
N       uint32_t RESERVED2[2];                                   
N  __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
X  volatile uint32_t DFSR;                     
N} SCB_Type;                                                
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_SysTick CMSIS SysTick
N  Type definitions for the Cortex-M System Timer Registers
N  @{
N */
N
N/* SysTick constants - copied from \Keil\ARM\RV31\INC\core_cm0.h */
N#define SYSTICK_ENABLE              0                                          /* Config-Bit to start or stop the SysTick Timer                         */
N#define SYSTICK_TICKINT             1                                          /* Config-Bit to enable or disable the SysTick interrupt                 */
N#define SYSTICK_CLKSOURCE           2                                          /* Clocksource has the offset 2 in SysTick Control and Status Register   */
N#define SYSTICK_MAXCOUNT       ((1<<24) -1)                                    /* SysTick MaxCount                                                      */
N
N/** \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                     
N  __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
X  volatile uint32_t LOAD;                     
N  __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
X  volatile uint32_t VAL;                      
N  __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
X  volatile const  uint32_t CALIB;                    
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/** \ingroup  CMSIS_core_register   
N    \defgroup CMSIS_CoreDebug CMSIS Core Debug
N  Type definitions for the Cortex-M Core Debug Registers
N  @{
N */
N
N/** \brief  Structure type to access the Core Debug Register (CoreDebug).
N */
Ntypedef struct
N{
N  __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register    */
X  volatile uint32_t DHCSR;                    
N  __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register        */
X  volatile  uint32_t DCRSR;                    
N  __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register            */
X  volatile uint32_t DCRDR;                    
N  __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                    
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register */
N#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register */
N#define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< CoreDebug DEMCR: DWTENA Position */
N#define CoreDebug_DEMCR_DWTENA_Msk         (1UL << CoreDebug_DEMCR_DWTENA_Pos)            /*!< CoreDebug DEMCR: DWTENA Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N
N/*@} end of group CMSIS_CoreDebug */
N
N
N/** \ingroup  CMSIS_core_register   
N  @{
N */
N 
N/* Memory mapping of Cortex-M0 Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address           */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address              */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address                 */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct          */
N#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct      */
N#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct         */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct   */
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N/** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
N  @{
N */
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
N#define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
N#define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
N
N
N/** \brief  Enable External Interrupt
N
N    This function enables a device specific interupt in the NVIC interrupt controller.
N    The interrupt number cannot be a negative value. 
N
N    \param [in]      IRQn  Number of the external interrupt to enable
N */
Nstatic __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
N}
N
N
N/** \brief  Disable External Interrupt
N
N    This function disables a device specific interupt in the NVIC interrupt controller.
N    The interrupt number cannot be a negative value. 
N
N    \param [in]      IRQn  Number of the external interrupt to disable
N */
Nstatic __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
N}
N
N
N/** \brief  Get Pending Interrupt
N
N    This function reads the pending register in the NVIC and returns the pending bit
N    for the specified interrupt. 
N
N    \param [in]      IRQn  Number of the interrupt for get pending
N    \return             0  Interrupt status is not pending
N    \return             1  Interrupt status is pending
N */
Nstatic __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
X  return((uint32_t) ((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
N}
N
N
N/** \brief  Set Pending Interrupt
N
N    This function sets the pending bit for the specified interrupt. 
N    The interrupt number cannot be a negative value.
N
N    \param [in]      IRQn  Number of the interrupt for set pending
N */
Nstatic __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
N}
N
N
N/** \brief  Clear Pending Interrupt
N
N    This function clears the pending bit for the specified interrupt. 
N    The interrupt number cannot be a negative value.
N
N    \param [in]      IRQn  Number of the interrupt for clear pending
N */
Nstatic __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
X  ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N
N/** \brief  Set Interrupt Priority
N
N    This function sets the priority for the specified interrupt. The interrupt 
N    number can be positive to specify an external (device specific) 
N    interrupt, or negative to specify an internal (core) interrupt.
N
N    Note: The priority cannot be set for every core interrupt.
N
N    \param [in]      IRQn  Number of the interrupt for set priority
N    \param [in]  priority  Priority to set
N */
Nstatic __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if(IRQn < 0) {
N    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] = (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] & ~(0xFF << ( (((uint32_t)(IRQn) ) & 0x03) * 8 ))) | 
N        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
X        (((priority << (8 - 2)) & 0xFF) << ( (((uint32_t)(IRQn) ) & 0x03) * 8 )); }
N  else {
N    NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IPR[( ((uint32_t)(IRQn) >> 2) )] = (((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IPR[( ((uint32_t)(IRQn) >> 2) )] & ~(0xFF << ( (((uint32_t)(IRQn) ) & 0x03) * 8 ))) |
N        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
X        (((priority << (8 - 2)) & 0xFF) << ( (((uint32_t)(IRQn) ) & 0x03) * 8 )); }
N}
N
N
N/** \brief  Get Interrupt Priority
N
N    This function reads the priority for the specified interrupt. The interrupt 
N    number can be positive to specify an external (device specific) 
N    interrupt, or negative to specify an internal (core) interrupt.
N
N    The returned priority value is automatically aligned to the implemented
N    priority bits of the microcontroller.
N
N    \param [in]   IRQn  Number of the interrupt for get priority
N    \return             Interrupt Priority
N */
Nstatic __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if(IRQn < 0) {
N    return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M0 system interrupts */
X    return((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->SHP[( ((((uint32_t)(IRQn) & 0x0F)-8) >> 2) )] >> ( (((uint32_t)(IRQn) ) & 0x03) * 8 ) ) >> (8 - 2)));  }  
N  else {
N    return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
X    return((uint32_t)((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL))->IPR[( ((uint32_t)(IRQn) >> 2) )] >> ( (((uint32_t)(IRQn) ) & 0x03) * 8 ) ) >> (8 - 2)));  }  
N}
N
N
N/** \brief  System Reset
N
N    This function initiate a system reset request to reset the MCU.
N */
Nstatic __INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  __DSB();                                                     /* Ensure all outstanding memory accesses included
X  __dsb(0xF);                                                     
N                                                                  buffered write are completed before reset */              
N  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL))->AIRCR  = ((0x5FA << 16)      | 
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2));
N  __DSB();                                                     /* Ensure completion of memory access */              
X  __dsb(0xF);                                                                    
N  while(1);                                                    /* wait until reset */
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/** \ingroup  CMSIS_Core_FunctionInterface   
N    \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
N  @{
N */
N
N#if (__Vendor_SysTickConfig == 0)
X#if (0 == 0)
N
N/** \brief  System Tick Configuration
N
N    This function initialises the system tick timer and its interrupt and start the system tick timer.
N    Counter is in free running mode to generate periodical interrupts.
N
N    \param [in]  ticks  Number of ticks between two interrupts
N    \return          0  Function succeeded
N    \return          1  Function failed
N */
Nstatic __INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{ 
N  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
X  if (ticks > (0xFFFFFFUL << 0))  return (1);             
N                                                               
N  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->LOAD  = (ticks & (0xFFFFFFUL << 0)) - 1;       
N  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
X  NVIC_SetPriority (SysTick_IRQn, (1<<2) - 1);   
N  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->VAL   = 0;                                           
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL))->CTRL  = (1UL << 2) | 
N                   SysTick_CTRL_TICKINT_Msk   | 
X                   (1UL << 1)   | 
N                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL << 0);                     
N  return (0);                                                  /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
N
N#ifdef __cplusplus
S}
N#endif
N
N/*lint -restore */
L 102 "..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx\ISD9xx.h" 2
N#include "system_ISD9xx.h"              /* ISD9xx System include file                             */
L 1 "..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx\system_ISD9xx.h" 1
N/**************************************************************************//**
N * @file     system_ARMCM0.h
N * @brief    CMSIS Cortex-M0 Device System Header File
N *           for CM0 Device Series
N * @version  V1.03
N * @date     24. September 2010
N *
N * @note
N * Copyright (C) 2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __SYSTEM_ARMCM0_H
N#define __SYSTEM_ARMCM0_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N/* SysTick constants */
N#define SYSTICK_ENABLE              0                                          /* Config-Bit to start or stop the SysTick Timer                         */
N#define SYSTICK_TICKINT             1                                          /* Config-Bit to enable or disable the SysTick interrupt                 */
N#define SYSTICK_CLKSOURCE           2                                          /* Clocksource has the offset 2 in SysTick Control and Status Register   */
N#define SYSTICK_MAXCOUNT       ((1<<24) -1)                                    /* SysTick MaxCount    */  
N
N
Nextern uint32_t SystemCoreClock;     /*!< System Clock Frequency (Core Clock)  */
N
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *         Initialize the System and update the SystemCoreClock variable.
N */
Nextern void SystemInit (void);
N
N/**
N * Update SystemCoreClock variable
N *
N * @param  none
N * @return none
N *
N * @brief  Updates the SystemCoreClock with current core Clock 
N *         retrieved from cpu registers.
N */
Nextern void SystemCoreClockUpdate (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __SYSTEM_ARMCM0_H */
L 103 "..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx\ISD9xx.h" 2
N#include "System\SysInfra.h"    
L 1 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\System\SysInfra.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                             */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N
N
N#ifndef __SYSINFRA_H__
N#define __SYSINFRA_H__
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Includes of system headers                                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#include "ModuleID.h"
L 1 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\System\ModuleID.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright (c) Nuvoton Technology Corp. All rights reserved.                                             */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#ifndef __MODULE_ID_H__
N#define __MODULE_ID_H__
N
N
Ntypedef enum
N{
N	/* Module ID valid range: 0 ~ 255 */
N	
N	/* Driver: Module ID					Module Name */
N	MODULE_ID_DRVPROTECT		= 0,		/* DrvProtect */
N
N	MODULE_ID_DRVADC			= 2,		/* DrvADC  */
N	MODULE_ID_DRVAIC			= 4,		/* DrvAIC  */
N	MODULE_ID_DRVAPU			= 6,		/* DrvAPU  */
N	MODULE_ID_DRVAUDIOADC		= 8,		/* DrvAudioADC */
N	MODULE_ID_DRVACMP   		= 9,		/* DrvACMP */
N	MODULE_ID_DRVCACHE			= 10,		/* DrvCache	*/
N	MODULE_ID_DRVCAN			= 11,		/* DrvCAN */
N	MODULE_ID_DRVEBI			= 12,		/* DrvEBI */
N	MODULE_ID_DRVEDMA			= 13,		/* DrvEDMA */
N	MODULE_ID_DRVGDMA			= 14,		/* DrvGDMA */
N	MODULE_ID_DRVFSC			= 15,		/* DrvFSC */
N	MODULE_ID_DRVGE				= 16,		/* DrvGE  */
N	MODULE_ID_DRVFMC			= 17,		/* DrvFMC */
N	MODULE_ID_DRVGPIO			= 18,		/* DrvGPIO */
N	MODULE_ID_DRVOSC			= 19,		/* DrvOSC */
N	
N	MODULE_ID_DRVGPU			= 20,		/* DrvGPU */
N	MODULE_ID_DRVI2C			= 22,		/* DrvI2C (S/W I2C for Non-UL; H/W I2C for UL) */
N	MODULE_ID_DRVI2S			= 24,		/* DrvI2S */
N	MODULE_ID_DRVI2SM			= 26,		/* DrvI2SM	*/
N	MODULE_ID_DRVMPU			= 28,		/* DrvMPU */
N	MODULE_ID_DRVNAND			= 30,		/* DrvNAND */
N	MODULE_ID_DRVNOR			= 32,		/* DrvNOR */
N	MODULE_ID_DRVPDMA     		= 33,       /* DrvPDMA */
N	MODULE_ID_DRVPWM			= 34,		/* DrvPWM */
N	MODULE_ID_DRVPS2			= 35,		/* DrvPS2 */
N	MODULE_ID_DRVRTC			= 36,		/* DrvRTC */
N	MODULE_ID_DRVSDCARD			= 38,		/* DrvSDCard */
N	MODULE_ID_DRVSIO			= 39,		/* DrvSerialIO */
N
N	MODULE_ID_DRVSPI			= 40,		/* DrvSPI */
N	MODULE_ID_DRVSPIMS			= 41,		/* DrvSPIMS	*/
N	MODULE_ID_DRVSPIFLASH		= 42,		/* DrvSPIFlash */
N	MODULE_ID_DRVSPIM			= 43,		/* DrvSPIM */
N	MODULE_ID_DRVSYS			= 44,		/* DrvSystem */
N	MODULE_ID_DRVSPU			= 45,		/* DrvSPU */
N	MODULE_ID_DRVTIMER			= 46,		/* DrvTimer	*/
N	MODULE_ID_DRVUART			= 48,		/* DrvUART */
N	MODULE_ID_DRVUSB			= 50,		/* DrvUSB */
N	MODULE_ID_DRVUSBH			= 52,		/* DrvUSBH */
N	MODULE_ID_DRVVDMA			= 54,		/* DrvVDMA */
N	MODULE_ID_DRVVIDEOIN		= 56,		/* DrvVideoIn */
N	MODULE_ID_DRVVPOST			= 58,		/* DrvVPOST	*/
N
N	MODULE_ID_DRVVRAM			= 60,		/* DrvVRAM	*/
N	MODULE_ID_DRVW55U02			= 62,		/* DrvW55U02 */
N	MODULE_ID_DRVI2CH			= 64,		/* DrvI2CH (H/W I2C for Non-UL) */
N	MODULE_ID_DRVWDT			= 66,		/* DrvWDT  */
N	MODULE_ID_DRVJPEG			= 68,		/* DrvJPEG */
N	
N	MODULE_ID_DRVZEROG			= 70,		/* DrvZeroG	 */
N	MODULE_ID_DRVSI2C			= 71,		/* DrvSI2C (S/W I2C for Non-UL) */
N
N	/* Audio: Module ID						Module Name */
N	MODULE_ID_AEC				= 81,		/* AEC	*/
N	MODULE_ID_BEATDET			= 82,		/* BeatDetection */
N	MODULE_ID_SNDEFF			= 83,		/* SoundEffect	*/
N	MODULE_ID_AUDIOSYN			= 84,		/* AudioSynthesizer */
N	MODULE_ID_G726ADPCM			= 85,		/* G726ADPCM  */
N	MODULE_ID_IMAADPCM			= 86,		/* IMAAdpcmCodec */
N	MODULE_ID_MP3DEC			= 88,		/* MP3Decoder */
N	MODULE_ID_PITCHCHANGE		= 90,		/* PitchChanger	*/
N	MODULE_ID_WAVFILEUTIL		= 92,		/* WavFileUtil */
N	MODULE_ID_WMADEC			= 96,		/* WMADecoder  */
N	MODULE_ID_WMADECDRM			= 98,		/* WMADecoderWithDrm */
N	MODULE_ID_AUDIOCTRL			= 100,		/* AudioCtrl */
N	MODULE_ID_EQ				= 106,		/* Equalizer */
N	MODULE_ID_OGGDEC			= 110,		/* OggDecoder */
N	MODULE_ID_MP3ENC			= 112,		/* MP3Encoder */
N	MODULE_ID_UADEC				= 114,		/* UltraAudioDec */
N	MODULE_ID_ULSPEECHDEC		= 115,		/* UltraLowSpeechDec */
N	MODULE_ID_USPEECHDEC		= 116,		/* UltraSpeechDec */
N	MODULE_ID_SPEECHRECOG		= 118,		/* SpeechRecog */
N
N	/* File System: Module ID				Module Name */
N	MODULE_ID_FS				= 120,		/* FileSystem */
N	
N	/* Flash Lite: Module ID				Module Name */
N	MODULE_ID_FL				= 128,		/* FlashLite */
N	
N	/* Communication: Module ID				Module Name */
N	MODULE_ID_KEYPAD			= 130,		/* Keypad  */
N	MODULE_ID_LWIP				= 132,		/* LwIP	  */
N	MODULE_ID_WLANMGR			= 134,		/* WLanMgr	*/
N	MODULE_ID_HTTPD				= 136,		/* HTTPD   */
N	MODULE_ID_VIRTUALCOM		= 139,		/* VirtualCOM */
N
N	/* Graphics: Module ID					Module Name */
N	MODULE_ID_GFXRESLDR			= 140,		/* GraphicsResLoader */
N	MODULE_ID_GFXLIB			= 141,		/* GraphicsLib */
N	MODULE_ID_IMGPROC			= 142,		/* ImageProcess	*/
N	MODULE_ID_JPEG				= 144,		/* JPEGCodec */
N	MODULE_ID_PNGDEC			= 146,		/* PNGCodec	*/
N	MODULE_ID_BARCODE2D			= 148,		/* BarCode2D */	 
N	MODULE_ID_PTNRECOG			= 150,		/* PtnRecog	*/
N	MODULE_ID_MOTIONDET			= 152,		/* MotionDection */
N	
N	/* Storage: Module ID					Module Name	*/
N	MODULE_ID_STORIF			= 160,		/* StorageInterface */
N	MODULE_ID_SDCARD			= 161,		/* SDCard */
N	MODULE_ID_SYSNAND			= 162,		/* SysNand */
N	MODULE_ID_SPIFLASH			= 163,		/* SPIFlash	*/
N	MODULE_ID_WTRIF				= 164,		/* WriterInterface */
N	MODULE_ID_NORFLASH			= 165,		/* NORFlash	*/
N	MODULE_ID_SYSNANDLITE		= 166,		/* SysNandLite */
N	
N	/* System: Module ID					Module Name */
N	MODULE_ID_INTMGR			= 180,		/* InterruptManager */
N	MODULE_ID_BLKLDR			= 181,		/* BlockLoader */
N	MODULE_ID_MEMMGR			= 182,		/* MemoryManager */
N	MODULE_ID_EVTMGR			= 183,		/* EventManager	*/
N	MODULE_ID_PROF				= 184,		/* Profiling  */
N	MODULE_ID_PROGLDR			= 186,		/* ProgramLoader */
N	MODULE_ID_SYSINFRA			= 188,		/* SysInfra	*/
N	MODULE_ID_TIMERCTRL			= 190,		/* TimerCtrl */
N	MODULE_ID_TIMEUTIL			= 192,		/* TimeUtil	*/
N	MODULE_ID_CONPROGLDR		= 194,		/* ConsoleProgramLoader */
N	
N	/* USB: Module ID						Module Name */
N	MODULE_ID_USBCOREH			= 78,		/* USBCoreH	*/
N	MODULE_ID_HID				= 220,		/* HID */
N	MODULE_ID_MASSSTOR			= 222,		/* MassStor */
N	MODULE_ID_MASSSTORHID		= 224,		/* MassStorHID */
N	MODULE_ID_MASSSTORLITE		= 226,		/* MassStorLite	*/
N	MODULE_ID_MTP				= 230,		/* MTP */
N	MODULE_ID_USBINFRA			= 232,		/* USBInfra */
N	MODULE_ID_UAC				= 234,		/* UAC */
N	MODULE_ID_UAVC				= 236,		/* UAVC	*/
N	MODULE_ID_UVC				= 238,		/* UVC */
N	MODULE_ID_MASSSTORH			= 252,		/* MassStorH */
N	MODULE_ID_HIDH				= 254,		/* HIDH	*/
N
N	/* Security: Module ID					Module Name */
N	MODULE_ID_MSDRMPD			= 228,		/* MsDrmPd */
N	
N	/* Video: Module ID						Module Name */
N	MODULE_ID_AVICODEC			= 240,		/* AVICodec	 */
N	MODULE_ID_MJPEG				= 242,		/* MJpegCodec  */
N	MODULE_ID_WIVICORE			= 244,		/* WiViCore	*/
N	MODULE_ID_WIVI				= 246,		/* WiViDec */	
N	MODULE_ID_AVCTRL			= 248,		/* AVControl */
N	MODULE_ID_AVIUTIL			= 250,		/* AVIUtility */
N	
N	/* Wireless Toy							Module Name */
N	MODULE_ID_WTCHAN			= 168,		/* WTChannel */
N	MODULE_ID_WTCMDSERV			= 170,		/* WTCMDService */
N	MODULE_ID_WTDISPLAY			= 172,		/* WTDisplay */
N	MODULE_ID_WTMEDIA			= 174,		/* WTMedia */
N	MODULE_ID_WTSYS				= 176,		/* WTSystem	 */
N	MODULE_ID_WTTRANS			= 178,		/* WTTransport */
N	/* ISD9160   							Module Name */
N	MODULE_ID_DRVCRC  				= 179,		/* CRC Generater*/
N	
N	// Module ID valid range: 0 ~ 255	
N} E_SYSINFRA_MODULE_ID;
N
N
N#endif /* __MODULE_ID_H__ */
L 15 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\System\SysInfra.h" 2
N#include "stdint.h"
N#include "core_cm0.h"
L 1 "..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V2.01
N * @date     06. December 2010
N *
N * @note
N * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N#if defined ( __ICCARM__ )                   
X#if 0L                   
S #pragma system_include  /* treat file as system include file for MISRA check */
N#endif
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N#ifndef __CORE_CM0_H_GENERIC
S#define __CORE_CM0_H_GENERIC
S
S
S/** \mainpage CMSIS Cortex-M0
S   
S  This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
S  It consists of:
S 
S     - Cortex-M Core Register Definitions
S     - Cortex-M functions
S     - Cortex-M instructions
S 
S  The CMSIS Cortex-M0 Core Peripheral Access Layer contains C and assembly functions that ease 
S  access to the Cortex-M Core
S */ 
S
S/** \defgroup CMSIS_LintCinfiguration CMSIS Lint Configuration
S  List of Lint messages which will be suppressed and not shown:
S    - not yet checked
S  .
S  Note:  To re-enable a Message, insert a space before 'lint' *
S 
S */
S
S
S/*******************************************************************************
S *                 CMSIS definitions
S ******************************************************************************/
S/** \defgroup CMSIS_core_definitions CMSIS Core Definitions
S  This file defines all structures and symbols for CMSIS core:
S   - CMSIS version number
S   - Cortex-M core 
S   - Cortex-M core Revision Number
S  @{
S */
S
S/*  CMSIS CM0 definitions */
S#define __CM0_CMSIS_VERSION_MAIN  (0x02)                                                       /*!< [31:16] CMSIS HAL main version */
S#define __CM0_CMSIS_VERSION_SUB   (0x00)                                                       /*!< [15:0]  CMSIS HAL sub version  */
S#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!< CMSIS HAL version number       */
S
S#define __CORTEX_M                (0x00)                                                       /*!< Cortex core                    */
S
S
S#if defined ( __CC_ARM   )
S  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
S  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
S
S#elif defined ( __ICCARM__ )
S  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler          */
S  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
S
S#elif defined   (  __GNUC__  )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S
S#elif defined   (  __TASKING__  )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler      */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler   */
S
S#endif
S
S#include <stdint.h>                      /*!< standard types definitions                      */
S#include "core_cmInstr.h"                /*!< Core Instruction Access                         */
S#include "core_cmFunc.h"                 /*!< Core Function Access                            */
S
N#endif /* __CORE_CM0_H_GENERIC */
N
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
S#define __CORE_CM0_H_DEPENDANT
S
S/* IO definitions (access restrictions to peripheral registers) */
S#ifdef __cplusplus
S  #define     __I     volatile           /*!< defines 'read only' permissions                 */
S#else
S  #define     __I     volatile const     /*!< defines 'read only' permissions                 */
S#endif
S#define     __O     volatile             /*!< defines 'write only' permissions                */
S#define     __IO    volatile             /*!< defines 'read / write' permissions              */
S
S/*@} end of group CMSIS_core_definitions */
S
S
S
S/*******************************************************************************
S *                 Register Abstraction
S ******************************************************************************/
S/** \defgroup CMSIS_core_register CMSIS Core Register
S  Core Register contain:
S  - Core Register
S  - Core NVIC Register
S  - Core SCB Register
S  - Core SysTick Register
S  - Core Debug Register
S*/
S
S/** \ingroup  CMSIS_core_register   
S    \defgroup CMSIS_CORE CMSIS Core
S  Type definitions for the Cortex-M Core Registers
S  @{
S */
S
S/** \brief  Union type to access the Application Program Status Register (APSR).
S */
Stypedef union
S{
S  struct
S  {
S#if (__CORTEX_M != 0x04)
S    uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
S#else
S    uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
S#endif
S    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
S    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
S    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
S    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
S    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
S  } b;                                   /*!< Structure used for bit  access                  */
S  uint32_t w;                            /*!< Type      used for word access                  */ 
S} APSR_Type;
S
S
S/** \brief  Union type to access the Interrupt Program Status Register (IPSR).
S */
Stypedef union
S{
S  struct
S  {
S    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
S    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
S  } b;                                   /*!< Structure used for bit  access                  */
S  uint32_t w;                            /*!< Type      used for word access                  */
S} IPSR_Type;
S
S
S/** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
S */
Stypedef union
S{
S  struct
S  {
S    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
S#if (__CORTEX_M != 0x04)
S    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
S#else
S    uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
S    uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
S    uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
S#endif
S    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
S    uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
S    uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
S    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
S    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
S    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
S    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
S  } b;                                   /*!< Structure used for bit  access                  */
S  uint32_t w;                            /*!< Type      used for word access                  */
S} xPSR_Type;
S
S
S/** \brief  Union type to access the Control Registers (CONTROL).
S */
Stypedef union
S{
S  struct
S  {
S    uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
S    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
S    uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
S    uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
S  } b;                                   /*!< Structure used for bit  access                  */
S  uint32_t w;                            /*!< Type      used for word access                  */
S} CONTROL_Type;
S
S/*@} end of group CMSIS_CORE */
S
S
S/** \ingroup  CMSIS_core_register   
S    \defgroup CMSIS_NVIC CMSIS NVIC
S  Type definitions for the Cortex-M NVIC Registers
S  @{
S */
S
S/** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
S */
Stypedef struct
S{
S  __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register           */
S       uint32_t RESERVED0[31];
S  __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register          */
S       uint32_t RSERVED1[31];
S  __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register           */
S       uint32_t RESERVED2[31];
S  __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register         */
S       uint32_t RESERVED3[31];
S       uint32_t RESERVED4[64];
S  __IO uint32_t IPR[8];                  /*!< Offset: 0x3EC (R/W)  Interrupt Priority Register              */
S}  NVIC_Type;
S
S/*@} end of group CMSIS_NVIC */
S
S
S/** \ingroup  CMSIS_core_register   
S    \defgroup CMSIS_SCB CMSIS SCB
S  Type definitions for the Cortex-M System Control Block Registers
S  @{
S */
S
S/** \brief  Structure type to access the System Control Block (SCB).
S */
Stypedef struct
S{
S  __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register                                  */
S  __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register                      */
S       uint32_t RESERVED0;                                      
S  __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Control Register        */
S  __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register                               */
S  __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register                        */
S       uint32_t RESERVED1;                                      
S  __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED   */
S  __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State Register             */
S       uint32_t RESERVED2[2];                                   
S  __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register                           */
S} SCB_Type;                                                
S
S/* SCB CPUID Register Definitions */
S#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
S#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
S
S#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
S#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
S
S#define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB CPUID: ARCHITECTURE Position */
S#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
S
S#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
S#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
S
S#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
S#define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
S
S/* SCB Interrupt Control State Register Definitions */
S#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
S#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
S
S#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
S#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
S
S#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
S#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
S
S#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
S#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
S
S#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
S#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
S
S#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
S#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
S
S#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
S#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
S
S#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
S#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
S
S#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
S#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
S
S/* SCB Application Interrupt and Reset Control Register Definitions */
S#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
S#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
S
S#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
S#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
S
S#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
S#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
S
S#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
S#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
S
S#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
S#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
S
S/* SCB System Control Register Definitions */
S#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
S#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
S
S#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
S#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
S
S#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
S#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
S
S/* SCB Configuration Control Register Definitions */
S#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
S#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
S
S#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
S#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
S
S/* SCB System Handler Control and State Register Definitions */
S#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
S#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
S
S/* SCB Debug Fault Status Register Definitions */
S#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
S#define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
S
S#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
S#define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
S
S#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
S#define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
S
S#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
S#define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
S
S#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
S#define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
S
S/*@} end of group CMSIS_SCB */
S
S
S/** \ingroup  CMSIS_core_register   
S    \defgroup CMSIS_SysTick CMSIS SysTick
S  Type definitions for the Cortex-M System Timer Registers
S  @{
S */
S
S/* SysTick constants - copied from \Keil\ARM\RV31\INC\core_cm0.h */
S#define SYSTICK_ENABLE              0                                          /* Config-Bit to start or stop the SysTick Timer                         */
S#define SYSTICK_TICKINT             1                                          /* Config-Bit to enable or disable the SysTick interrupt                 */
S#define SYSTICK_CLKSOURCE           2                                          /* Clocksource has the offset 2 in SysTick Control and Status Register   */
S#define SYSTICK_MAXCOUNT       ((1<<24) -1)                                    /* SysTick MaxCount                                                      */
S
S/** \brief  Structure type to access the System Timer (SysTick).
S */
Stypedef struct
S{
S  __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
S  __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register       */
S  __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register      */
S  __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register        */
S} SysTick_Type;
S
S/* SysTick Control / Status Register Definitions */
S#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
S#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
S
S#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
S#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
S
S#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
S#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
S
S#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
S#define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
S
S/* SysTick Reload Register Definitions */
S#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
S#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
S
S/* SysTick Current Register Definitions */
S#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
S#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
S
S/* SysTick Calibration Register Definitions */
S#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
S#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
S
S#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
S#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
S
S#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
S#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */
S
S/*@} end of group CMSIS_SysTick */
S
S
S/** \ingroup  CMSIS_core_register   
S    \defgroup CMSIS_CoreDebug CMSIS Core Debug
S  Type definitions for the Cortex-M Core Debug Registers
S  @{
S */
S
S/** \brief  Structure type to access the Core Debug Register (CoreDebug).
S */
Stypedef struct
S{
S  __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register    */
S  __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register        */
S  __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register            */
S  __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
S} CoreDebug_Type;
S
S/* Debug Halting Control and Status Register */
S#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
S#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
S
S#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
S#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
S
S#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
S#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
S
S#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
S#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
S
S#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
S#define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
S
S#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
S#define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
S
S#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
S#define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
S
S#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
S#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
S
S#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
S#define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
S
S#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
S#define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
S
S#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
S#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
S
S/* Debug Core Register Selector Register */
S#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
S#define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
S
S#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
S#define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
S
S/* Debug Exception and Monitor Control Register */
S#define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< CoreDebug DEMCR: DWTENA Position */
S#define CoreDebug_DEMCR_DWTENA_Msk         (1UL << CoreDebug_DEMCR_DWTENA_Pos)            /*!< CoreDebug DEMCR: DWTENA Mask */
S
S#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
S#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
S
S#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
S#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
S
S/*@} end of group CMSIS_CoreDebug */
S
S
S/** \ingroup  CMSIS_core_register   
S  @{
S */
S 
S/* Memory mapping of Cortex-M0 Hardware */
S#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
S#define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address           */
S#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address              */
S#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address                 */
S#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
S
S#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct          */
S#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct      */
S#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct         */
S#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct   */
S
S/*@} */
S
S
S
S/*******************************************************************************
S *                Hardware Abstraction Layer
S ******************************************************************************/
S/** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
S  Core Function Interface contains:
S  - Core NVIC Functions
S  - Core SysTick Functions
S  - Core Register Access Functions
S*/
S
S
S
S/* ##########################   NVIC functions  #################################### */
S/** \ingroup  CMSIS_Core_FunctionInterface   
S    \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
S  @{
S */
S
S/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
S/* The following MACROS handle generation of the register offset and byte masks */
S#define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
S#define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
S#define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
S
S
S/** \brief  Enable External Interrupt
S
S    This function enables a device specific interupt in the NVIC interrupt controller.
S    The interrupt number cannot be a negative value. 
S
S    \param [in]      IRQn  Number of the external interrupt to enable
S */
Sstatic __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
S{
S  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
S}
S
S
S/** \brief  Disable External Interrupt
S
S    This function disables a device specific interupt in the NVIC interrupt controller.
S    The interrupt number cannot be a negative value. 
S
S    \param [in]      IRQn  Number of the external interrupt to disable
S */
Sstatic __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
S{
S  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
S}
S
S
S/** \brief  Get Pending Interrupt
S
S    This function reads the pending register in the NVIC and returns the pending bit
S    for the specified interrupt. 
S
S    \param [in]      IRQn  Number of the interrupt for get pending
S    \return             0  Interrupt status is not pending
S    \return             1  Interrupt status is pending
S */
Sstatic __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
S{
S  return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
S}
S
S
S/** \brief  Set Pending Interrupt
S
S    This function sets the pending bit for the specified interrupt. 
S    The interrupt number cannot be a negative value.
S
S    \param [in]      IRQn  Number of the interrupt for set pending
S */
Sstatic __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
S{
S  NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
S}
S
S
S/** \brief  Clear Pending Interrupt
S
S    This function clears the pending bit for the specified interrupt. 
S    The interrupt number cannot be a negative value.
S
S    \param [in]      IRQn  Number of the interrupt for clear pending
S */
Sstatic __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
S{
S  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
S}
S
S
S/** \brief  Set Interrupt Priority
S
S    This function sets the priority for the specified interrupt. The interrupt 
S    number can be positive to specify an external (device specific) 
S    interrupt, or negative to specify an internal (core) interrupt.
S
S    Note: The priority cannot be set for every core interrupt.
S
S    \param [in]      IRQn  Number of the interrupt for set priority
S    \param [in]  priority  Priority to set
S */
Sstatic __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
S{
S  if(IRQn < 0) {
S    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
S        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
S  else {
S    NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
S        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
S}
S
S
S/** \brief  Get Interrupt Priority
S
S    This function reads the priority for the specified interrupt. The interrupt 
S    number can be positive to specify an external (device specific) 
S    interrupt, or negative to specify an internal (core) interrupt.
S
S    The returned priority value is automatically aligned to the implemented
S    priority bits of the microcontroller.
S
S    \param [in]   IRQn  Number of the interrupt for get priority
S    \return             Interrupt Priority
S */
Sstatic __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
S{
S
S  if(IRQn < 0) {
S    return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M0 system interrupts */
S  else {
S    return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
S}
S
S
S/** \brief  System Reset
S
S    This function initiate a system reset request to reset the MCU.
S */
Sstatic __INLINE void NVIC_SystemReset(void)
S{
S  __DSB();                                                     /* Ensure all outstanding memory accesses included
S                                                                  buffered write are completed before reset */              
S  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
S                 SCB_AIRCR_SYSRESETREQ_Msk);
S  __DSB();                                                     /* Ensure completion of memory access */              
S  while(1);                                                    /* wait until reset */
S}
S
S/*@} end of CMSIS_Core_NVICFunctions */
S
S
S
S/* ##################################    SysTick function  ############################################ */
S/** \ingroup  CMSIS_Core_FunctionInterface   
S    \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
S  @{
S */
S
S#if (__Vendor_SysTickConfig == 0)
S
S/** \brief  System Tick Configuration
S
S    This function initialises the system tick timer and its interrupt and start the system tick timer.
S    Counter is in free running mode to generate periodical interrupts.
S
S    \param [in]  ticks  Number of ticks between two interrupts
S    \return          0  Function succeeded
S    \return          1  Function failed
S */
Sstatic __INLINE uint32_t SysTick_Config(uint32_t ticks)
S{ 
S  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
S                                                               
S  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
S  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
S  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
S  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
S                   SysTick_CTRL_TICKINT_Msk   | 
S                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
S  return (0);                                                  /* Function successful */
S}
S
S#endif
S
S/*@} end of CMSIS_Core_SysTickFunctions */
S
S
S
S
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
N
N#ifdef __cplusplus
S}
N#endif
N
N/*lint -restore */
L 17 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\System\SysInfra.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Define Version number								                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#define SYSINFRA_MAJOR_NUM		1
N#define SYSINFRA_MINOR_NUM		00
N#define SYSINFRA_BUILD_NUM		1
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro, type and constant definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define an error code composed of error bit, module ID, and error ID. */
N#define _SYSINFRA_ERRCODE(IS_ERROR, MODULE_ID_VALUE, ERROR_ID)      (((IS_ERROR) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_VALUE) & 0xFF) | ((IS_ERROR) ? 0x100 : 0x00)) << 7) | ((ERROR_ID) & 0x7F))
N#define _SYSINFRA_ERRCODE_DEF(MODULE_ID, ERROR_NAME, IS_ERROR, MODULE_ID_VALUE, ERROR_ID) enum {E_##MODULE_ID##_##ERROR_NAME = ((IS_ERROR) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_VALUE) & 0xFF) | ((IS_ERROR) ? 0x100 : 0x00)) << 7) | ((ERROR_ID) & 0x7F)};
N
N/* Define a module version composed of major number, minor number, and build number. */
N#define _SYSINFRA_VERSION(MAJOR_NUM, MINOR_NUM, BUILD_NUM)          (((MAJOR_NUM) << 16) | ((MINOR_NUM) << 8) | (BUILD_NUM))
N#define _SYSINFRA_VERSION_DEF(MODULE_ID, MAJOR_NUM, MINOR_NUM, BUILD_NUM)	enum {MODULE_ID##_VERSION_NUM = ((MAJOR_NUM) << 16) | ((MINOR_NUM) << 8) | (BUILD_NUM)};
N
N/* Test if this error code means an error by seeing its error bit (BIT31). */
N#define _SYSINFRA_ERRCODE_IS_ERROR(ERROR_CODE)	((ERROR_CODE) < 0)
N/* Extract module ID part of this error code. */
N#define _SYSINFRA_ERRCODE_EXTRACT_MODULE_ID(ERROR_CODE)	(((ERROR_CODE) >> 7) & 0xFF)
N/* Extract error ID part of this error code. */
N#define _SYSINFRA_ERRCODE_EXTRACT_ERROR_ID(ERROR_CODE)	((ERROR_CODE) & 0x7F)
N
N/* Define module version number.*/
N#define SYSINFRA_VERSION_NUM    _SYSINFRA_VERSION(SYSINFRA_MAJOR_NUM, SYSINFRA_MINOR_NUM, SYSINFRA_BUILD_NUM)
N
N#define E_SUCCESS		0
N#define S_OK			E_SUCCESS
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Define Error Code									                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N/* #define Error Code */
N//E_SYSINFRA_NOT_DEFINE					Un-defined error code	
N//E_SYSINFRA_NULL_POINTER				A NULL pointer is passed as an argument
N//E_SYSINFRA_BUFFER_OVERRUN				Buffer size is not enough
N
N#define E_SYSINFRA_NOT_DEFINE       _SYSINFRA_ERRCODE(TRUE, MODULE_ID_SYSINFRA, 0)
N#define E_SYSINFRA_NULL_POINTER     _SYSINFRA_ERRCODE(TRUE, MODULE_ID_SYSINFRA, 1)
N#define E_SYSINFRA_BUFFER_OVERRUN   _SYSINFRA_ERRCODE(TRUE, MODULE_ID_SYSINFRA, 2)
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __SYSINFRA_H__
N
N
N
L 104 "..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx\ISD9xx.h" 2
N
N
N     
N/**
N * Initialize the system clock
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system
N *         Initialize the Oscillator and update the SystemFrequency variable
N */
Nextern void SystemInit (void);
N
N
N/******************************************************************************/
N/*                Device Specific Peripheral registers structures             */
N/******************************************************************************/
N/** @addtogroup ISD91XX_Peripherals ISD91XX Peripherals
N    ISD91XX Device Specific Peripheral registers structures
N    @{
N*/
N
N/*--------------------- General Purpose Input and Ouptut ---------------------*/
N/** @addtogroup ISD91XX_GPIO ISD91XX GPIO Control Registers (GPIO)
N    @{
N*/
Ntypedef struct
N{
N    __IO uint32_t PMD0:2;
X    volatile uint32_t PMD0:2;
N    __IO uint32_t PMD1:2;
X    volatile uint32_t PMD1:2;
N    __IO uint32_t PMD2:2;
X    volatile uint32_t PMD2:2;
N    __IO uint32_t PMD3:2;
X    volatile uint32_t PMD3:2;
N    __IO uint32_t PMD4:2;
X    volatile uint32_t PMD4:2;
N    __IO uint32_t PMD5:2;
X    volatile uint32_t PMD5:2;
N    __IO uint32_t PMD6:2;
X    volatile uint32_t PMD6:2;
N    __IO uint32_t PMD7:2;
X    volatile uint32_t PMD7:2;
N    __IO uint32_t PMD8:2;
X    volatile uint32_t PMD8:2;
N    __IO uint32_t PMD9:2;
X    volatile uint32_t PMD9:2;
N    __IO uint32_t PMD10:2;
X    volatile uint32_t PMD10:2;
N    __IO uint32_t PMD11:2;
X    volatile uint32_t PMD11:2;
N    __IO uint32_t PMD12:2;
X    volatile uint32_t PMD12:2;
N    __IO uint32_t PMD13:2;
X    volatile uint32_t PMD13:2;
N    __IO uint32_t PMD14:2;
X    volatile uint32_t PMD14:2;
N    __IO uint32_t PMD15:2;
X    volatile uint32_t PMD15:2;
N} GPIO_PMD_T;
N
Ntypedef __IO uint32_t GPIO_INDIS_T;
Xtypedef volatile uint32_t GPIO_INDIS_T;
Ntypedef __IO uint32_t GPIO_DOUT_T;
Xtypedef volatile uint32_t GPIO_DOUT_T;
Ntypedef __IO uint32_t GPIO_DMASK_T;
Xtypedef volatile uint32_t GPIO_DMASK_T;
Ntypedef __IO uint32_t GPIO_PIN_T;
Xtypedef volatile uint32_t GPIO_PIN_T;
Ntypedef __IO uint32_t GPIO_DBEN_T;
Xtypedef volatile uint32_t GPIO_DBEN_T;
Ntypedef __IO uint32_t GPIO_IMD_T;
Xtypedef volatile uint32_t GPIO_IMD_T;
Ntypedef __IO uint32_t GPIO_IEN_T;
Xtypedef volatile uint32_t GPIO_IEN_T;
Ntypedef __IO uint32_t GPIO_ISRC_T;
Xtypedef volatile uint32_t GPIO_ISRC_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DBCLKSEL:4;
X    volatile uint32_t  DBCLKSEL:4;
N    __IO uint32_t  DBCLKSRC:1;
X    volatile uint32_t  DBCLKSRC:1;
N    __IO uint32_t  ICLK_ON:1;
X    volatile uint32_t  ICLK_ON:1;
N    __I  uint32_t  RESERVE:26;    
X    volatile const  uint32_t  RESERVE:26;    
N} GPIO_DBNCECON_T;
N
Ntypedef struct
N{
N    GPIO_PMD_T      PMD;                 /*!< Offset: 0x0000   GPIO Mode Control Register           */  
N    GPIO_INDIS_T    INDIS;               /*!< Offset: 0x0004   GPIO Input Disable Register          */  
N    GPIO_DOUT_T     DOUT;                /*!< Offset: 0x0008   GPIO Data Output Value Register      */  
N    GPIO_DMASK_T    DMASK;               /*!< Offset: 0x000C   GPIO Data Output Write Mask Register */  
N    GPIO_PIN_T      PIN;                 /*!< Offset: 0x0010   GPIO Pin Value Register              */  
N    GPIO_DBEN_T     DBEN;                /*!< Offset: 0x0014   GPIO De-bounce Enable Register       */  
N    GPIO_IMD_T      IMD;                 /*!< Offset: 0x0018   GPIO Interrupt Mode Control          */  
N    GPIO_IEN_T      IEN;                 /*!< Offset: 0x001C   GPIO Interrupt Enable Control        */     
N    GPIO_ISRC_T     ISRC;                /*!< Offset: 0x0020   GPIO Interrupt Source                */  
N    
N} GPIO_T;
N/*@}*/ /* end of group ISD91XX_GPIO */
N     
N/*------------------------- UART Interface Controller ------------------------*/
N
Ntypedef __IO uint8_t UART_DATA_T;
Xtypedef volatile uint8_t UART_DATA_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  RDA_IEN:1;
X    volatile uint32_t  RDA_IEN:1;
N    __IO uint32_t  THRE_IEN:1;
X    volatile uint32_t  THRE_IEN:1;
N    __IO uint32_t  RLS_IEN:1;
X    volatile uint32_t  RLS_IEN:1;
N    __IO uint32_t  MS_IEN:1;
X    volatile uint32_t  MS_IEN:1;
N    __IO uint32_t  RTO_IEN:1;	  
X    volatile uint32_t  RTO_IEN:1;	  
N    __IO uint32_t  BUF_ERR_IEN:1;
X    volatile uint32_t  BUF_ERR_IEN:1;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  LIN_RX_BRK_IEN:1;
X    volatile uint32_t  LIN_RX_BRK_IEN:1;
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N    __IO uint32_t  TOC_EN:1;      /* Time-out counter enable */
X    volatile uint32_t  TOC_EN:1;       
N    __IO uint32_t  AUTO_RTS_EN:1;
X    volatile uint32_t  AUTO_RTS_EN:1;
N    __IO uint32_t  AUTO_CTS_EN:1;
X    volatile uint32_t  AUTO_CTS_EN:1;
N    __IO uint32_t  DMA_TX_EN:1;
X    volatile uint32_t  DMA_TX_EN:1;
N    __IO uint32_t  DMA_RX_EN:1;
X    volatile uint32_t  DMA_RX_EN:1;
N    __I  uint32_t  RESERVE2:15;    
X    volatile const  uint32_t  RESERVE2:15;    
N    __IO uint32_t  nDEBUGACK_EN:1;
X    volatile uint32_t  nDEBUGACK_EN:1;
N} UART_IER_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  RFR:1;
X    volatile uint32_t  RFR:1;
N    __IO uint32_t  TFR:1;
X    volatile uint32_t  TFR:1;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  RFITL:4;             /* Rx FIFO Interrupt Trigger Level */
X    volatile uint32_t  RFITL:4;              
N    __I  uint32_t  RESERVE2:8;
X    volatile const  uint32_t  RESERVE2:8;
N    __IO uint32_t  RTS_TRIG_LEVEL:4;
X    volatile uint32_t  RTS_TRIG_LEVEL:4;
N    __I  uint32_t  RESERVE3:12;
X    volatile const  uint32_t  RESERVE3:12;
N} UART_FCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  WLS:2;               /* Word length select */
X    volatile uint32_t  WLS:2;                
N    __IO uint32_t  NSB:1;               /* Number of STOP bit */
X    volatile uint32_t  NSB:1;                
N    __IO uint32_t  PBE:1;               /* Parity bit enable  */
X    volatile uint32_t  PBE:1;                
N    __IO uint32_t  EPE:1;               /* Even parity enable */
X    volatile uint32_t  EPE:1;                
N    __IO uint32_t  SPE:1;               /* Stick parity enable*/
X    volatile uint32_t  SPE:1;                
N    __IO uint32_t  BCB:1;               /* Break control bit  */
X    volatile uint32_t  BCB:1;                
N    __I  uint32_t  RESERVE:25;
X    volatile const  uint32_t  RESERVE:25;
N} UART_LCR_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  RTS_SET:1;
X    volatile uint32_t  RTS_SET:1;
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N    __IO uint32_t  LBME:1;
X    volatile uint32_t  LBME:1;
N    __I  uint32_t  RESERVE2:4;
X    volatile const  uint32_t  RESERVE2:4;
N    __IO uint32_t  RTS_ACT:1;
X    volatile uint32_t  RTS_ACT:1;
N    __I  uint32_t  RESERVE3:3;
X    volatile const  uint32_t  RESERVE3:3;
N    __I  uint32_t  RTS_ST:1;               /* RTS status */
X    volatile const  uint32_t  RTS_ST:1;                
N    __I  uint32_t  RESERVE4:18;
X    volatile const  uint32_t  RESERVE4:18;
N} UART_MCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DCTS:1;
X    volatile uint32_t  DCTS:1;
N    __I  uint32_t  RESERVE0:3;
X    volatile const  uint32_t  RESERVE0:3;
N    __I  uint32_t  CTS:1;               /* CTS status */
X    volatile const  uint32_t  CTS:1;                
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  CTS_ACT:1;
X    volatile uint32_t  CTS_ACT:1;
N    __I  uint32_t  RESERVE2:23;
X    volatile const  uint32_t  RESERVE2:23;
N} UART_MSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  RX_OVF_IF:1;
X    volatile uint32_t  RX_OVF_IF:1;
N    __I  uint32_t  RESERVE0:3;
X    volatile const  uint32_t  RESERVE0:3;
N    __IO uint32_t  PEF:1;
X    volatile uint32_t  PEF:1;
N    __IO uint32_t  FEF:1;
X    volatile uint32_t  FEF:1;
N    __IO uint32_t  BIF:1;
X    volatile uint32_t  BIF:1;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __I  uint32_t  RX_POINTER:6;
X    volatile const  uint32_t  RX_POINTER:6;
N    __I  uint32_t  RX_EMPTY:1;
X    volatile const  uint32_t  RX_EMPTY:1;
N    __I  uint32_t  RX_FULL:1;
X    volatile const  uint32_t  RX_FULL:1;
N    __I  uint32_t  TX_POINTER:6;
X    volatile const  uint32_t  TX_POINTER:6;
N    __I  uint32_t  TX_EMPTY:1;
X    volatile const  uint32_t  TX_EMPTY:1;
N    __I  uint32_t  TX_FULL:1;
X    volatile const  uint32_t  TX_FULL:1;
N    __IO uint32_t  TX_OVF_IF:1;
X    volatile uint32_t  TX_OVF_IF:1;
N    __I  uint32_t  RESERVE2:3;
X    volatile const  uint32_t  RESERVE2:3;
N    __I  uint32_t  TE:1;                /* Transmitter empty */
X    volatile const  uint32_t  TE:1;                 
N    __I  uint32_t  RESERVE3:3;
X    volatile const  uint32_t  RESERVE3:3;
N} UART_FSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  RDA_IF:1;
X    volatile uint32_t  RDA_IF:1;
N    __IO uint32_t  THRE_IF:1;
X    volatile uint32_t  THRE_IF:1;
N    __IO uint32_t  RLS_IF:1;
X    volatile uint32_t  RLS_IF:1;
N    __IO uint32_t  MODEM_IF:1;
X    volatile uint32_t  MODEM_IF:1;
N    __IO uint32_t  TOUT_IF:1;
X    volatile uint32_t  TOUT_IF:1;
N    __IO uint32_t  BUF_ERR_IF:1;
X    volatile uint32_t  BUF_ERR_IF:1;
N    __IO uint32_t  WAKE_IF:1;
X    volatile uint32_t  WAKE_IF:1;
N    __IO uint32_t  LIN_Rx_Break_IF:1;
X    volatile uint32_t  LIN_Rx_Break_IF:1;
N    __IO uint32_t  RDA_INT:1;
X    volatile uint32_t  RDA_INT:1;
N    __IO uint32_t  THRE_INT:1;
X    volatile uint32_t  THRE_INT:1;
N    __IO uint32_t  RLS_INT:1;
X    volatile uint32_t  RLS_INT:1;
N    __IO uint32_t  MODEM_INT:1;
X    volatile uint32_t  MODEM_INT:1;
N    __IO uint32_t  TOUT_INT:1;
X    volatile uint32_t  TOUT_INT:1;
N    __IO uint32_t  BUF_ERR_INT:1;
X    volatile uint32_t  BUF_ERR_INT:1;
N    __IO uint32_t  WAKE_INT:1;
X    volatile uint32_t  WAKE_INT:1;
N    __IO uint32_t  LIN_Rx_Break_INT:1;
X    volatile uint32_t  LIN_Rx_Break_INT:1;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  DMA_RLS_IF:1;
X    volatile uint32_t  DMA_RLS_IF:1;
N    __IO uint32_t  DMA_MODEM_IF:1;
X    volatile uint32_t  DMA_MODEM_IF:1;
N    __IO uint32_t  DMA_TOUT_IF:1;
X    volatile uint32_t  DMA_TOUT_IF:1;
N    __IO uint32_t  DMA_BUF_ERR_IF:1;
X    volatile uint32_t  DMA_BUF_ERR_IF:1;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  DMA_LIN_Rx_Break_IF:1;
X    volatile uint32_t  DMA_LIN_Rx_Break_IF:1;
N    __I  uint32_t  RESERVE2:2;
X    volatile const  uint32_t  RESERVE2:2;
N    __IO uint32_t  DMA_RLS_INT:1;
X    volatile uint32_t  DMA_RLS_INT:1;
N    __IO uint32_t  DMA_MODEM_INT:1;
X    volatile uint32_t  DMA_MODEM_INT:1;
N    __IO uint32_t  DMA_TOUT_INT:1;
X    volatile uint32_t  DMA_TOUT_INT:1;
N    __IO uint32_t  DMA_BUF_ERR_INT:1;
X    volatile uint32_t  DMA_BUF_ERR_INT:1;
N    __I  uint32_t  RESERVE3:1;
X    volatile const  uint32_t  RESERVE3:1;
N    __IO uint32_t  DMA_LIN_Rx_Break_INT:1;
X    volatile uint32_t  DMA_LIN_Rx_Break_INT:1;
N} UART_ISR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TOIC:7;
X    volatile uint32_t  TOIC:7;
N    __I  uint32_t  RESERVE0:25;
X    volatile const  uint32_t  RESERVE0:25;
N} UART_TOR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  BRD:16;
X    volatile uint32_t  BRD:16;
N    __I  uint32_t  RESERVE0:8;
X    volatile const  uint32_t  RESERVE0:8;
N    __IO uint32_t  DIVX:4;
X    volatile uint32_t  DIVX:4;
N    __IO uint32_t  DIVX_ONE:1;            
X    volatile uint32_t  DIVX_ONE:1;            
N    __IO uint32_t  DIVX_EN:1;            
X    volatile uint32_t  DIVX_EN:1;            
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N} UART_BAUD_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  TX_SELECT:1;
X    volatile uint32_t  TX_SELECT:1;
N    __IO uint32_t  LOOPBACK:1;            
X    volatile uint32_t  LOOPBACK:1;            
N    __IO uint32_t  RX_DEB_EN:1;            
X    volatile uint32_t  RX_DEB_EN:1;            
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  TX_INV_EN:1;            
X    volatile uint32_t  TX_INV_EN:1;            
N    __IO uint32_t  RX_INV_EN:1;
X    volatile uint32_t  RX_INV_EN:1;
N    __I  uint32_t  RESERVE2:25;
X    volatile const  uint32_t  RESERVE2:25;
N} UART_IRCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  LINBCNT:4;
X    volatile uint32_t  LINBCNT:4;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  LINRX_EN:1;
X    volatile uint32_t  LINRX_EN:1;
N    __IO uint32_t  LINTX_EN:1;            
X    volatile uint32_t  LINTX_EN:1;            
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} UART_LINCON_T;
N
N
N
Ntypedef struct
N{
N    __IO uint32_t  LIN_EN:1;
X    volatile uint32_t  LIN_EN:1;
N    __IO uint32_t  IrDA_EN:1;
X    volatile uint32_t  IrDA_EN:1;
N    __I  uint32_t  RESERVE0:30;
X    volatile const  uint32_t  RESERVE0:30;
N} UART_FUNSEL_T;
N
N
Ntypedef struct
N{
N    UART_DATA_T     DATA;
N    __I  uint8_t    RESERVE0[3];
X    volatile const  uint8_t    RESERVE0[3];
N    UART_IER_T      IER;
N    UART_FCR_T      FCR;
N    UART_LCR_T      LCR;
N    UART_MCR_T      MCR;
N    UART_MSR_T      MSR;
N    UART_FSR_T      FSR;
N    UART_ISR_T      ISR;
N    UART_TOR_T      TOR;
N    UART_BAUD_T     BAUD;
N    UART_IRCR_T     IRCR;
N    UART_LINCON_T   LINCON;    
N    UART_FUNSEL_T   FUNSEL;    
N} UART_T;
N
N/*----------------------------- Timer Controller -----------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  PRESCALE:8;
X    volatile uint32_t  PRESCALE:8;
N    __I  uint32_t  RESERVE0:8;
X    volatile const  uint32_t  RESERVE0:8;
N    __IO uint32_t  TDR_EN:1;
X    volatile uint32_t  TDR_EN:1;
N    __I  uint32_t  RESERVE1:8;
X    volatile const  uint32_t  RESERVE1:8;
N    __IO uint32_t  CACT:1;
X    volatile uint32_t  CACT:1;
N    __IO uint32_t  CRST:1;
X    volatile uint32_t  CRST:1;
N    __IO uint32_t  MODE:2;
X    volatile uint32_t  MODE:2;
N    __IO uint32_t  IE:1;
X    volatile uint32_t  IE:1;
N    __IO uint32_t  CEN:1;
X    volatile uint32_t  CEN:1;
N    __IO uint32_t  nDBGACK_EN:1;
X    volatile uint32_t  nDBGACK_EN:1;
N} TIMER_TCSR_T;
N
Ntypedef __IO uint32_t TIMER_TCMPR_T;
Xtypedef volatile uint32_t TIMER_TCMPR_T;
N
Ntypedef __IO uint32_t TIMER_TDR_T;
Xtypedef volatile uint32_t TIMER_TDR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TIF:1;
X    volatile uint32_t  TIF:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} TIMER_TISR_T;
N
Ntypedef struct
N{
N    TIMER_TCSR_T     TCSR;
N    TIMER_TCMPR_T    TCMPR;
N    TIMER_TISR_T     TISR;    
N    TIMER_TDR_T      TDR;
N} TIMER_T;
N
N
N/*----------------------------- WDT Controller -----------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  WTR:1;
X    volatile uint32_t  WTR:1;
N    __IO uint32_t  WTRE:1;
X    volatile uint32_t  WTRE:1;
N    __IO uint32_t  WTRF:1;
X    volatile uint32_t  WTRF:1;
N    __IO uint32_t  WTIF:1;
X    volatile uint32_t  WTIF:1;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  WTIE:1;
X    volatile uint32_t  WTIE:1;
N    __IO uint32_t  WTE:1;
X    volatile uint32_t  WTE:1;
N    __IO uint32_t  WTIS:3;
X    volatile uint32_t  WTIS:3;
N    __I  uint32_t  RESERVE1:21;
X    volatile const  uint32_t  RESERVE1:21;
N} WDT_WTCR_T;
N
Ntypedef struct
N{
N    WDT_WTCR_T     WTCR;
N    
N} WDT_T;
N
N/*------------------------- SPI Interface Controller -------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  GO_BUSY:1;
X    volatile uint32_t  GO_BUSY:1;
N    __IO uint32_t  RX_NEG:1;
X    volatile uint32_t  RX_NEG:1;
N    __IO uint32_t  TX_NEG:1;
X    volatile uint32_t  TX_NEG:1;
N    __IO uint32_t  TX_BIT_LEN:5;
X    volatile uint32_t  TX_BIT_LEN:5;
N    __IO uint32_t  TX_NUM:2;
X    volatile uint32_t  TX_NUM:2;
N    __IO uint32_t  LSB:1;
X    volatile uint32_t  LSB:1;
N    __IO uint32_t  CLKP:1;
X    volatile uint32_t  CLKP:1;
N    __IO uint32_t  SLEEP:4;
X    volatile uint32_t  SLEEP:4;
N    __IO uint32_t  IF:1;
X    volatile uint32_t  IF:1;
N    __IO uint32_t  IE:1;
X    volatile uint32_t  IE:1;
N    __IO uint32_t  SLAVE:1;
X    volatile uint32_t  SLAVE:1;
N    __IO uint32_t  BYTE_SLEEP:1;
X    volatile uint32_t  BYTE_SLEEP:1;
N    __IO uint32_t  BYTE_ENDIAN:1;
X    volatile uint32_t  BYTE_ENDIAN:1;
N    __IO uint32_t  FIFO:1;
X    volatile uint32_t  FIFO:1;
N    __IO uint32_t  TWOB:1;
X    volatile uint32_t  TWOB:1;
N    __IO uint32_t  VARCLK_EN:1;
X    volatile uint32_t  VARCLK_EN:1;
N    __IO uint32_t  RX_EMPTY:1;
X    volatile uint32_t  RX_EMPTY:1;
N    __IO uint32_t  RX_FULL:1;
X    volatile uint32_t  RX_FULL:1;
N    __IO uint32_t  TX_EMPTY:1;
X    volatile uint32_t  TX_EMPTY:1;
N    __IO uint32_t  TX_FULL:1;
X    volatile uint32_t  TX_FULL:1;
N    __IO uint32_t  DMA_ASS_BURST:1;
X    volatile uint32_t  DMA_ASS_BURST:1;
N    __I  uint32_t  RESERVE:3;
X    volatile const  uint32_t  RESERVE:3;
N
N} SPI_CNTRL_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DIVIDER:16;
X    volatile uint32_t  DIVIDER:16;
N    __IO uint32_t  DIVIDER2:16;
X    volatile uint32_t  DIVIDER2:16;
N} SPI_DIVIDER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  SSR:2;
X    volatile uint32_t  SSR:2;
N    __IO uint32_t  SS_LVL:1;
X    volatile uint32_t  SS_LVL:1;
N    __IO uint32_t  ASS:1;
X    volatile uint32_t  ASS:1;
N    __IO uint32_t  SS_LTRIG:1;
X    volatile uint32_t  SS_LTRIG:1;
N    __IO uint32_t  LTRIG_FLAG:1;
X    volatile uint32_t  LTRIG_FLAG:1;
N    __I  uint32_t  RESERVE:26;
X    volatile const  uint32_t  RESERVE:26;
N} SPI_SSR_T;
N
N
Ntypedef __I  uint32_t   SPI_RX_T;
Xtypedef volatile const  uint32_t   SPI_RX_T;
Ntypedef __O  uint32_t   SPI_TX_T;
Xtypedef volatile  uint32_t   SPI_TX_T;
N
Ntypedef struct
N{
N    __IO uint32_t  JS:1;
X    volatile uint32_t  JS:1;
N    __I  uint32_t  RESERVE0:3;
X    volatile const  uint32_t  RESERVE0:3;
N    __IO uint32_t  JS_RW:1;
X    volatile uint32_t  JS_RW:1;
N    __IO uint32_t  CS_ACT:1;
X    volatile uint32_t  CS_ACT:1;
N    __IO uint32_t  DATA_RDY:1;
X    volatile uint32_t  DATA_RDY:1;
N    __IO uint32_t  CS_DEACT:1;
X    volatile uint32_t  CS_DEACT:1;
N    __IO uint32_t  READYB:1;
X    volatile uint32_t  READYB:1;
N    __I  uint32_t  RESERVE1:23;
X    volatile const  uint32_t  RESERVE1:23;
N} SPI_JS_T;
N
Ntypedef __IO uint32_t SPI_VARCLK_T;
Xtypedef volatile uint32_t SPI_VARCLK_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TX_DMA_GO:1;
X    volatile uint32_t  TX_DMA_GO:1;
N    __IO uint32_t  RX_DMA_GO:1;
X    volatile uint32_t  RX_DMA_GO:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} SPI_DMA_T;
N
Ntypedef struct
N{
N    SPI_CNTRL_T     CNTRL;
N    SPI_DIVIDER_T   DIVIDER;
N    SPI_SSR_T       SSR;
N    uint32_t        RESERVE0;
N    SPI_RX_T        RX[2];
N    uint32_t        RESERVE1;
N    uint32_t        RESERVE2;
N    SPI_TX_T        TX[2];
N    uint32_t        RESERVE3;
N    uint32_t        RESERVE4;
N    SPI_JS_T        JS;
N    SPI_VARCLK_T    VARCLK;
N    SPI_DMA_T       DMA;
N} SPI_T;
N
N/*------------------------------ I2C Controller ------------------------------*/
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  AA:1;
X    volatile uint32_t  AA:1;
N    __IO uint32_t  SI:1;
X    volatile uint32_t  SI:1;
N    __IO uint32_t  STO:1;
X    volatile uint32_t  STO:1;
N    __IO uint32_t  STA:1;
X    volatile uint32_t  STA:1;
N    __IO uint32_t  ENSI:1;
X    volatile uint32_t  ENSI:1;
N    __IO uint32_t  EI:1;
X    volatile uint32_t  EI:1;
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} I2C_CON_T;
N
Ntypedef struct
N{
N    __IO uint32_t  GC:1;
X    volatile uint32_t  GC:1;
N    __IO uint32_t  ADDR:7;
X    volatile uint32_t  ADDR:7;
N    __I  uint32_t  RESERVE:24;
X    volatile const  uint32_t  RESERVE:24;
N} I2C_ADDR_T;
N
Ntypedef __IO uint32_t I2C_DATA_T;
Xtypedef volatile uint32_t I2C_DATA_T;
N
Ntypedef __I  uint32_t I2C_STATUS_T;
Xtypedef volatile const  uint32_t I2C_STATUS_T;
N
Ntypedef __IO uint32_t I2C_CLK_T;
Xtypedef volatile uint32_t I2C_CLK_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TIF:1;
X    volatile uint32_t  TIF:1;
N    __IO uint32_t  DIV4:1;
X    volatile uint32_t  DIV4:1;
N    __IO uint32_t  ENTI:1;
X    volatile uint32_t  ENTI:1;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N} I2C_TOC_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  ADM:7;
X    volatile uint32_t  ADM:7;
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} I2C_ADRM_T;
N
Ntypedef struct
N{
N    I2C_CON_T       CON;
N    I2C_ADDR_T      ADDR0;
N    I2C_DATA_T      DATA;
N    I2C_STATUS_T    STATUS;
N    I2C_CLK_T       CLK;
N    I2C_TOC_T       TOC;
N    I2C_ADDR_T	    ADDR1;
N    I2C_ADDR_T	    ADDR2;
N    I2C_ADDR_T	    ADDR3;
N    I2C_ADRM_T		ADRM0;
N    I2C_ADRM_T		ADRM1;
N    I2C_ADRM_T		ADRM2;
N    I2C_ADRM_T	    ADRM3;  
N    __I uint32_t    DATE;
X    volatile const uint32_t    DATE;
N    __I uint32_t    VERSION;
X    volatile const uint32_t    VERSION;
N    __IO uint32_t   High_Speed;      
X    volatile uint32_t   High_Speed;      
N} I2C_T;
N
N
N/*----------------------------- RTC Controller -------------------------------*/
N
Ntypedef __IO uint32_t RTC_INIR_T;
Xtypedef volatile uint32_t RTC_INIR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  AER:16;
X    volatile uint32_t  AER:16;
N    __I  uint32_t  ENF:1;
X    volatile const  uint32_t  ENF:1;
N    __I  uint32_t  RESERVE1:15;
X    volatile const  uint32_t  RESERVE1:15;
N} RTC_AER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  FRACTION:6;
X    volatile uint32_t  FRACTION:6;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  INTEGER:4;
X    volatile uint32_t  INTEGER:4;
N    __I  uint32_t  RESERVE1:20;
X    volatile const  uint32_t  RESERVE1:20;
N} RTC_FCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  SEC1:4;
X    volatile uint32_t  SEC1:4;
N    __IO uint32_t  SEC10:3;
X    volatile uint32_t  SEC10:3;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  MIN1:4;
X    volatile uint32_t  MIN1:4;
N    __IO uint32_t  MIN10:3;
X    volatile uint32_t  MIN10:3;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  HR1:4;
X    volatile uint32_t  HR1:4;
N    __IO uint32_t  HR10:2;
X    volatile uint32_t  HR10:2;
N    __I  uint32_t  RESERVE2:10;
X    volatile const  uint32_t  RESERVE2:10;
N} RTC_TLR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DAY1:4;
X    volatile uint32_t  DAY1:4;
N    __IO uint32_t  DAY10:2;
X    volatile uint32_t  DAY10:2;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  MON1:4;
X    volatile uint32_t  MON1:4;
N    __IO uint32_t  MON10:1;
X    volatile uint32_t  MON10:1;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  YEAR1:4;
X    volatile uint32_t  YEAR1:4;
N    __IO uint32_t  YEAR10:4;
X    volatile uint32_t  YEAR10:4;
N    __I  uint32_t  RESERVE2:8;
X    volatile const  uint32_t  RESERVE2:8;
N} RTC_CLR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  HR24:1;
X    volatile uint32_t  HR24:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} RTC_TSSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DWR:3;
X    volatile uint32_t  DWR:3;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N} RTC_DWR_T;
N
Ntypedef RTC_TLR_T   RTC_TAR_T;
Ntypedef RTC_CLR_T   RTC_CAR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  LIR:1;
X    volatile uint32_t  LIR:1;
N    __I  uint32_t  RESERVE:31;
X    volatile const  uint32_t  RESERVE:31;
N} RTC_LIR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  AIER:1;
X    volatile uint32_t  AIER:1;
N    __IO uint32_t  TIER:1;
X    volatile uint32_t  TIER:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} RTC_RIER_T;
N
N
N
Ntypedef struct
N{
N    __IO uint32_t  AI:1;
X    volatile uint32_t  AI:1;
N    __IO uint32_t  TI:1;
X    volatile uint32_t  TI:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} RTC_RIIR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TTR:3;
X    volatile uint32_t  TTR:3;
N    __IO uint32_t  TWKE:1;
X    volatile uint32_t  TWKE:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} RTC_TTR_T;
N
Ntypedef struct
N{
N    RTC_INIR_T  INIR;
N    RTC_AER_T   AER;
N    RTC_FCR_T   FCR;
N    RTC_TLR_T   TLR;
N    RTC_CLR_T   CLR;
N    RTC_TSSR_T  TSSR;
N    RTC_DWR_T   DWR;
N    RTC_TAR_T   TAR;
N    RTC_CAR_T   CAR;
N    RTC_LIR_T   LIR;
N    RTC_RIER_T  RIER;
N    RTC_RIIR_T  RIIR;
N    RTC_TTR_T   TTR;
N} RTC_T;
N
N
N/*----------------------------- ADC Controller -------------------------------*/
N
Ntypedef struct
N{
N    __IO uint32_t FIFO_IE_LEV:3;
X    volatile uint32_t FIFO_IE_LEV:3;
N    __I  uint32_t RESERVE:28;
X    volatile const  uint32_t RESERVE:28;
N    __IO uint32_t IE:1;
X    volatile uint32_t IE:1;
N} ADC_INT_T;
N
Ntypedef struct
N{
N    __IO uint32_t OSR:4;
X    volatile uint32_t OSR:4;
N    __I  uint32_t RESERVE:12;
X    volatile const  uint32_t RESERVE:12;
N    __IO uint32_t GAIN:4;
X    volatile uint32_t GAIN:4;
N    __I  uint32_t RESERVE1:12;
X    volatile const  uint32_t RESERVE1:12;
N} ADC_DEC_T;
N
Ntypedef struct
N{
N    __IO uint32_t RxDmaEn:1;
X    volatile uint32_t RxDmaEn:1;
N    __I  uint32_t RESERVE:31;
X    volatile const  uint32_t RESERVE:31;
N} ADC_ADPDMA_T;
N
Ntypedef struct
N{
N    __IO uint32_t CMPEN:1;
X    volatile uint32_t CMPEN:1;
N    __IO uint32_t CMPIE:1;
X    volatile uint32_t CMPIE:1;
N    __IO uint32_t CMPCOND:1;
X    volatile uint32_t CMPCOND:1;
N    __I  uint32_t RESERVE:4;
X    volatile const  uint32_t RESERVE:4;
N    __IO uint32_t CMPF:1;
X    volatile uint32_t CMPF:1;
N    __IO uint32_t CMPMATCHCNT:4;
X    volatile uint32_t CMPMATCHCNT:4;
N    __I  uint32_t RESERVE1:4;
X    volatile const  uint32_t RESERVE1:4;
N    __IO uint32_t CMPD:16;
X    volatile uint32_t CMPD:16;
N}  ADC_ADCMPR_T;
N
Ntypedef struct
N{
N    __I  uint32_t           ADCOUT;
X    volatile const  uint32_t           ADCOUT;
N    __IO uint32_t           EN;
X    volatile uint32_t           EN;
N    __IO uint32_t           CLK_DIV;
X    volatile uint32_t           CLK_DIV;
N    ADC_DEC_T               DEC;
N    ADC_INT_T               INT;
N    ADC_ADPDMA_T			ADCPDMA;
N    ADC_ADCMPR_T            ADCMPR[2];
N} SDADC_T;
N
N/*---------------------- Analog Comparator Controller -------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  CMPEN:1;
X    volatile uint32_t  CMPEN:1;
N    __IO uint32_t  CMPIE:1;
X    volatile uint32_t  CMPIE:1;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  CMPCN:1;
X    volatile uint32_t  CMPCN:1;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __I  uint32_t  RESERVE:26;
X    volatile const  uint32_t  RESERVE:26;
N} ACMP_CMPCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CMPF0:1;
X    volatile uint32_t  CMPF0:1;
N    __IO uint32_t  CMPF1:1;
X    volatile uint32_t  CMPF1:1;
N    __I  uint32_t  CO0:1;
X    volatile const  uint32_t  CO0:1;
N    __I  uint32_t  CO1:1;
X    volatile const  uint32_t  CO1:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} ACMP_CMPSR_T;
N
Ntypedef struct
N{
N    ACMP_CMPCR_T CMPCR[2];
N    ACMP_CMPSR_T CMPSR;
N    __IO uint32_t CMPSEL;
X    volatile uint32_t CMPSEL;
N} ACMP_T;
N
N/*---------------------------- Clock Controller ------------------------------*/
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:1;	   // 0
X    volatile const  uint32_t  RESERVE0:1;	   
N    __IO uint32_t  XTL32K_EN:1;	   // 1	  
X    volatile uint32_t  XTL32K_EN:1;	   
N    __IO uint32_t  OSC49M_EN:1;	   // 2	  
X    volatile uint32_t  OSC49M_EN:1;	   
N    __IO uint32_t  OSC10K_EN:1;	   // 3	  
X    volatile uint32_t  OSC10K_EN:1;	   
N    __I  uint32_t  RESERVE4:5;	   // 4-8
X    volatile const  uint32_t  RESERVE4:5;	   
N    __IO uint32_t  STOP:1;         // 9	  
X    volatile uint32_t  STOP:1;         
N    __IO uint32_t  STANDBY_PD:1;   // 10  
X    volatile uint32_t  STANDBY_PD:1;   
N    __IO uint32_t  DEEP_PD:1;      // 11  
X    volatile uint32_t  DEEP_PD:1;      
N    __I  uint32_t  RESERVE1:4;     // 12-15
X    volatile const  uint32_t  RESERVE1:4;     
N    __IO uint32_t  PIN_ENB:1;      // 16	 
X    volatile uint32_t  PIN_ENB:1;      
N    __IO uint32_t  OSC10K_ENB:1;   // 17	 
X    volatile uint32_t  OSC10K_ENB:1;   
N    __I  uint32_t  RESERVE2:2;     // 18-19
X    volatile const  uint32_t  RESERVE2:2;     
N    __IO uint32_t  TIMER_SEL:4;    // 20-23	 
X    volatile uint32_t  TIMER_SEL:4;    
N    __I  uint32_t  PIN_WAKE:1;	   // 24
X    volatile const  uint32_t  PIN_WAKE:1;	   
N    __I  uint32_t  TIMER_WAKE:1;   // 25
X    volatile const  uint32_t  TIMER_WAKE:1;   
N    __I  uint32_t  POI_WAKE:1;	   // 26
X    volatile const  uint32_t  POI_WAKE:1;	   
N    __I  uint32_t  RESERVE3:1;	   // 27
X    volatile const  uint32_t  RESERVE3:1;	   
N    __I  uint32_t  TIMER_SEL_RD:4; // 28-31
X    volatile const  uint32_t  TIMER_SEL_RD:4; 
N} SYSCLK_PWRCON_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CPU_EN:1;
X    volatile uint32_t  CPU_EN:1;
N    __IO uint32_t  PDMA_EN:1;
X    volatile uint32_t  PDMA_EN:1;
N    __IO uint32_t  ISP_EN:1;
X    volatile uint32_t  ISP_EN:1;
N    __I  uint32_t  RESERVE1:29;
X    volatile const  uint32_t  RESERVE1:29;
N} SYSCLK_AHBCLK_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  WDG_EN:1;	//0
X    volatile uint32_t  WDG_EN:1;	
N    __I  uint32_t  RESERVE0:4;  //1-4
X    volatile const  uint32_t  RESERVE0:4;  
N    __IO uint32_t  RTC_EN:1;	//5
X    volatile uint32_t  RTC_EN:1;	
N    __IO uint32_t  TMR0_EN:1;	//6
X    volatile uint32_t  TMR0_EN:1;	
N    __IO uint32_t  TMR1_EN:1;	//7
X    volatile uint32_t  TMR1_EN:1;	
N    __IO uint32_t  I2C0_EN:1;	//8
X    volatile uint32_t  I2C0_EN:1;	
N    __I  uint32_t  RESERVE1:3;	//9-11
X    volatile const  uint32_t  RESERVE1:3;	
N    __IO uint32_t  SPI0_EN:1;	//12
X    volatile uint32_t  SPI0_EN:1;	
N    __IO uint32_t  DPWM_EN:1;	//13
X    volatile uint32_t  DPWM_EN:1;	
N    __I  uint32_t  RESERVE2:2;	//14-15
X    volatile const  uint32_t  RESERVE2:2;	
N    __IO uint32_t  UART0_EN:1;	//16
X    volatile uint32_t  UART0_EN:1;	
N    __I  uint32_t  RESERVE3:1;	//17
X    volatile const  uint32_t  RESERVE3:1;	
N    __IO uint32_t  BIQALC_EN:1;	//18
X    volatile uint32_t  BIQALC_EN:1;	
N    __IO uint32_t  CRC_EN:1;	//19
X    volatile uint32_t  CRC_EN:1;	
N    __IO uint32_t  PWM01_EN:1;	//20
X    volatile uint32_t  PWM01_EN:1;	
N    __I  uint32_t  RESERVE4:1;	//21
X    volatile const  uint32_t  RESERVE4:1;	
N    __IO uint32_t  ACMP_EN:1;	//22
X    volatile uint32_t  ACMP_EN:1;	
N    __I  uint32_t  RESERVE5:3;	//23-25
X    volatile const  uint32_t  RESERVE5:3;	
N    __IO uint32_t  SBRAM_EN:1;	//26
X    volatile uint32_t  SBRAM_EN:1;	
N    __I  uint32_t  RESERVE6:1;	//27
X    volatile const  uint32_t  RESERVE6:1;	
N    __IO uint32_t  ADC_EN:1;	//28
X    volatile uint32_t  ADC_EN:1;	
N    __IO uint32_t  I2S_EN:1;	//29
X    volatile uint32_t  I2S_EN:1;	
N    __IO uint32_t  ANA_EN:1;	//30
X    volatile uint32_t  ANA_EN:1;	
N    __I  uint32_t  RESERVE7:1;	//31
X    volatile const  uint32_t  RESERVE7:1;	
N}  SYSCLK_APBCLK_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CPU_EN:1;    //0
X    volatile uint32_t  CPU_EN:1;    
N    __IO uint32_t  PDMA_EN:1;   //1
X    volatile uint32_t  PDMA_EN:1;   
N    __IO uint32_t  ISP_EN:1;    //2
X    volatile uint32_t  ISP_EN:1;    
N    __I  uint32_t  RESERVE0:1;  //3
X    volatile const  uint32_t  RESERVE0:1;  
N    __IO uint32_t  WDG_EN:1;	//4
X    volatile uint32_t  WDG_EN:1;	
N    __IO uint32_t  RTC_EN:1;	//5
X    volatile uint32_t  RTC_EN:1;	
N    __IO uint32_t  TMR0_EN:1;	//6
X    volatile uint32_t  TMR0_EN:1;	
N    __IO uint32_t  TMR1_EN:1;	//7
X    volatile uint32_t  TMR1_EN:1;	
N    __IO uint32_t  I2C0_EN:1;	//8
X    volatile uint32_t  I2C0_EN:1;	
N    __I  uint32_t  RESERVE1:3;	//9-11
X    volatile const  uint32_t  RESERVE1:3;	
N    __IO uint32_t  SPI0_EN:1;	//12
X    volatile uint32_t  SPI0_EN:1;	
N    __IO uint32_t  DPWM_EN:1;	//13
X    volatile uint32_t  DPWM_EN:1;	
N    __I  uint32_t  RESERVE2:2;	//14-15
X    volatile const  uint32_t  RESERVE2:2;	
N    __IO uint32_t  UART0_EN:1;	//16
X    volatile uint32_t  UART0_EN:1;	
N    __I  uint32_t  RESERVE3:1;	//17
X    volatile const  uint32_t  RESERVE3:1;	
N    __IO uint32_t  BIQALC_EN:1;	//18
X    volatile uint32_t  BIQALC_EN:1;	
N    __IO uint32_t  CRC_EN:1;	//19
X    volatile uint32_t  CRC_EN:1;	
N    __IO uint32_t  PWM01_EN:1;	//20
X    volatile uint32_t  PWM01_EN:1;	
N    __I  uint32_t  RESERVE4:1;	//21
X    volatile const  uint32_t  RESERVE4:1;	
N    __IO uint32_t  ACMP_EN:1;	//22
X    volatile uint32_t  ACMP_EN:1;	
N    __I  uint32_t  RESERVE5:3;	//23-25
X    volatile const  uint32_t  RESERVE5:3;	
N    __IO uint32_t  SBRAM_EN:1;	//26
X    volatile uint32_t  SBRAM_EN:1;	
N    __I  uint32_t  RESERVE6:1;	//27
X    volatile const  uint32_t  RESERVE6:1;	
N    __IO uint32_t  ADC_EN:1;	//28
X    volatile uint32_t  ADC_EN:1;	
N    __IO uint32_t  I2S_EN:1;	//29
X    volatile uint32_t  I2S_EN:1;	
N    __IO uint32_t  ANA_EN:1;	//30
X    volatile uint32_t  ANA_EN:1;	
N    __I  uint32_t  RESERVE7:1;	//31
X    volatile const  uint32_t  RESERVE7:1;	
N}  SYSCLK_CLKSLEEP_T;
N
Ntypedef struct
N{
N    __IO uint32_t  DPD_STATE_WR:8;
X    volatile uint32_t  DPD_STATE_WR:8;
N    __I  uint32_t  DPD_STATE_RD:8;
X    volatile const  uint32_t  DPD_STATE_RD:8;
N    __I  uint32_t  RESERVE:16;
X    volatile const  uint32_t  RESERVE:16;
N} SYSCLK_DPDSTATE_T;
N
Ntypedef struct
N{
N    __IO uint32_t  HCLK_S:3;
X    volatile uint32_t  HCLK_S:3;
N    __IO uint32_t  STCLK_S:3;
X    volatile uint32_t  STCLK_S:3;
N    __IO uint32_t  OSCFSel:1;
X    volatile uint32_t  OSCFSel:1;
N    __I  uint32_t  RESERVE:25;
X    volatile const  uint32_t  RESERVE:25;
N} SYSCLK_CLKSEL0_T;			  
N
Ntypedef struct
N{
N    __IO uint32_t  WDG_S:2;
X    volatile uint32_t  WDG_S:2;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  DPWM_S:1;
X    volatile uint32_t  DPWM_S:1;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  TMR0_S:3;
X    volatile uint32_t  TMR0_S:3;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  TMR1_S:3;
X    volatile uint32_t  TMR1_S:3;
N    __I  uint32_t  RESERVE3:13;
X    volatile const  uint32_t  RESERVE3:13;
N    __IO uint32_t  PWM01_S:2;
X    volatile uint32_t  PWM01_S:2;
N    __I  uint32_t  RESERVE4:2;
X    volatile const  uint32_t  RESERVE4:2;
N} SYSCLK_CLKSEL1_T;
N
Ntypedef struct
N{
N    __IO uint32_t  I2S_S:2;
X    volatile uint32_t  I2S_S:2;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} SYSCLK_CLKSEL2_T;
N
Ntypedef struct
N{
N    __IO uint32_t  HCLK_N:4;
X    volatile uint32_t  HCLK_N:4;
N    __I  uint32_t  RESERVE0:4;
X    volatile const  uint32_t  RESERVE0:4;
N    __IO uint32_t  UART_N:4;
X    volatile uint32_t  UART_N:4;
N    __I  uint32_t  RESERVE1:4;
X    volatile const  uint32_t  RESERVE1:4;
N    __IO uint32_t  ADC_N:8;
X    volatile uint32_t  ADC_N:8;
N    __I  uint32_t  RESERVE:8;
X    volatile const  uint32_t  RESERVE:8;
N} SYSCLK_CLKDIV_T;
N
N
Ntypedef struct
N{    
N    __IO uint32_t  FSEL:4;
X    volatile uint32_t  FSEL:4;
N    __IO uint32_t  FDIV_EN:1;
X    volatile uint32_t  FDIV_EN:1;
N    __I  uint32_t  RESERVE:27;
X    volatile const  uint32_t  RESERVE:27;
N} SYSCLK_FRQDIV_T;
N
Ntypedef struct
N{    
N    __IO uint32_t  DS_FLAG:1;
X    volatile uint32_t  DS_FLAG:1;
N    __IO uint32_t  STOP_FLAG:1;
X    volatile uint32_t  STOP_FLAG:1;
N    __IO uint32_t  PD_FLAG:1;
X    volatile uint32_t  PD_FLAG:1;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N} SYSCLK_PFLAGCON_T;
N
Ntypedef struct
N{    
N    __IO uint32_t  DISABLE_PD:1;
X    volatile uint32_t  DISABLE_PD:1;
N    __I  uint32_t  RESERVE1:5;
X    volatile const  uint32_t  RESERVE1:5;
N    __I  uint32_t  ICE_CLK:1;
X    volatile const  uint32_t  ICE_CLK:1;
N    __I  uint32_t  ICE_DAT:1;
X    volatile const  uint32_t  ICE_DAT:1;
N    __I  uint32_t  RESERVE2:24;
X    volatile const  uint32_t  RESERVE2:24;
N} SYSCLK_DBGPD_T;
N
Ntypedef struct
N{
N    SYSCLK_PWRCON_T    PWRCON;
N    SYSCLK_AHBCLK_T    AHBCLK;
N    SYSCLK_APBCLK_T    APBCLK;
N    SYSCLK_DPDSTATE_T  DPDSTATE;
N    SYSCLK_CLKSEL0_T   CLKSEL0;
N    SYSCLK_CLKSEL1_T   CLKSEL1;
N    SYSCLK_CLKDIV_T    CLKDIV;
N    SYSCLK_CLKSEL2_T   CLKSEL2;
N    SYSCLK_CLKSLEEP_T  CLKSLEEP;
N    SYSCLK_PFLAGCON_T  PFLAGCON;
N    SYSCLK_DBGPD_T     DBGPD;    
N} SYSCLK_T;
N
N
N/*---------------------------- Global Controller -----------------------------*/
Ntypedef __I uint32_t GCR_PDID_T;  
Xtypedef volatile const uint32_t GCR_PDID_T;  
N//------------------------------------------------------
N// This register tells what triggered the last reset
N// Bit0 - POR reset
N// Bit1 - PAD reset
N// Bit2 - WDT reset
N//
N
N// Access via SYS->RSTSRC
Ntypedef struct
N{
N    __IO uint32_t  RSTS_CORE:1;
X    volatile uint32_t  RSTS_CORE:1;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N//    __IO uint32_t  RSTS_POR:1;
N//    __IO uint32_t  RSTS_PAD:1;
N    __IO uint32_t  RSTS_WDG:1;
X    volatile uint32_t  RSTS_WDG:1;
N    __I  uint32_t  RESERVE1:2;
X    volatile const  uint32_t  RESERVE1:2;
N    __IO uint32_t  RSTS_SYS:1;
X    volatile uint32_t  RSTS_SYS:1;
N    __IO uint32_t  RSTS_PMU:1;
X    volatile uint32_t  RSTS_PMU:1;
N    __IO uint32_t  RSTS_CPU:1;    
X    volatile uint32_t  RSTS_CPU:1;    
N    __I  uint32_t  RESERVE:24;
X    volatile const  uint32_t  RESERVE:24;
N} GCR_RSTSRC_T;
N// -----------------------------
N// This register, when written 1, triggers reset 
N// of the corresponding block
N// Bit 0 - chip reset
N// BIt 1 - core reset (resets the M0 core only)
N// Bit 2 - resets all the PDMA
N//
N
Ntypedef struct
N{
N    __IO uint32_t  CHIP_RST:1;
X    volatile uint32_t  CHIP_RST:1;
N    __IO uint32_t  CPU_RST:1;
X    volatile uint32_t  CPU_RST:1;
N    __IO uint32_t  PDMA_RST:1;
X    volatile uint32_t  PDMA_RST:1;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N} GCR_IPRSTC1_T;
N
Ntypedef struct
N{
N    __I  uint32_t  RESERVE0:6;
X    volatile const  uint32_t  RESERVE0:6;
N    __IO uint32_t  TMR0_RST:1; //6
X    volatile uint32_t  TMR0_RST:1; 
N    __IO uint32_t  TMR1_RST:1; //7
X    volatile uint32_t  TMR1_RST:1; 
N    __IO uint32_t  I2C0_RST:1; //8
X    volatile uint32_t  I2C0_RST:1; 
N    __I  uint32_t  RESERVE1:3; //9-11
X    volatile const  uint32_t  RESERVE1:3; 
N    __IO uint32_t  SPI0_RST:1; //12
X    volatile uint32_t  SPI0_RST:1; 
N    __IO uint32_t  DPWM_RST:1; //13
X    volatile uint32_t  DPWM_RST:1; 
N    __I  uint32_t  RESERVE2:2; //14-15
X    volatile const  uint32_t  RESERVE2:2; 
N    __IO uint32_t  UART0_RST:1;//16
X    volatile uint32_t  UART0_RST:1;
N    __I  uint32_t  RESERVE3:1; //17
X    volatile const  uint32_t  RESERVE3:1; 
N    __IO uint32_t  BIQ_RST:1;  //18
X    volatile uint32_t  BIQ_RST:1;  
N    __IO uint32_t  CRC_RST:1;  //19
X    volatile uint32_t  CRC_RST:1;  
N    __IO uint32_t  PWM10_RST:1;//20
X    volatile uint32_t  PWM10_RST:1;
N    __I  uint32_t  RESERVE4:1; //21
X    volatile const  uint32_t  RESERVE4:1; 
N    __IO uint32_t  ACMP_RST:1; //22
X    volatile uint32_t  ACMP_RST:1; 
N    __I  uint32_t  RESERVE5:5; //23-27
X    volatile const  uint32_t  RESERVE5:5; 
N    __IO uint32_t  ADC_RST:1;  //28
X    volatile uint32_t  ADC_RST:1;  
N    __IO uint32_t  I2S_RST:1;  //29
X    volatile uint32_t  I2S_RST:1;  
N    __IO uint32_t  ANA_RST:1;  //30
X    volatile uint32_t  ANA_RST:1;  
N    __I  uint32_t  RESERVE6:1; //31
X    volatile const  uint32_t  RESERVE6:1; 
N} GCR_IPRSTC2_T;
N
N
Ntypedef struct
N{
N    __I  uint32_t RESERVE:16;
X    volatile const  uint32_t RESERVE:16;
N    __IO uint32_t SCHMITT:16;    
X    volatile uint32_t SCHMITT:16;    
N} GCR_GPA_INP_T;
N
Ntypedef struct
N{
N    __IO uint32_t GPA0:2;
X    volatile uint32_t GPA0:2;
N    __IO uint32_t GPA1:2;
X    volatile uint32_t GPA1:2;
N    __IO uint32_t GPA2:2;
X    volatile uint32_t GPA2:2;
N    __IO uint32_t GPA3:2;
X    volatile uint32_t GPA3:2;
N    __IO uint32_t GPA4:2;
X    volatile uint32_t GPA4:2;
N    __IO uint32_t GPA5:2;
X    volatile uint32_t GPA5:2;
N    __IO uint32_t GPA6:2;
X    volatile uint32_t GPA6:2;
N    __IO uint32_t GPA7:2;
X    volatile uint32_t GPA7:2;
N    __IO uint32_t GPA8:2;
X    volatile uint32_t GPA8:2;
N    __IO uint32_t GPA9:2;
X    volatile uint32_t GPA9:2;
N    __IO uint32_t GPA10:2;
X    volatile uint32_t GPA10:2;
N    __IO uint32_t GPA11:2;
X    volatile uint32_t GPA11:2;
N    __IO uint32_t GPA12:2;
X    volatile uint32_t GPA12:2;
N    __IO uint32_t GPA13:2;
X    volatile uint32_t GPA13:2;
N    __IO uint32_t GPA14:2;
X    volatile uint32_t GPA14:2;
N    __IO uint32_t GPA15:2;
X    volatile uint32_t GPA15:2;
N} GCR_GPA_ALT_T;
N
Ntypedef struct
N{
N    __IO uint32_t GPB0:2;
X    volatile uint32_t GPB0:2;
N    __IO uint32_t GPB1:2;
X    volatile uint32_t GPB1:2;
N    __IO uint32_t GPB2:2;
X    volatile uint32_t GPB2:2;
N    __IO uint32_t GPB3:2;
X    volatile uint32_t GPB3:2;
N    __IO uint32_t GPB4:2;
X    volatile uint32_t GPB4:2;
N    __IO uint32_t GPB5:2;
X    volatile uint32_t GPB5:2;
N    __IO uint32_t GPB6:2;
X    volatile uint32_t GPB6:2;
N    __IO uint32_t GPB7:2;
X    volatile uint32_t GPB7:2;
N    __I  uint32_t RESERVE:8;
X    volatile const  uint32_t RESERVE:8;
N} GCR_GPB_ALT_T;
N
N
N
Ntypedef struct
N{
N    __I  uint32_t RESERVE:16;
X    volatile const  uint32_t RESERVE:16;
N    __IO uint32_t SCHMITT:16;    
X    volatile uint32_t SCHMITT:16;    
N} GCR_GPB_INP_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  WAKE_DOUT:1;
X    volatile uint32_t  WAKE_DOUT:1;
N    __IO uint32_t  WAKE_OENB:1;
X    volatile uint32_t  WAKE_OENB:1;
N    __IO uint32_t  WAKE_TRI:1;
X    volatile uint32_t  WAKE_TRI:1;
N    __I  uint32_t  WAKE_DIN:1;
X    volatile const  uint32_t  WAKE_DIN:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} GCR_WAKECR_T;
N
Ntypedef __IO uint32_t GCR_REGLOCK_T;
Xtypedef volatile uint32_t GCR_REGLOCK_T;
N
Ntypedef struct
N{
N    __IO uint16_t  TRIM:8;
X    volatile uint16_t  TRIM:8;
N    __IO uint16_t  RANGE:1;
X    volatile uint16_t  RANGE:1;
N    __I  uint16_t  RESERVE:7;
X    volatile const  uint16_t  RESERVE:7;
N}GCR_OSCTRIM_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TRIM:9;
X    volatile uint32_t  TRIM:9;
N    __I  uint32_t  RESERVE1:7;
X    volatile const  uint32_t  RESERVE1:7;
N    __IO uint32_t  TM_REG:5;
X    volatile uint32_t  TM_REG:5;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  IBGEN:2;
X    volatile uint32_t  IBGEN:2;
N    __I  uint32_t  RESERVE3:7;
X    volatile const  uint32_t  RESERVE3:7;
N    __IO uint32_t  TRIM_CLK:1;
X    volatile uint32_t  TRIM_CLK:1;
N}GCR_OSC10K_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  INTSRC:3;
X    volatile uint32_t  INTSRC:3;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N} GCR_INTSRC_T;
N
Ntypedef struct
N{
N    __IO uint32_t  NMISEL:5;
X    volatile uint32_t  NMISEL:5;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  INT_TEST:1;
X    volatile uint32_t  INT_TEST:1;
N    __I  uint32_t  RESERVE1:24;
X    volatile const  uint32_t  RESERVE1:24;
N} GCR_NMISEL_T;
N
N
Ntypedef __IO uint32_t GCR_MCUIRQ_T;
Xtypedef volatile uint32_t GCR_MCUIRQ_T;
N
Ntypedef struct
N{
N    GCR_PDID_T      PDID;   
N    GCR_RSTSRC_T    RSTSRC;
N    GCR_IPRSTC1_T   IPRSTC1;
N    GCR_IPRSTC2_T   IPRSTC2;
N    uint32_t        RESERVE1[8];
N    GCR_GPA_INP_T   GPA_INP;
N    GCR_GPB_INP_T   GPB_INP;
N    GCR_GPA_ALT_T   GPA_ALT;
N    GCR_GPB_ALT_T   GPB_ALT;
N    uint32_t        RESERVE3[5];
N    GCR_WAKECR_T    WAKECR;
N    uint32_t        RESERVE4[42];
N    GCR_REGLOCK_T   REGLOCK;
N    uint32_t        RESERVE5[3];
N    GCR_OSCTRIM_T   OSCTRIM[2];
N    GCR_OSC10K_T    OSC10K;
N}  GCR_T;
N
N
Ntypedef struct
N{
N    GCR_INTSRC_T    INTSRC[32];
N    GCR_NMISEL_T    NMISEL;
N    GCR_MCUIRQ_T    MCUIRQ;   
N} GCR_INT_T;
N
N/*-------------------------- FLASH Memory Controller -------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  ISPEN:1;
X    volatile uint32_t  ISPEN:1;
N    __IO uint32_t  BS:1;
X    volatile uint32_t  BS:1;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __IO uint32_t  CFGUEN:1;
X    volatile uint32_t  CFGUEN:1;
N    __IO uint32_t  LDUEN:1;
X    volatile uint32_t  LDUEN:1;
N    __IO uint32_t  ISPFF:1;
X    volatile uint32_t  ISPFF:1;
N    __IO uint32_t  SWRST:1;
X    volatile uint32_t  SWRST:1;
N    __IO uint32_t  PT:3;
X    volatile uint32_t  PT:3;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __IO uint32_t  ET:3;
X    volatile uint32_t  ET:3;
N    __I  uint32_t  RESERVE2:17;
X    volatile const  uint32_t  RESERVE2:17;
N
N} FMC_ISPCON_T;
N
Ntypedef __IO uint32_t FMC_ISPADR_T;
Xtypedef volatile uint32_t FMC_ISPADR_T;
Ntypedef __IO uint32_t FMC_ISPDAT_T;
Xtypedef volatile uint32_t FMC_ISPDAT_T;
Ntypedef __IO uint32_t FMC_ISPCMD_T;
Xtypedef volatile uint32_t FMC_ISPCMD_T;
Ntypedef __IO uint32_t FMC_ISPTRG_T;
Xtypedef volatile uint32_t FMC_ISPTRG_T;
Ntypedef __I uint32_t  FMC_DFBADR_T;
Xtypedef volatile const uint32_t  FMC_DFBADR_T;
N
N	
N	  
N
N
Ntypedef struct
N{
N    FMC_ISPCON_T    ISPCON;
N    FMC_ISPADR_T    ISPADR;
N    FMC_ISPDAT_T    ISPDAT;
N    FMC_ISPCMD_T    ISPCMD;
N    FMC_ISPTRG_T    ISPTRG;
N    FMC_DFBADR_T    DFBADR;
N	__I uint32_t	RESERVED[3];
X	volatile const uint32_t	RESERVED[3];
N	__IO uint32_t	TRIM_RD;
X	volatile uint32_t	TRIM_RD;
N} FMC_T;
N
N
N
N
N/*------------------------------ PDMA Controller -----------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  PDMACEN:1;
X    volatile uint32_t  PDMACEN:1;
N    __IO uint32_t  SW_RST:1;
X    volatile uint32_t  SW_RST:1;
N    __IO uint32_t  MODE_SEL:2;
X    volatile uint32_t  MODE_SEL:2;
N    __IO uint32_t  SAD_SEL:2;
X    volatile uint32_t  SAD_SEL:2;
N    __IO uint32_t  DAD_SEL:2;
X    volatile uint32_t  DAD_SEL:2;
N    __I  uint32_t  RESERVE0:4;
X    volatile const  uint32_t  RESERVE0:4;
N    __IO uint32_t  WRA_INT_SEL:4;
X    volatile uint32_t  WRA_INT_SEL:4;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  APB_TWS:2;
X    volatile uint32_t  APB_TWS:2;
N    __I  uint32_t  RESERVE2:2;
X    volatile const  uint32_t  RESERVE2:2;
N    __IO uint32_t  TRIG_EN:1;
X    volatile uint32_t  TRIG_EN:1;
N    __I  uint32_t  RESERVE3:8;
X    volatile const  uint32_t  RESERVE3:8;
N} PDMA_CSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CBCR:24;
X    volatile uint32_t  CBCR:24;
N    __I  uint32_t  RESERVE:8;
X    volatile const  uint32_t  RESERVE:8;
N} PDMA_CBCR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TABORT_IE:1;
X    volatile uint32_t  TABORT_IE:1;
N    __IO uint32_t  BLKD_IE:1;
X    volatile uint32_t  BLKD_IE:1;
N    __IO uint32_t  WAR_IE:1;
X    volatile uint32_t  WAR_IE:1;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N} PDMA_IER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  TABORT_IF:1;
X    volatile uint32_t  TABORT_IF:1;
N    __IO uint32_t  BLKD_IF:1;
X    volatile uint32_t  BLKD_IF:1;
N    __I  uint32_t  RESERVE:6;
X    volatile const  uint32_t  RESERVE:6;
N    __IO uint32_t  WAR_IF:4;
X    volatile uint32_t  WAR_IF:4;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  BUSY:1;
X    volatile uint32_t  BUSY:1;
N    __I  uint32_t  RESERVE2:15;
X    volatile const  uint32_t  RESERVE2:15;
N    __IO uint32_t  INTR:1;
X    volatile uint32_t  INTR:1;
N} PDMA_ISR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PDMA_RST:1;
X    volatile uint32_t  PDMA_RST:1;
N    __I  uint32_t  RESERVE0:7;
X    volatile const  uint32_t  RESERVE0:7;
N    __IO uint32_t  HCLK_EN:4;
X    volatile uint32_t  HCLK_EN:4;
N    __I  uint32_t  RESERVE1:20;
X    volatile const  uint32_t  RESERVE1:20;
N} PDMA_GCRCSR_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  SPI0_RXSEL:4;
X    volatile uint32_t  SPI0_RXSEL:4;
N    __IO uint32_t  SPI0_TXSEL:4;
X    volatile uint32_t  SPI0_TXSEL:4;
N    __IO uint32_t  ADC_RXSEL:4;
X    volatile uint32_t  ADC_RXSEL:4;
N    __IO uint32_t  DPWM_TXSEL:4;
X    volatile uint32_t  DPWM_TXSEL:4;
N    __IO uint32_t  UART0_RXSEL:4;
X    volatile uint32_t  UART0_RXSEL:4;
N    __IO uint32_t  UART0_TXSEL:4;
X    volatile uint32_t  UART0_TXSEL:4;
N    __IO uint32_t  I2S_RXSEL:4;
X    volatile uint32_t  I2S_RXSEL:4;
N    __IO uint32_t  I2S_TXSEL:4;
X    volatile uint32_t  I2S_TXSEL:4;
N} PDMA_PDSSR0_T;
N                                                       
Ntypedef __IO uint32_t PDMA_GCRISR_T;
Xtypedef volatile uint32_t PDMA_GCRISR_T;
N
N
Ntypedef struct
N{
N    PDMA_GCRCSR_T   GCR;
N    PDMA_PDSSR0_T   PDSSR;
N    __I  uint32_t   RESERVE;  
X    volatile const  uint32_t   RESERVE;  
N    PDMA_GCRISR_T   GCRISR;  
N} PDMA_GCR_T;
N
Ntypedef struct 
N{
N    PDMA_CSR_T      CSR;
N    __IO uint32_t   SAR;
X    volatile uint32_t   SAR;
N    __IO uint32_t   DAR;
X    volatile uint32_t   DAR;
N    __IO uint32_t   BCR;
X    volatile uint32_t   BCR;
N    __I  uint32_t   POINT;
X    volatile const  uint32_t   POINT;
N    __I  uint32_t   CSAR;
X    volatile const  uint32_t   CSAR;
N    __I  uint32_t   CDAR;
X    volatile const  uint32_t   CDAR;
N    PDMA_CBCR_T     CBCR;
N    PDMA_IER_T      IER;
N    PDMA_ISR_T      ISR;
N    __I  uint32_t   RESERVED0[54];
X    volatile const  uint32_t   RESERVED0[54];
N} PDMA_T;
N
N	
Ntypedef struct {
N    PDMA_T          channel[4];
N    __I  uint32_t   RESERVE[704];
X    volatile const  uint32_t   RESERVE[704];
N    PDMA_GCRCSR_T   GCR;
N    PDMA_PDSSR0_T   PDSSR;
N    __I  uint32_t   RESERVED;
X    volatile const  uint32_t   RESERVED;
N    PDMA_GCRISR_T   GCRISR;  
N} PDMA_PERIPH_T;
N
N/*----------------------------- PWM Controller -------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  CP01:8;
X    volatile uint32_t  CP01:8;
N    __I  uint32_t  RESERVE0:8;
X    volatile const  uint32_t  RESERVE0:8;
N    __IO uint32_t  DZI01:8;
X    volatile uint32_t  DZI01:8;
N    __I  uint32_t  RESERVE1:8;
X    volatile const  uint32_t  RESERVE1:8;
N} PWM_PPR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CSR0:3;
X    volatile uint32_t  CSR0:3;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CSR1:3;
X    volatile uint32_t  CSR1:3;
N    __I  uint32_t  RESERVE1:1;
X    volatile const  uint32_t  RESERVE1:1;
N    __I  uint32_t  RESERVE3:24;
X    volatile const  uint32_t  RESERVE3:24;
N} PWM_CSR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  CH0EN:1;
X    volatile uint32_t  CH0EN:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CH0INV:1;
X    volatile uint32_t  CH0INV:1;
N    __IO uint32_t  CH0MOD:1;
X    volatile uint32_t  CH0MOD:1;
N    __IO uint32_t  DZEN01:1;
X    volatile uint32_t  DZEN01:1;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  CH1EN:1;
X    volatile uint32_t  CH1EN:1;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  CH1INV:1;
X    volatile uint32_t  CH1INV:1;
N    __IO uint32_t  CH1MOD:1;
X    volatile uint32_t  CH1MOD:1;
N    __I  uint32_t  RESERVE3:4;
X    volatile const  uint32_t  RESERVE3:4;
N    __I  uint32_t  RESERVE4:16;
X    volatile const  uint32_t  RESERVE4:16;
N} PWM_PCR_T;
N
Ntypedef __IO uint32_t PWM_CNR_T;
Xtypedef volatile uint32_t PWM_CNR_T;
N
Ntypedef __IO uint32_t PWM_CMR_T;
Xtypedef volatile uint32_t PWM_CMR_T;
N
Ntypedef __I  uint32_t PWM_PDR_T;
Xtypedef volatile const  uint32_t PWM_PDR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PWMIE0:1;
X    volatile uint32_t  PWMIE0:1;
N    __IO uint32_t  PWMIE1:1;
X    volatile uint32_t  PWMIE1:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} PWM_PIER_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PWMIF0:1;
X    volatile uint32_t  PWMIF0:1;
N    __IO uint32_t  PWMIF1:1;
X    volatile uint32_t  PWMIF1:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} PWM_PIFR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  INV0:1;
X    volatile uint32_t  INV0:1;
N    __IO uint32_t  CRL_IE0:1;
X    volatile uint32_t  CRL_IE0:1;
N    __IO uint32_t  CFL_IE0:1;
X    volatile uint32_t  CFL_IE0:1;
N    __IO uint32_t  CAPCH0EN:1;
X    volatile uint32_t  CAPCH0EN:1;
N    __IO uint32_t  CAPIF0:1;
X    volatile uint32_t  CAPIF0:1;
N    __I  uint32_t  RESERVE0:1;
X    volatile const  uint32_t  RESERVE0:1;
N    __IO uint32_t  CRLRI0:1;
X    volatile uint32_t  CRLRI0:1;
N    __IO uint32_t  CFLRI0:1;
X    volatile uint32_t  CFLRI0:1;
N    __I  uint32_t  RESERVE1:8;
X    volatile const  uint32_t  RESERVE1:8;
N    __IO uint32_t  INV1:1;
X    volatile uint32_t  INV1:1;
N    __IO uint32_t  CRL_IE1:1;
X    volatile uint32_t  CRL_IE1:1;
N    __IO uint32_t  CFL_IE1:1;
X    volatile uint32_t  CFL_IE1:1;
N    __IO uint32_t  CAPCH1EN:1;
X    volatile uint32_t  CAPCH1EN:1;
N    __IO uint32_t  CAPIF1:1;
X    volatile uint32_t  CAPIF1:1;
N    __I  uint32_t  RESERVE2:1;
X    volatile const  uint32_t  RESERVE2:1;
N    __IO uint32_t  CRLRI1:1;
X    volatile uint32_t  CRLRI1:1;
N    __IO uint32_t  CFLRI1:1;
X    volatile uint32_t  CFLRI1:1;
N    __I  uint32_t  RESERVE3:8;
X    volatile const  uint32_t  RESERVE3:8;
N} PWM_CCR0_T;
N
Ntypedef __IO uint32_t PWM_CRLR_T;
Xtypedef volatile uint32_t PWM_CRLR_T;
N
Ntypedef __IO uint32_t PWM_CFLR_T;
Xtypedef volatile uint32_t PWM_CFLR_T;
N
Ntypedef __IO uint32_t PWM_CAPENR_T;
Xtypedef volatile uint32_t PWM_CAPENR_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PWM0:1;
X    volatile uint32_t  PWM0:1;
N    __IO uint32_t  PWM1:1;
X    volatile uint32_t  PWM1:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N} PWM_POE_T;
N
N
Ntypedef struct
N{
N    PWM_PPR_T       PPR;
N    PWM_CSR_T       CSR;
N    PWM_PCR_T       PCR;
N    PWM_CNR_T       CNR0;
N    PWM_CMR_T       CMR0;
N    PWM_PDR_T       PDR0;
N    PWM_CNR_T       CNR1;
N    PWM_CMR_T       CMR1;
N    PWM_PDR_T       PDR1;
N    __I uint32_t    RESERVE0[7];
X    volatile const uint32_t    RESERVE0[7];
N    PWM_PIER_T      PIER;
N    PWM_PIFR_T      PIFR;
N    __I uint32_t    RESERVE1[2];
X    volatile const uint32_t    RESERVE1[2];
N    PWM_CCR0_T      CCR0;
N    __I uint32_t    RESERVE2;
X    volatile const uint32_t    RESERVE2;
N    PWM_CRLR_T      CRLR0;
N    PWM_CFLR_T      CFLR0;
N    PWM_CRLR_T      CRLR1;
N    PWM_CFLR_T      CFLR1;
N    __I uint32_t    RESERVE3[4];
X    volatile const uint32_t    RESERVE3[4];
N    PWM_CAPENR_T    CAPENR;
N    PWM_POE_T       POE;    
N        
N    
N} PWM_T;
N
N//---------------------------- Audio Digital PWM (DPWM) ------------------------
Ntypedef struct
N{
N    __IO uint32_t Freq:3;
X    volatile uint32_t Freq:3;
N    __IO uint32_t Deadtime:1;
X    volatile uint32_t Deadtime:1;
N    __IO uint32_t Dither:2;
X    volatile uint32_t Dither:2;
N    __IO uint32_t Enable:1;
X    volatile uint32_t Enable:1;
N	__IO uint32_t EnGPIO:1;
X	volatile uint32_t EnGPIO:1;
N    __I  uint32_t RESERVE:24;
X    volatile const  uint32_t RESERVE:24;
N} DPWM_CTRL_T;
N
Ntypedef struct
N{
N    __I uint32_t Full:1;
X    volatile const uint32_t Full:1;
N    __I uint32_t Empty:1;
X    volatile const uint32_t Empty:1;
N    __I uint32_t RESERVE:30;
X    volatile const uint32_t RESERVE:30;
N}DPWM_STAT_T;
Ntypedef struct
N{
N    __IO uint32_t EnablePDMA:1;
X    volatile uint32_t EnablePDMA:1;
N    __I  uint32_t RESERVE:31;
X    volatile const  uint32_t RESERVE:31;
N}DPWM_PDMA_T;
N//---------------------------------------
N//	DPWM->FIFO is writtable	only
N//     It is a 16-deep fifo each 16bit wide
N//  ZOH_DIV is the upsample ratio of the zeroth order hold
N//     The consumption rate of the PWM_fifo is calculated by
N//     Freq(HCLK) / (ZOH_DIV * 64), where 64 is the upsampling ratio of the CIC filter
N// 
N//----------------------------------------
N
Ntypedef struct
N{
N    DPWM_CTRL_T CTRL;
N    DPWM_STAT_T STAT;
N    DPWM_PDMA_T DMA;
N    __O uint32_t FIFO;
X    volatile uint32_t FIFO;
N    __IO uint32_t ZOH_DIV; 
X    volatile uint32_t ZOH_DIV; 
N} DPWM_T;
N
N/*----------------------------- I2S Controller -------------------------------*/
N
Ntypedef struct
N{
N    __IO uint32_t  I2SEN:1;
X    volatile uint32_t  I2SEN:1;
N    __IO uint32_t  TXEN:1;
X    volatile uint32_t  TXEN:1;
N    __IO uint32_t  RXEN:1;
X    volatile uint32_t  RXEN:1;
N    __IO uint32_t  MUTE:1;
X    volatile uint32_t  MUTE:1;
N    __IO uint32_t  WORDWIDTH:2;
X    volatile uint32_t  WORDWIDTH:2;
N    __IO uint32_t  MONO:1;
X    volatile uint32_t  MONO:1;
N    __IO uint32_t  FORMAT:1;
X    volatile uint32_t  FORMAT:1;
N    __IO uint32_t  SLAVE:1;
X    volatile uint32_t  SLAVE:1;
N    __IO uint32_t  TXTH:3;
X    volatile uint32_t  TXTH:3;
N    __IO uint32_t  RXTH:3;
X    volatile uint32_t  RXTH:3;
N    __IO uint32_t  MCLKEN:1;
X    volatile uint32_t  MCLKEN:1;
N    __IO uint32_t  RCHZCEN:1;
X    volatile uint32_t  RCHZCEN:1;
N    __IO uint32_t  LCHZCEN:1;
X    volatile uint32_t  LCHZCEN:1;
N    __IO uint32_t  CLR_TXFIFO:1;
X    volatile uint32_t  CLR_TXFIFO:1;
N    __IO uint32_t  CLR_RXFIFO:1;
X    volatile uint32_t  CLR_RXFIFO:1;
N    __IO uint32_t  TXDMA:1;
X    volatile uint32_t  TXDMA:1;
N    __IO uint32_t  RXDMA:1;	
X    volatile uint32_t  RXDMA:1;	
N    __I  uint32_t  RESERVE:10;
X    volatile const  uint32_t  RESERVE:10;
N} I2S_CON_T;
N
Ntypedef struct
N{
N    __IO uint32_t  MCLK_DIV:3;
X    volatile uint32_t  MCLK_DIV:3;
N    __I  uint32_t  RESERVE0:5;
X    volatile const  uint32_t  RESERVE0:5;
N    __IO uint32_t  BCLK_DIV:8;
X    volatile uint32_t  BCLK_DIV:8;
N    __I  uint32_t  RESERVE1:16;
X    volatile const  uint32_t  RESERVE1:16;
N} I2S_CLKDIV_T;
N
Ntypedef struct
N{
N    __IO uint32_t  RXUDFIE:1;
X    volatile uint32_t  RXUDFIE:1;
N    __IO uint32_t  RXOVFIE:1;
X    volatile uint32_t  RXOVFIE:1;
N    __IO uint32_t  RXTHIE:1;
X    volatile uint32_t  RXTHIE:1;
N    __I  uint32_t  RESERVE0:5;
X    volatile const  uint32_t  RESERVE0:5;
N    __IO uint32_t  TXUDFIE:1;
X    volatile uint32_t  TXUDFIE:1;
N    __IO uint32_t  TXOVFIE:1;
X    volatile uint32_t  TXOVFIE:1;
N    __IO uint32_t  TXTHIE:1;
X    volatile uint32_t  TXTHIE:1;
N    __IO uint32_t  RZCIE:1;
X    volatile uint32_t  RZCIE:1;
N    __IO uint32_t  LZCIE:1;
X    volatile uint32_t  LZCIE:1;
N    __I  uint32_t  RESERVE1:19;
X    volatile const  uint32_t  RESERVE1:19;
N} I2S_IE_T;
N
Ntypedef struct
N{
N    __I  uint32_t  I2SINT:1;
X    volatile const  uint32_t  I2SINT:1;
N    __I  uint32_t  I2SRXINT:1;
X    volatile const  uint32_t  I2SRXINT:1;
N    __I  uint32_t  I2STXINT:1;
X    volatile const  uint32_t  I2STXINT:1;
N    __I  uint32_t  RIGHT:1;
X    volatile const  uint32_t  RIGHT:1;
N    __I  uint32_t  RESERVE0:4;
X    volatile const  uint32_t  RESERVE0:4;
N    __IO uint32_t  RXUDF:1;
X    volatile uint32_t  RXUDF:1;
N    __IO uint32_t  RXOVF:1;
X    volatile uint32_t  RXOVF:1;
N    __I  uint32_t  RXTHF:1;
X    volatile const  uint32_t  RXTHF:1;
N    __I  uint32_t  RXFULL:1;
X    volatile const  uint32_t  RXFULL:1;
N    __I  uint32_t  RXEMPTY:1;
X    volatile const  uint32_t  RXEMPTY:1;
N    __I  uint32_t  RESERVE1:3;
X    volatile const  uint32_t  RESERVE1:3;
N    __IO uint32_t  TXUDF:1;
X    volatile uint32_t  TXUDF:1;
N    __IO uint32_t  TXOVF:1;
X    volatile uint32_t  TXOVF:1;
N    __I  uint32_t  TXTHF:1;
X    volatile const  uint32_t  TXTHF:1;
N    __I  uint32_t  TXFULL:1;
X    volatile const  uint32_t  TXFULL:1;
N    __I  uint32_t  TXEMPTY:1;
X    volatile const  uint32_t  TXEMPTY:1;
N    __I  uint32_t  TXBUSY:1;
X    volatile const  uint32_t  TXBUSY:1;
N    __IO uint32_t  RZCF:1;
X    volatile uint32_t  RZCF:1;
N    __IO uint32_t  LZCF:1;	
X    volatile uint32_t  LZCF:1;	
N    __I  uint32_t  RX_LEVEL:4;
X    volatile const  uint32_t  RX_LEVEL:4;
N    __I  uint32_t  TX_LEVEL:4;
X    volatile const  uint32_t  TX_LEVEL:4;
N} I2S_STATUS_T;
N
Ntypedef __O uint32_t I2S_TXFIFO_T;
Xtypedef volatile uint32_t I2S_TXFIFO_T;
Ntypedef __I uint32_t I2S_RXFIFO_T;
Xtypedef volatile const uint32_t I2S_RXFIFO_T;
N
Ntypedef struct
N{
N    I2S_CON_T        CON;
N    I2S_CLKDIV_T     CLKDIV;
N    I2S_IE_T      	 IE;
N    I2S_STATUS_T     STATUS;
N    I2S_TXFIFO_T     TXFIFO;
N    I2S_RXFIFO_T     RXFIFO;
N} I2S_T;
N
N/*----------------------------- Analog Controller -------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  PULLDOWN:1;
X    volatile uint32_t  PULLDOWN:1;
N    __IO uint32_t  PDLORES:1;
X    volatile uint32_t  PDLORES:1;
N    __IO uint32_t  PDHIRES:1;
X    volatile uint32_t  PDHIRES:1;
N    __I  uint32_t  RESERVE:29;
X    volatile const  uint32_t  RESERVE:29;
N	
N} ANA_VMID_T; 
N
Ntypedef struct
N{
N    __IO uint32_t  FM_SEL:2;
X    volatile uint32_t  FM_SEL:2;
N    __I  uint32_t  FM_DONE:1;
X    volatile const  uint32_t  FM_DONE:1;
N    __I  uint32_t  RESERVE:13;
X    volatile const  uint32_t  RESERVE:13;
N    __IO uint32_t  FM_CYCLE:8;
X    volatile uint32_t  FM_CYCLE:8;
N    __I  uint32_t  RESERVE1:7;
X    volatile const  uint32_t  RESERVE1:7;
N    __IO uint32_t  FM_GO:1;
X    volatile uint32_t  FM_GO:1;
N} FREQ_MEAS_T; 
N
Ntypedef struct
N{
N    __IO uint32_t  LOW_TIME:2;	     // [1:0] 00=1, 01=2, 10=8, 11=16
X    volatile uint32_t  LOW_TIME:2;	     
N    __IO uint32_t  CYCLE_CNT:3;		 // [4:2] =2^CYCLE_CNT
X    volatile uint32_t  CYCLE_CNT:3;		 
N    __IO uint32_t  REF_CLK_MODE:1;	 // [5]
X    volatile uint32_t  REF_CLK_MODE:1;	 
N    __I  uint32_t  RESERVE0:2;		 // [7:6]
X    volatile const  uint32_t  RESERVE0:2;		 
N    __IO uint32_t  CLK_DIV:8;		 // [15:8]
X    volatile uint32_t  CLK_DIV:8;		 
N    __I  uint32_t  RESERVE:13;		 // [28:16]
X    volatile const  uint32_t  RESERVE:13;		 
N    __IO uint32_t  RST_CNT:1;		 // [29]
X    volatile uint32_t  RST_CNT:1;		 
N    __IO uint32_t  INT_EN:1;		 // [30]
X    volatile uint32_t  INT_EN:1;		 
N    __IO uint32_t  CNT_EN:1;		 // [31]
X    volatile uint32_t  CNT_EN:1;		 
N} CAPS_CTRL_T;
N
Ntypedef struct
N{
N    __IO uint32_t  EN:8;
X    volatile uint32_t  EN:8;
N    __IO uint32_t  VAL:2;
X    volatile uint32_t  VAL:2;
N    __I  uint32_t  RESERVE:22;
X    volatile const  uint32_t  RESERVE:22;
N
N} ISRC_CTRL_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PD:1;
X    volatile uint32_t  PD:1;
N    __IO uint32_t  DISCH:1;
X    volatile uint32_t  DISCH:1;
N    __I  uint32_t  RESERVE:30;
X    volatile const  uint32_t  RESERVE:30;
N
N} LDO_PD_T;
N
Ntypedef struct
N{
N    __IO uint32_t  MUXN_SEL:8;
X    volatile uint32_t  MUXN_SEL:8;
N    __IO uint32_t  MUXP_SEL:4;
X    volatile uint32_t  MUXP_SEL:4;
N    __IO uint32_t  TEMP_SEL:1;
X    volatile uint32_t  TEMP_SEL:1;
N    __IO uint32_t  MIC_SEL:1;
X    volatile uint32_t  MIC_SEL:1;
N    __IO uint32_t  EN:1;
X    volatile uint32_t  EN:1;
N    __I  uint32_t  RESERVE:17;
X    volatile const  uint32_t  RESERVE:17;
N} ANA_AMUX_T;
N
N
N
N
Ntypedef struct
N{
N    __I  uint8_t   OSCTRIM;
X    volatile const  uint8_t   OSCTRIM;
N    __I  uint8_t   COARSE;
X    volatile const  uint8_t   COARSE;
N    __IO int8_t    SUPERFINE;
X    volatile int8_t    SUPERFINE;
N    __I  uint8_t   RESERVE;
X    volatile const  uint8_t   RESERVE;
N} ANA_OSCTRIM_T;
N
N
Ntypedef struct
N{
N    __IO uint32_t  REF_SEL:1;
X    volatile uint32_t  REF_SEL:1;
N    __IO uint32_t  PU_PGA:1;
X    volatile uint32_t  PU_PGA:1;
N    __IO uint32_t  PU_IPBOOST:1;
X    volatile uint32_t  PU_IPBOOST:1;
N    __IO uint32_t  BOOSTGAIN:1;
X    volatile uint32_t  BOOSTGAIN:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} ANA_PGAEN_T;
N
Ntypedef struct
N{
N    __IO uint32_t  PU_ZCD:1;
X    volatile uint32_t  PU_ZCD:1;
N    __IO uint32_t  PU_BUFPGA:1;
X    volatile uint32_t  PU_BUFPGA:1;
N    __IO uint32_t  PU_BUFADC:1;
X    volatile uint32_t  PU_BUFADC:1;
N    __IO uint32_t  PU_IBGEN:1;
X    volatile uint32_t  PU_IBGEN:1;
N    __IO uint32_t  PU_MOD:1;
X    volatile uint32_t  PU_MOD:1;
N    __IO uint32_t  MUTE_PGA:1;
X    volatile uint32_t  MUTE_PGA:1;
N    __IO uint32_t  MUTE_IPBOOST:1;
X    volatile uint32_t  MUTE_IPBOOST:1;
N    __I  uint32_t  RESERVE:25;
X    volatile const  uint32_t  RESERVE:25;
N} ANA_SIGCTRL_T;
N
Ntypedef struct
N{
N    __IO uint32_t  GAIN:6;
X    volatile uint32_t  GAIN:6;
N    __I  uint32_t  RESERVE0:2;
X    volatile const  uint32_t  RESERVE0:2;
N    __I  uint32_t  GAIN_READ:6;
X    volatile const  uint32_t  GAIN_READ:6;
N    __I  uint32_t  RESERVE1:18;
X    volatile const  uint32_t  RESERVE1:18;
N
N} ANA_PGAGAIN_T;
N
Ntypedef struct
N{
N    ANA_VMID_T      VMID;           // 00
N    __I  uint32_t	RESERVE0;       //
X    volatile const  uint32_t	RESERVE0;       
N    ISRC_CTRL_T		ISRC;           // 08             
N    __IO uint32_t	RESERVE1[5];
X    volatile uint32_t	RESERVE1[5];
N    __IO uint32_t	LDOSET;         
X    volatile uint32_t	LDOSET;         
N    LDO_PD_T    	LDOPD;
N    __IO uint32_t	MICBSEL;
X    volatile uint32_t	MICBSEL;
N    __IO uint32_t	MICBEN;
X    volatile uint32_t	MICBEN;
N    __I  uint32_t	RESERVE2[2];
X    volatile const  uint32_t	RESERVE2[2];
N    __IO uint32_t	VSET;
X    volatile uint32_t	VSET;
N    __IO uint32_t	TMPOWER;
X    volatile uint32_t	TMPOWER;
N    __IO uint32_t	TMANALOG;
X    volatile uint32_t	TMANALOG;
N    __I  uint32_t	RESERVE3[3];
X    volatile const  uint32_t	RESERVE3[3];
N    ANA_AMUX_T		AMUX;
N	__IO uint32_t	AMUX_B1;
X	volatile uint32_t	AMUX_B1;
N    __I  uint32_t	RESERVE4[2];
X    volatile const  uint32_t	RESERVE4[2];
N    ANA_PGAEN_T 	PGAEN;
N    ANA_SIGCTRL_T	SIGCTRL;
N    ANA_PGAGAIN_T	PGA_GAIN;
N    __I  uint32_t	RESERVE5[5];
X    volatile const  uint32_t	RESERVE5[5];
N    __IO uint32_t	TMOSC;
X    volatile uint32_t	TMOSC;
N    ANA_OSCTRIM_T	TRIM;
N    __I  uint32_t	FINETRIM;
X    volatile const  uint32_t	FINETRIM;
N    CAPS_CTRL_T 	CAPS_CTRL;
N    __I  uint32_t	CAPS_CNT;
X    volatile const  uint32_t	CAPS_CNT;
N    FREQ_MEAS_T   	FREQ_CTRL;
N    __I  uint32_t	FREQ_CNT;
X    volatile const  uint32_t	FREQ_CNT;
N} ANA_T;
N
N/*------------------------------- BOD Controller -------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  BOD_LVL:3;
X    volatile uint32_t  BOD_LVL:3;
N    __IO uint32_t  BOD_HYS:1;
X    volatile uint32_t  BOD_HYS:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} BOD_SEL_T;
N
Ntypedef struct
N{
N    __IO uint32_t  EN:2;
X    volatile uint32_t  EN:2;
N    __IO uint32_t  IE:1;
X    volatile uint32_t  IE:1;
N    __IO uint32_t  INT:1;
X    volatile uint32_t  INT:1;
N    __I  uint32_t  BOD_OUT:1;
X    volatile const  uint32_t  BOD_OUT:1;
N    __I  uint32_t  RESERVE:27;
X    volatile const  uint32_t  RESERVE:27;
N} BOD_EN_T;
N
Ntypedef struct
N{
N    __IO uint32_t  LVL:4;
X    volatile uint32_t  LVL:4;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} TALARM_SEL_T;
N
Ntypedef struct
N{
N    __IO uint32_t  EN:1;
X    volatile uint32_t  EN:1;
N    __I  uint32_t  TALARM:1;
X    volatile const  uint32_t  TALARM:1;
N    __IO uint32_t  IE:1;
X    volatile uint32_t  IE:1;
N    __IO uint32_t  INT:1;
X    volatile uint32_t  INT:1;
N    __I  uint32_t  RESERVE:28;
X    volatile const  uint32_t  RESERVE:28;
N} TALARM_EN_T;
N
Ntypedef struct
N{
N    __IO uint32_t  OFF_DUR:16;
X    volatile uint32_t  OFF_DUR:16;
N    __IO uint32_t  ON_DUR:4;
X    volatile uint32_t  ON_DUR:4;
N    __I  uint32_t  RESERVE:12;
X    volatile const  uint32_t  RESERVE:12;
N} DET_TIMER_T;
N
Ntypedef struct
N{
N    BOD_SEL_T     BOD_SEL;
N    BOD_EN_T      BOD_EN;
N    TALARM_SEL_T  TALARM_SEL;
N    TALARM_EN_T   TALARM_EN;
N    DET_TIMER_T   DET_TIMER;
N} BOD_T;
N
N/*----------------------------- BIQ Controller -------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  EN:1;       //0
X    volatile uint32_t  EN:1;       
N    __IO uint32_t  SELPWM:1;   //1
X    volatile uint32_t  SELPWM:1;   
N    __IO uint32_t  PRGCOEF:1;  //2
X    volatile uint32_t  PRGCOEF:1;  
N    __IO uint32_t  RSTn:1;     //3
X    volatile uint32_t  RSTn:1;     
N    __IO uint32_t  UPSR:3;     //4:6
X    volatile uint32_t  UPSR:3;     
N    __I  uint32_t  RESERVE2:9; //7:15
X    volatile const  uint32_t  RESERVE2:9; 
N    __IO uint32_t  SR_DIV:13;  //16:28
X    volatile uint32_t  SR_DIV:13;  
N    __I  uint32_t  RESERVE3:2; //29:30
X    volatile const  uint32_t  RESERVE3:2; 
N	__IO uint32_t  AGC_BIQ_SELn:1; // 31
X	volatile uint32_t  AGC_BIQ_SELn:1; 
N} BIQ_CTRL_T;
N
Ntypedef struct
N{
N    __IO uint32_t  BIST:1;
X    volatile uint32_t  BIST:1;
N    __I uint32_t   FAIL:1;
X    volatile const uint32_t   FAIL:1;
N    __I uint32_t   DONE:1;
X    volatile const uint32_t   DONE:1;
N    __I  uint32_t  RESERVE1:28;
X    volatile const  uint32_t  RESERVE1:28;
N} BIQ_TST_T;
N
Ntypedef struct
N{
N    __IO uint32_t  BIQ_COEFF[16]; //BIQ_BA + 0x00
X    volatile uint32_t  BIQ_COEFF[16]; 
N    BIQ_CTRL_T     BIQ_CTRL;      //BIQ_BA + 0x40
N    BIQ_TST_T      BIQ_TEST;      //BIQ_BA + 0x44 
N} BIQ_T;
N
N/*------------------------------- ALC (Automatic Level Control ----------------*/
Ntypedef struct
N{
N    __IO uint32_t  NGTH:3;        // 2:0
X    volatile uint32_t  NGTH:3;        
N    __IO uint32_t  NGEN:1;        // 3
X    volatile uint32_t  NGEN:1;        
N    __IO uint32_t  ALCATK:4;      // 7:4
X    volatile uint32_t  ALCATK:4;      
N    __IO uint32_t  ALCDCY:4;      // 11:8
X    volatile uint32_t  ALCDCY:4;      
N    __IO uint32_t  ALCMODE:1;     // 12
X    volatile uint32_t  ALCMODE:1;     
N    __IO uint32_t  ALCLVL:4;      // 16:13
X    volatile uint32_t  ALCLVL:4;      
N    __IO uint32_t  ALCHLD:4;      // 20:17
X    volatile uint32_t  ALCHLD:4;      
N    __IO uint32_t  ALCZC:1;       // 21
X    volatile uint32_t  ALCZC:1;       
N    __IO uint32_t  ALCMIN:3;      // 24:22
X    volatile uint32_t  ALCMIN:3;      
N    __IO uint32_t  ALCMAX:3;      // 27:25
X    volatile uint32_t  ALCMAX:3;      
N    __IO uint32_t  ALCSEL:1;      // 28
X    volatile uint32_t  ALCSEL:1;      
N    __IO uint32_t  ALCNGSEL:1;    // 29
X    volatile uint32_t  ALCNGSEL:1;    
N    __IO uint32_t  ALCPKSEL:1;    // 30
X    volatile uint32_t  ALCPKSEL:1;    
N    __IO uint32_t  ALCPKLIM:1;    // 31
X    volatile uint32_t  ALCPKLIM:1;    
N} ALC_REG_T;
N
Ntypedef struct
N{
N    __I uint32_t   FAST_DEC:1;    // 0
X    volatile const uint32_t   FAST_DEC:1;    
N    __I uint32_t   NOISE:1;       // 1
X    volatile const uint32_t   NOISE:1;       
N    __I uint32_t   P2P:9;         // 11:3
X    volatile const uint32_t   P2P:9;         
N    __I uint32_t   PEAK:9;        // 
X    volatile const uint32_t   PEAK:9;        
N    __I uint32_t   RESERVE:12;    // 
X    volatile const uint32_t   RESERVE:12;    
N	
N} ALC_STATUS_T;
Ntypedef struct
N{
N    __IO uint32_t   INT:1;    // 0
X    volatile uint32_t   INT:1;    
N    __I uint32_t   RESERVE:31; // 
X    volatile const uint32_t   RESERVE:31; 
N	
N} ALC_INT_T;
Ntypedef struct
N{
N    __IO uint32_t   EN;    // 0
X    volatile uint32_t   EN;    
N    __I uint32_t   RESERVE:31; // 
X    volatile const uint32_t   RESERVE:31; 
N	
N} ALC_INTEN_T;
N
Ntypedef struct
N{
N    ALC_REG_T      ALC_CTRL;       //ALC_BA + 0x0
N    ALC_STATUS_T   ALC_STATUS;    //ALC_BA + 0x4
N    ALC_INT_T      ALC_INT;       //ALC_BA + 0x8
N    ALC_INTEN_T    ALC_INTEN;     //ALC_BA + 0xC
N} ALC_T;
N
N/*----------------------------- CRC Controller -------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t  LEN:9;
X    volatile uint32_t  LEN:9;
N    __I  uint32_t  RESERVE1:7;
X    volatile const  uint32_t  RESERVE1:7;
N    __IO uint32_t  LSB:1;
X    volatile uint32_t  LSB:1;
N    __I  uint32_t  RESERVE2:15;
X    volatile const  uint32_t  RESERVE2:15;
N} CRC_EN_T;
N
Ntypedef struct
N{
N    CRC_EN_T       CRC_EN;
N    __IO uint32_t  CRC_IN;
X    volatile uint32_t  CRC_IN;
N    __I  uint32_t  CRC_OUT;
X    volatile const  uint32_t  CRC_OUT;
N} CRC_T;
N
N/*----------------------------- SBRAM Controller -------------------------------*/
Ntypedef struct
N{
N    __IO uint32_t	D[64];
X    volatile uint32_t	D[64];
N} SBRAM_T;
N
N
N/******************************************************************************/
N/*                         Peripheral memory map                              */
N/******************************************************************************/
N/** @addtogroup ISD91XX_MemoryMap ISD91XX Memory Mapping
N    @{
N*/
N/* Peripheral and SRAM base address */
N#define FLASH_BA          ((     uint32_t)0x00000000)
N#define SRAM_BA           ((     uint32_t)0x20000000)
N#define AHB_BA            ((     uint32_t)0x50000000)
N#define APB1_BA           ((     uint32_t)0x40000000)
N
N/* Peripheral memory map */
N
N#define WDT_BA       	   (APB1_BA      + 0x04000)  
N#define RTC_BA             (APB1_BA      + 0x08000)
N#define TIMER0_BA          (APB1_BA      + 0x10000)  
N#define TIMER1_BA          (APB1_BA      + 0x10020)  
N#define I2C0_BA            (APB1_BA      + 0x20000)
N#define SPI0_BA            (APB1_BA      + 0x30000)
N#define PWMA_BA            (APB1_BA      + 0x40000)
N#define UART0_BA           (APB1_BA      + 0x50000)
N#define DPWM_BA            (APB1_BA      + 0x70000)
N#define ANA_BA             (APB1_BA      + 0x80000)
N#define BOD_BA             (APB1_BA      + 0x84000)
N#define CRC_BA             (APB1_BA      + 0x90000)
N#define I2S_BA             (APB1_BA      + 0xA0000)
N#define BIQ_BA             (APB1_BA      + 0xB0000)
N#define ALC_BA             (APB1_BA      + 0xB0048)
N#define ACMP_BA            (APB1_BA      + 0xD0000)
N#define ADC_BA             (APB1_BA      + 0xE0000)
N#define SBRAM_BA           (APB1_BA      + 0xF0000)   
N
N#define GCR_BA             (AHB_BA       + 0x00000)
N#define CLK_BA             (AHB_BA       + 0x00200)
N#define INT_BA             (AHB_BA       + 0x00300)
N#define GPIO_MAP_BA        (AHB_BA       + 0x00400)
N#define GPIO_BA            (AHB_BA       + 0x4000)
N#define GPIOA_BA           (GPIO_BA               )
N#define GPIOB_BA           (GPIO_BA      + 0x0040)
N#define GPIO_DBNCECON_BA   (GPIO_BA      + 0x0180)
N
N#define PDMA_BA            (AHB_BA       + 0x08000)
N#define PDMA0_BA           (AHB_BA       + 0x08000)
N#define PDMA1_BA           (AHB_BA       + 0x08100)
N#define PDMA2_BA           (AHB_BA       + 0x08200)
N#define PDMA3_BA           (AHB_BA       + 0x08300)
N#define PDMA_GCR_BA        (AHB_BA       + 0x08F00)
N
N#define FMC_BA             (AHB_BA       + 0x0C000)
N/*@}*/ /* end of group ISD91XX_MemoryMap */
N
N/******************************************************************************/
N/*                         Peripheral declaration                             */
N/******************************************************************************/
N/** @addtogroup ISD91XX_PeripheralDecl ISD91XX Peripheral Declaration
N    @{
N*/
N#define GPIOA               ((GPIO_T *) GPIOA_BA)
N#define GPIOB               ((GPIO_T *) GPIOB_BA)
N#define GPIO_DBNCECON       ((GPIO_DBNCECON_T *) GPIO_DBNCECON_BA)
N
N#define UART0               ((UART_T *) UART0_BA)
N#define DPWM                ((DPWM_T *) DPWM_BA)
N
N#define TIMER0              ((TIMER_T *) TIMER0_BA)
N#define TIMER1              ((TIMER_T *) TIMER1_BA)
N
N#define WDT                 ((WDT_T *) WDT_BA)
N
N#define SPI0                ((SPI_T *) SPI0_BA)
N
N#define I2C0                ((I2C_T *) I2C0_BA)
N
N#define I2S                 ((I2S_T *) I2S_BA)
N
N#define RTC                 ((RTC_T *) RTC_BA)
N
N#define SDADC               ((SDADC_T*) ADC_BA)
N
N#define ACMP                ((ACMP_T *) ACMP_BA)
N#define ANA					((ANA_T *) ANA_BA)
N#define BOD                 ((BOD_T *) BOD_BA)
N#define CRC                 ((CRC_T *) CRC_BA)
N#define BIQ                 ((BIQ_T *) BIQ_BA)
N#define ALC                 ((ALC_T *) ALC_BA)
N#define SBRAM				((SBRAM_T *) SBRAM_BA)
N
N#define SYSCLK              ((SYSCLK_T *)CLK_BA)
N#define SYS                 ((GCR_T *) GCR_BA)
N
N#define SYSINT              ((GCR_INT_T *) INT_BA)
N
N#define FMC                 ((FMC_T *) FMC_BA)
N
N#define PDMA0               ((PDMA_T *) PDMA0_BA)
N#define PDMA1               ((PDMA_T *) PDMA1_BA)
N#define PDMA2               ((PDMA_T *) PDMA2_BA)
N#define PDMA3               ((PDMA_T *) PDMA3_BA)
N#define PDMA_GCR            ((PDMA_GCR_T *) PDMA_GCR_BA)
N#define PDMA                ((PDMA_PERIPH_T *) PDMA_BA)
N
N#define PWMA                ((PWM_T *) PWMA_BA)
N/*@}*/ /* end of group ISD91XX_PeripheralDecl */
N
N/*@}*/ /* end of group ISD91XX_Definitions */
N
N
N/******************************************************************************/
N/*                         Useful Macros                                      */
N/******************************************************************************/
N
N/*  Send the Protected Register Unlock Sequence                               */
N#define UNLOCKREG(x)        SYS->REGLOCK=0x59;SYS->REGLOCK=0x16;SYS->REGLOCK=0x88
N
N/*  Lock Protected Registers                                                  */
N#define LOCKREG(x)          SYS->REGLOCK=0x00;     
N
N/*  Copy a Register                                                           */
N#define REGCOPY(dest, src)  *((uint32_t *)&(dest)) = *((uint32_t *)&(src))
N/*  Clear a Register                                                          */
N#define CLEAR(dest) 		*((uint32_t *)&(dest)) = 0
N
N//=============================================================================
Ntypedef volatile unsigned char  vu8;
Ntypedef volatile unsigned long  vu32;
Ntypedef volatile unsigned short vu16;
N/******************************************************************************/
N/*  Macros to access 8/16/32 bit memory locations                             */
N/******************************************************************************/
N#define M8(adr)  (*((vu8  *) (adr)))
N#define M16(adr) (*((vu16 *) (adr)))
N#define M32(adr) (*((vu32 *) (adr)))
N#define outpw(port,value)	*((vu32 *)(port))=value
N#define inpw(port)			(*((vu32 *)(port)))
N#define outpb(port,value)	*((vu8 *)(port))=value
N#define inpb(port)			(*((vu8 *)(port)))
N#define outps(port,value)	*((vu16 *)(port))=value
N#define inps(port)			(*((vu16 *)(port)))
N/******************************************************************************/
N
N#define E_SUCCESS 	0
N#define NULL         0
N
N#ifndef TRUE
N#define TRUE	   	1
N#endif
N#ifndef FALSE
N#define FALSE   	0
N#endif
N
N#define ENABLE     1
N#define DISABLE    0
N
N// Define one bit mask
N#define BIT0	0x00000001
N#define BIT1	0x00000002
N#define BIT2	0x00000004
N#define BIT3	0x00000008
N#define BIT4	0x00000010
N#define BIT5	0x00000020
N#define BIT6	0x00000040
N#define BIT7	0x00000080
N#define BIT8	0x00000100
N#define BIT9	0x00000200
N#define BIT10	0x00000400
N#define BIT11	0x00000800
N#define BIT12	0x00001000
N#define BIT13	0x00002000
N#define BIT14	0x00004000
N#define BIT15	0x00008000
N#define BIT16	0x00010000
N#define BIT17	0x00020000
N#define BIT18	0x00040000
N#define BIT19	0x00080000
N#define BIT20	0x00100000
N#define BIT21	0x00200000
N#define BIT22	0x00400000
N#define BIT23	0x00800000
N#define BIT24	0x01000000
N#define BIT25	0x02000000
N#define BIT26	0x04000000
N#define BIT27	0x08000000
N#define BIT28	0x10000000
N#define BIT29	0x20000000
N#define BIT30	0x40000000
N#define BIT31	0x80000000
N
N#ifdef __cplusplus
S}
N#endif
N#endif  // __ISD91XX_H__
L 16 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\DrvTimer.c" 2
N#include "DrvTimer.h"
L 1 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver\DrvTimer.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#ifndef __DRVTIMER_H__
N#define __DRVTIMER_H__
N
N#include "ISD9xx.h"
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro, type and constant definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Define Version number								                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define DRVTIMER_MAJOR_NUM 1
N#define DRVTIMER_MINOR_NUM 00
N#define DRVTIMER_BUILD_NUM 1
N
N
N#define DRVTIMER_VERSION_NUM    _SYSINFRA_VERSION(DRVTIMER_MAJOR_NUM, DRVTIMER_MINOR_NUM, DRVTIMER_BUILD_NUM)
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define Error Code	                                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N// E_DRVTIMER_CMD					Wrong Command
N// E_DRVTIMER_CHANNEL				Wrong Channel
N// E_DRVTIMER_CLOCK_RATE			Wrong Clcok Rate
N// E_DRVTIMER_EIO					Initial Timer Failed. 
N#define E_DRVTIMER_CMD              _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVTIMER, 1)      /* Command error */
N#define E_DRVTIMER_CHANNEL          _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVTIMER, 2)
N#define E_DRVTIMER_CLOCK_RATE       _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVTIMER, 3)
N#define E_DRVTIMER_EIO              _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVTIMER, 4)      /* Timer IO error */
N#define E_DRVWDT_CMD                _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVTIMER, 5)      /* Invalid CMD   */ 
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Global interface variables declarations                                                                 */                                                                            
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef void (*TIMER_CALLBACK)(uint32_t data);	/* function pointer */
Ntypedef void (*WDT_CALLBACK)(uint32_t data);	/* function pointer */
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define TIMER Channel                                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum {
N    TMR0  =   0 ,
N    TMR1  =   1        
N}TIMER_CHANNEL;
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define TIMER Ioctl Command                                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum {
N    TIMER_IOC_START_COUNT            =   0 ,
N    TIMER_IOC_STOP_COUNT             =   1 ,
N    TIMER_IOC_ENABLE_INT             =   2 ,
N    TIMER_IOC_DISABLE_INT            =   3 ,
N    TIMER_IOC_RESET_TIMER            =   4 ,
N    TIMER_IOC_SET_PRESCALE           =   5 ,
N    TIMER_IOC_SET_INITIAL_COUNT      =   6 
N} TIMER_CMD; 
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define WDT Ioctl Command                                                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N//typedef enum {
N//    WDT_IOC_START_TIMER       =   0,
N//    WDT_IOC_STOP_TIMER        =   1,
N//    WDT_IOC_ENABLE_INT        =   2,
N//    WDT_IOC_DISABLE_INT       =   3,
N//    WDT_IOC_RESET_TIMER       =   4,
N//    WDT_IOC_ENABLE_RESET_FUNC =   5,
N//    WDT_IOC_DISABLE_RESET_FUNC=   6,
N//	WDT_IOC_SET_INTERVAL      =   7
N//} WDT_CMD; 
Ntypedef enum {
N    E_WDT_IOC_START_TIMER       = 0,
N    E_WDT_IOC_STOP_TIMER        = 1,
N    E_WDT_IOC_ENABLE_INT        = 2,
N    E_WDT_IOC_DISABLE_INT       = 3,
N    E_WDT_IOC_ENABLE_WAKEUP     = 4, 
N    E_WDT_IOC_DISABLE_WAKEUP    = 5, 
N    E_WDT_IOC_RESET_TIMER       = 6,
N    E_WDT_IOC_ENABLE_RESET_FUNC = 7,
N    E_WDT_IOC_DISABLE_RESET_FUNC= 8,
N	E_WDT_IOC_SET_INTERVAL      = 9
N} E_WDT_CMD; 
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define TIME EVENT STRUCT                                                                                */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef struct timeEvent_t
N{
N    int32_t              active;
N    int32_t              initTick;
N    int32_t              curTick;
N    TIMER_CALLBACK       funPtr;
N    uint32_t             transParam;
N} TIMER_EVENT_T;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define TIMER OPREATION MODE                                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum{                   
N    ONESHOT_MODE    	  =   0 ,
N    PERIODIC_MODE   	  =   1 ,
N    TOGGLE_MODE     	  =   2 , 
N	UNINTERREUPT_MODE     =   3 
N    
N}TIMER_OPMODE ;
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define WDT INTERVAL                                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N//typedef enum{
N//    LEVEL0      =   0 ,         /* 2^4 clocks	                                                           */
N//    LEVEL1      =   1 ,         /* 2^6 APB clocks                                                          */
N//    LEVEL2      =   2 ,         /* 2^8 APB clocks                                                          */ 
N//    LEVEL3      =   3 ,         /* 2^10 APB clocks                                                         */
N//	LEVEL4      =   4 ,         /* 2^12 APB clocks                                                         */
N//	LEVEL5      =   5 ,         /* 2^14 APB clocks                                                         */
N//	LEVEL6      =   6 ,         /* 2^16 APB clocks                                                         */
N//	LEVEL7      =   7           /* 2^18 APB clocks                                                         */
N//}WDT_INTERVAL;
Ntypedef enum{
N    E_WDT_LEVEL0      = 0,         /* 2^4 WDT_CLK	                                                           */
N    E_WDT_LEVEL1      = 1,         /* 2^6 WDT_CLK                                                            */
N    E_WDT_LEVEL2      = 2,         /* 2^8 WDT_CLK                                                            */ 
N    E_WDT_LEVEL3      = 3,         /* 2^10 WDT_CLK                                                           */
N	E_WDT_LEVEL4      = 4,         /* 2^12 WDT_CLK                                                           */
N	E_WDT_LEVEL5      = 5,         /* 2^14 WDT_CLK                                                           */
N	E_WDT_LEVEL6      = 6,         /* 2^16 WDT_CLK                                                           */
N	E_WDT_LEVEL7      = 7          /* 2^18 WDT_CLK                                                           */
N} E_WDT_INTERVAL;
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define Function Prototype                                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid DrvTIMER_Init(void);
Nvoid DrvTIMER_ClearTimerEvent(TIMER_CHANNEL channel, uint32_t uTimeEventNo);
Nvoid DrvTIMER_Delay(uint32_t uTicks);
Nvoid DrvTIMER_SetEXTClockFreq(uint32_t u32ClockFreq);
Nint32_t DrvTIMER_Open(TIMER_CHANNEL channel, uint32_t uTicksPerSecond, TIMER_OPMODE mode);
Nint32_t DrvTIMER_Ioctl(TIMER_CHANNEL channel,TIMER_CMD uCmd,uint32_t uArg1);
Nint32_t DrvTIMER_Close(TIMER_CHANNEL channel);
Nint32_t DrvTIMER_SetTimerEvent(TIMER_CHANNEL channel, uint32_t uTimeTick, TIMER_CALLBACK pvFun ,uint32_t parameter);
Nint32_t DrvTIMER_ResetTicks(TIMER_CHANNEL channel);
Nint32_t DrvTIMER_GetStatus(TIMER_CHANNEL ch);
Nint32_t DrvTIMER_GetVersion(void);
Nint32_t DrvTIMER_EnableInt(TIMER_CHANNEL channel);
Nuint32_t DrvTIMER_GetTicks(TIMER_CHANNEL channel);
Nvoid DrvWDT_ResetCount(void);
Nvoid DrvWDT_Close(void);
Nvoid DrvWDT_InstallISR(TIMER_CALLBACK pvNewISR);  
Nvoid DrvWDT_Open(E_WDT_INTERVAL WDTlevel);
Nint32_t DrvWDT_Ioctl(E_WDT_CMD uWDTCmd, uint32_t uArgument);
N
N#endif	// __DRVTIMER_H__
N
N
N
L 17 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\DrvTimer.c" 2
N#include "DrvSYS.h"
L 1 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver\DrvSYS.h" 1
N/*---------------------------------------------------------------------------------------------------------*/
N/*                                                                                                         */
N/* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#ifndef DRVSYS_H
N#define DRVSYS_H
N
N#include "ISD9xx.h"
N
N/* SysTick constants */
N#define SYSTICK_ENABLE              0                                          /* Config-Bit to start or stop the SysTick Timer                         */
N#define SYSTICK_TICKINT             1                                          /* Config-Bit to enable or disable the SysTick interrupt                 */
N#define SYSTICK_CLKSOURCE           2                                          /* Clocksource has the offset 2 in SysTick Control and Status Register   */
N#define SYSTICK_MAXCOUNT       ((1<<24) -1)                                    /* SysTick MaxCount     */ 
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro, type and constant definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define	DRVSYS_MAJOR_NUM 1
N#define	DRVSYS_MINOR_NUM 00
N#define	DRVSYS_BUILD_NUM 1
N
N#define DRVSYS_VERSION_NUM		_SYSINFRA_VERSION(DRVSYS_MAJOR_NUM,DRVSYS_MINOR_NUM,DRVSYS_BUILD_NUM)  
N
N//E_DRVSYS_ERR_UNLOCK_FAIL      Unlock key address failed
N//E_DRVSYS_ERR_LOCK_FAIL      Lock key address failed
N//E_DRVSYS_ERR_ARGUMENT    	  Wrong Argument
N//E_DRVSYS_ERR_IPSRC    	  Wrong IP clock selection
N//E_DRVSYS_ERR_IPDIV    	  Wrong IP divider selection
N#define E_DRVSYS_ERR_UNLOCK_FAIL    _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 1)
N#define E_DRVSYS_ERR_LOCK_FAIL    _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 2)
N#define E_DRVSYS_ERR_ARGUMENT      	_SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 3)	
N#define E_DRVSYS_ERR_IPSRC      _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 4)	
N#define E_DRVSYS_ERR_IPDIV      _SYSINFRA_ERRCODE(TRUE, MODULE_ID_DRVSYS, 5)	
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS Clcok Source Selector						                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N	E_DRVSYS_EXT_12M = 0,
N	E_DRVSYS_INT_22M = 1,	
N}E_DRVSYS_SRC_CLK;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  IP reset						                                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N	E_SYS_GPIO_RST  = 1,
N	E_SYS_TMR0_RST  = 2,
N	E_SYS_TMR1_RST  = 3,
N	E_SYS_TMR2_RST  = 4,
N	E_SYS_TMR3_RST  = 5,
N	E_SYS_I2C0_RST  = 8,
N	E_SYS_I2C1_RST  = 9,
N	E_SYS_SPI0_RST  = 12,
N	E_SYS_SPI1_RST  = 13,
N	E_SYS_SPI2_RST  = 14,
N	E_SYS_SPI3_RST  = 15,
N	E_SYS_UART0_RST = 16,
N	E_SYS_UART1_RST = 17,
N	E_SYS_UART2_RST = 18,	
N	E_SYS_PWM03_RST = 20,
N	E_SYS_PWM47_RST = 21,
N	E_SYS_ACMP_RST  = 22,
N	E_SYS_PS2_RST   = 23,
N	E_SYS_CAN0_RST  = 24,
N	//E_SYS_CAN1_RST  = 25,
N	E_SYS_USBD_RST  = 27,
N	E_SYS_ADC_RST   = 28,
N	E_SYS_I2S_RST   = 29,	
N	E_SYS_PDMA_RST  = 32,
N}E_SYS_IP_RST;
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS IP Clcok Selector		     				                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
N
Ntypedef enum 
N{
N	E_SYS_WDG_CLK   = 4,
N	E_SYS_RTC_CLK   = 5,
N	E_SYS_TMR0_CLK  = 6,
N	E_SYS_TMR1_CLK  = 7,
N	E_SYS_I2C0_CLK  = 8,
N	E_SYS_SPI0_CLK  = 12,
N	E_SYS_DPWM_CLK  = 13,
N	E_SYS_UART0_CLK = 16,
N	E_SYS_BIQ_CLK 	= 18,	
N	E_SYS_CRC_CLK 	= 19,	
N	E_SYS_PWM01_CLK = 20,
N	E_SYS_ACMP_CLK  = 22,
N	E_SYS_SBRAM_CLK = 26,
N	E_SYS_ADC_CLK   = 28,
N	E_SYS_I2S_CLK   = 29,
N	E_SYS_ANA_CLK   = 30,
N	E_SYS_PDMA_CLK  = 33,
N	E_SYS_ISP_CLK   = 34
N}E_SYS_IP_CLK;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS IP Clcok Divider		     				                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N	E_SYS_ADC_DIV,
N//	E_SYS_CAN_DIV,
N	E_SYS_UART_DIV,
N//	E_SYS_USB_DIV,
N	E_SYS_HCLK_DIV
N
N}E_SYS_IP_DIV;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS IP Clcok Selector		     				                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N//	E_SYS_FRQDIV_CLKSRC,
N	E_SYS_I2S_CLKSRC,
N
N	E_SYS_PWM01_CLKSRC,
N//	E_SYS_CAN_CLKSRC,
N	E_SYS_UART_CLKSRC,
N	E_SYS_TMR1_CLKSRC,
N	E_SYS_TMR0_CLKSRC,
N	E_SYS_ADC_CLKSRC,
N	E_SYS_WDG_CLKSRC,
N	E_SYS_DPWM_CLKSRC
N}E_SYS_IP_CLKSRC;
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  SYS Oscillator Control		     				                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
Ntypedef enum 
N{
N	E_SYS_NONE,
N	E_SYS_XTL32K,
N	E_SYS_OSC49M,
N	E_SYS_OSC10K
N}E_SYS_OSC_CTRL;
N
N
Ntypedef void (*BOD_CALLBACK)(void);
Ntypedef void (*PWRWU_CALLBACK)(void);
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define GCR functions prototype                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid 	 DrvSYS_ResetIP(E_SYS_IP_RST eIpRst);
Nvoid 	 DrvSYS_ResetCPU(void);
Nvoid 	 DrvSYS_ResetChip(void);
Nvoid 	 DrvSYS_EnableBOD(int32_t i32Enable);
Nvoid 	 DrvSYS_SelectBODVolt(uint8_t u8Volt);
Nvoid 	 DrvSYS_EnableBODRst(int32_t i32Enable, BOD_CALLBACK bodcallbackFn);
Nvoid 	 DrvSYS_EnableBODLowPowerMode(int32_t i32Enable);
Nvoid 	 DrvSYS_EnableLowVoltRst(int32_t i32Enable);
Nvoid 	 DrvSYS_EnableTempatureSensor(int32_t i32Enable);
Nvoid 	 DrvSYS_SetPORDisCode(uint32_t u32Code);
Nvoid 	 DrvSYS_SetRCAdjValue(uint32_t u32Adj);
Nvoid 	 DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable);
Nuint32_t DrvSYS_GetEXTClock(void);
Nint32_t  DrvSYS_UnlockKeyAddr(void);
Nint32_t  DrvSYS_LockKeyAddr(void);
N//uint32_t DrvSYS_ReadProductID(void);
Nuint32_t DrvSYS_GetRstSrc(void);
Nuint32_t DrvSYS_ClearRstSrc(uint32_t u32Src);
Nuint32_t DrvSYS_GetBODState(void);
N
Nvoid 	 DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable);
Nint32_t  DrvSYS_SetHCLKSource(uint8_t u8ClkSrcSel);
Nint32_t  DrvSYS_SetSysTickSource(uint8_t u8ClkSrcSel);
Nint32_t  DrvSYS_SetIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel);
Nint32_t  DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , int32_t i32value);
Nint32_t  DrvSYS_SetOscCtrl(E_SYS_OSC_CTRL eOscCtrl, int32_t i32Enable);
Nvoid     DrvSYS_EnablePWRWUInt(int32_t i32Enable, PWRWU_CALLBACK pdwucallbackFn, int32_t i32enWUDelay);
Nvoid 	 DrvSYS_EnablePowerDown(int32_t i32Enable);
Nvoid 	 DrvSYS_SetPowerDownWaitCPU(int32_t i32Enable);
Nvoid 	 DrvSYS_SetPllSrc(E_DRVSYS_SRC_CLK ePllSrc);
Nvoid 	 DrvSYS_SetPLLPowerDown(int32_t i32Enable);
Nvoid     DrvSYS_Delay(uint32_t us);
N
Nuint32_t DrvSYS_GetPllContent(uint32_t u32ExtClockKHz, uint32_t u32PllClockKHz);
Nuint32_t DrvSYS_GetPLLClock(void);
Nuint32_t DrvSYS_GetHCLK(void);
Nint32_t  DrvSYS_Open(uint32_t u32ExtClockKHz, uint32_t u32PllClockKHz);
Nint32_t  DrvSYS_EnableFreqDividerOutput(int32_t i32Enable, uint8_t u8Divider);
N
N#endif
N
L 18 "..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\DrvTimer.c" 2
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro, type and constant definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define TIMER_EVENT_COUNT   10
N#define TICKS_PER_SECOND    100
N#define TIMER_OFFSET        0x4
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Global file scope (static) variables                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
Nstatic TIMER_EVENT_T tTime0Event[TIMER_EVENT_COUNT],
Xstatic TIMER_EVENT_T tTime0Event[10],
N              		 tTime1Event[TIMER_EVENT_COUNT];
X              		 tTime1Event[10];
N
N
Nstatic TIMER_CALLBACK fnCallBack_WDT;
N
Nstatic int32_t  bIsTimer0Initial     = FALSE,
Xstatic int32_t  bIsTimer0Initial     = 0,
N               	bIsTimer1Initial     = FALSE,
X               	bIsTimer1Initial     = 0,
N                bIsTimer0Used      	 = FALSE,
X                bIsTimer0Used      	 = 0,
N                bIsTimer1Used      	 = FALSE,
X                bIsTimer1Used      	 = 0,
N                bIsSetTime0Event     = FALSE,
X                bIsSetTime0Event     = 0,
N                bIsSetTime1Event     = FALSE;
X                bIsSetTime1Event     = 0;
N
N
Nstatic uint32_t volatile uTimer0Count = 0,
N                		 uTimer1Count = 0,
N						 uTime0EventCount = 0,
N                		 uTime1EventCount = 0;
N
Nstatic uint32_t volatile _sys_uTimer0TickPerSecond,
N						 _sys_uTimer1TickPerSecond;
N
Nuint32_t volatile u32EXTClockFreq = 32000000;
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     GetTimerCLk                                                                       		   */
N/*                                                                                                         */
N/* Parameter:        																					   */	
N/*	             ch          		-[in] Timer Channel :Could be TMR0,TMR1			                       */
N/* Returns:                                                                                                */
N/*               Current Timer Clock                                                                       */
N/* Description:                                                                                            */  
N/*               The function is used to get the timer clock											   */	
N/*---------------------------------------------------------------------------------------------------------*/
Nstatic uint32_t GetTimerCLk(TIMER_CHANNEL ch)
N{
N	volatile uint32_t clk =0 ;
N	
N	
N	if(ch == TMR0 )
N	{
N		if(SYSCLK->CLKSEL1.TMR0_S == 0)			
X		if(((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->CLKSEL1.TMR0_S == 0)			
N		{
N		    clk = 10000;						/* Option 0: 10K  */ 
N		}
N		else if(SYSCLK->CLKSEL1.TMR0_S == 1)
X		else if(((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->CLKSEL1.TMR0_S == 1)
N		{
N			clk = DrvSYS_GetEXTClock()*1000;						/* Option 1: 32K */
N		}
N		else if(SYSCLK->CLKSEL1.TMR0_S == 2)
X		else if(((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->CLKSEL1.TMR0_S == 2)
N		{
N		
N			clk = DrvSYS_GetHCLK() * 1000 ;		/* Option 2: HCLK */
N		}
N		else if(SYSCLK->CLKSEL1.TMR0_S == 3)
X		else if(((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->CLKSEL1.TMR0_S == 3)
N		{
N			clk = u32EXTClockFreq;				/* Option 3: External Trigger */
N		}
N		else 
N		{
N			clk = 48000000; 					/* Option 4: 48MHz*/
N		}
N
N	}
N	else if(ch == TMR1 )
N	{
N    	if(SYSCLK->CLKSEL1.TMR1_S == 0)			
X    	if(((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->CLKSEL1.TMR1_S == 0)			
N		{
N			clk = 10000;						/* Option 0: 10K */
N		}
N		else if(SYSCLK->CLKSEL1.TMR1_S == 1)
X		else if(((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->CLKSEL1.TMR1_S == 1)
N		{
N			clk = DrvSYS_GetEXTClock()*1000;						/* Option 1: 32K */
N		}
N		else if(SYSCLK->CLKSEL1.TMR1_S == 2)
X		else if(((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->CLKSEL1.TMR1_S == 2)
N		{
N		    clk = DrvSYS_GetHCLK() * 1000 ;		/* Option 2: HCLK */
N		}
N		else if(SYSCLK->CLKSEL1.TMR1_S == 3)
X		else if(((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->CLKSEL1.TMR1_S == 3)
N		{
N			clk = u32EXTClockFreq;				/* Option 3: External Trigger */
N		}
N		else 
N		{
N			clk = 48000000; 					/* Option 4: 48MHz*/
N		}
N	}
N	
N
N	else 
N    	return E_DRVTIMER_CHANNEL;
X    	return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N			
N
N	return clk;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_GetStatus                                                                           */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               NONE                                                                                      */
N/*                                                                                                         */
N/* Returns:      Register TISR data                                                                        */
N/* Side effects:                                                                                           */
N/* Description:                                                                                            */
N/*               This function is used to return read TIMER TISR register to get timer interrupt status    */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvTIMER_GetStatus(TIMER_CHANNEL ch)
N{
N	int32_t IsStatus;
N
N	if(ch == TMR0 )
N		IsStatus =  TIMER0->TISR.TIF ;
X		IsStatus =  ((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TISR.TIF ;
N	else if(ch == TMR1 )
N    	IsStatus =  TIMER1->TISR.TIF ;
X    	IsStatus =  ((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TISR.TIF ;
N	else 
N    	return E_DRVTIMER_CHANNEL;
X    	return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N
N	return IsStatus;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER0 ISR                                                                                */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               NONE                                                                                      */
N/* Returns:      NONE                                                                                      */
N/* Side effects:                                                                                           */
N/* Description:                                                                                            */
N/*               The TIMER0 default ISR                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid TMR0_IRQHandler(void)
N{
N    int32_t i;
N    uTimer0Count++;
N
N
N 	TIMER0->TISR.TIF =1;
X 	((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TISR.TIF =1;
N 
N 	if (bIsSetTime0Event)                               /* Timer Event Handle                               */
N    {
N        for (i=0; i<TIMER_EVENT_COUNT; i++)
X        for (i=0; i<10; i++)
N        {
N            if (tTime0Event[i].active)
N            {
N                tTime0Event[i].curTick--;
N                if (tTime0Event[i].curTick == 0)
N                {
N                    (*tTime0Event[i].funPtr)(tTime0Event[i].transParam);
N                    tTime0Event[i].curTick = tTime0Event[i].initTick;
N                }
N            }
N        }
N    }
N}
N
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     Timer1_ISR                                                                                */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               NONE                                                                                      */
N/*                                                                                                         */
N/* Returns:      NONE                                                                                      */
N/* Side effects:                                                                                           */
N/* Description:                                                                                            */
N/*               The TIMER1 default ISR                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid TMR1_IRQHandler(void)
N{
N    int32_t i;
N    
N    uTimer1Count++;
N
N  	TIMER1->TISR.TIF =1;
X  	((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TISR.TIF =1;
N    if (bIsSetTime1Event)                           /* Timer Event Handle                                  */
N    {
N        for (i=0; i<TIMER_EVENT_COUNT; i++)
X        for (i=0; i<10; i++)
N        {
N            if (tTime1Event[i].active)
N            {
N                tTime1Event[i].curTick--;
N                if (tTime1Event[i].curTick == 0)
N                {
N                    (*tTime1Event[i].funPtr)(tTime1Event[i].transParam);
N                    tTime1Event[i].curTick = tTime1Event[i].initTick;
N                }
N            }
N        }
N    }
N}
N
N
N
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_SetTimerEvent                                                                       */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               channel    - [in],  TMR0/TMR1			                          		                   */
N/*               uTimeTick  - [in],  The tick value which want to execute event                            */
N/*               pvFun      - [in],  The event function pointer                                            */
N/*               parameter  - [in],  a parameter,was defined by user,which send to callback function       */
N/*                                                                                                         */
N/* Returns:      val        - [out],  The event number which contains this event                           */
N/* Description:                                                                                            */
N/*               This function is used to install a timer event				                               */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvTIMER_SetTimerEvent(TIMER_CHANNEL channel, uint32_t uTimeTick, TIMER_CALLBACK pvFun ,uint32_t parameter)
N{
N    int32_t volatile i;
N    int32_t val=0;
N
N
N    switch (channel)
N    {
N        case TMR0:
N        {
N            bIsSetTime0Event = TRUE;
X            bIsSetTime0Event = 1;
N            uTime0EventCount++;
N            for (i=0; i<TIMER_EVENT_COUNT; i++)
X            for (i=0; i<10; i++)
N            {
N                if (tTime0Event[i].active  == FALSE)
X                if (tTime0Event[i].active  == 0)
N                {
N                    tTime0Event[i].active   	= TRUE;
X                    tTime0Event[i].active   	= 1;
N                    tTime0Event[i].initTick 	= uTimeTick;
N                    tTime0Event[i].curTick  	= uTimeTick;
N                    tTime0Event[i].funPtr   	= (TIMER_CALLBACK)pvFun;
N                    tTime0Event[i].transParam   = parameter;
N                    val = i;
N                    break;
N                }
N            }
N            break;
N        }
N        case TMR1:
N        {
N            bIsSetTime1Event = TRUE;
X            bIsSetTime1Event = 1;
N            uTime1EventCount++;
N            for (i=0; i<TIMER_EVENT_COUNT; i++)
X            for (i=0; i<10; i++)
N            {
N                if (tTime1Event[i].active   == FALSE)
X                if (tTime1Event[i].active   == 0)
N                {
N                    tTime1Event[i].active   	= TRUE;
X                    tTime1Event[i].active   	= 1;
N                    tTime1Event[i].initTick 	= uTimeTick;
N                    tTime1Event[i].curTick  	= uTimeTick;
N                    tTime1Event[i].funPtr   	= (TIMER_CALLBACK)pvFun;
N                    tTime1Event[i].transParam   = parameter;
N                    val = i;
N                    break;
N                }
N            }
N            break;
N        }
N
N
N        default:
N        {
N            break;
N        }
N    }
N
N    return val;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_ClearTimerEvent                                                                     */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               channel    - [in],  TMR0/TMR1			  					                               */
N/*               uTimeEventNo - [in],EVENT No. it could be 0 ~ TIMER_EVENT_COUNT-1                         */
N/*                                                                                                         */
N/* Returns:                                                                                                */
N/*                                                                                                         */
N/* Description:                                                                                            */
N/*               This function is used to remove a installed event                                         */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid DrvTIMER_ClearTimerEvent(TIMER_CHANNEL channel, uint32_t uTimeEventNo)
N{
N    switch (channel)
N    {
N        case TMR0:
N        {
N            tTime0Event[uTimeEventNo].active = FALSE;
X            tTime0Event[uTimeEventNo].active = 0;
N            uTime0EventCount--;
N            if (uTime0EventCount == 0)
N            {
N                bIsSetTime0Event = FALSE;
X                bIsSetTime0Event = 0;
N            }
N			break;
N        }
N        case TMR1:
N        {
N            tTime1Event[uTimeEventNo].active = FALSE;
X            tTime1Event[uTimeEventNo].active = 0;
N            uTime1EventCount--;
N            if (uTime1EventCount == 0)
N            {
N                bIsSetTime1Event = FALSE;
X                bIsSetTime1Event = 0;
N            }
N            break;
N        }
N
N        default:
N        {
N            break;
N        }
N		
N    }
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     DrvTIMER_EnableInt                                                                        */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               channel    - [in],  TMR0/TMR1			                                                   */
N/*                                                                                                         */
N/* Returns:      E_SUCCESS / TIMER_ERR_CHANNEL /                                                           */
N/* Side effects:                                                                                           */
N/* Description:                                                                                            */
N/*               This function is used to enable Interuppt                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvTIMER_EnableInt(TIMER_CHANNEL channel)
N{
N    switch (channel)
N    {
N        case TMR0:
N        {
N            TIMER0->TCSR.IE =1 ;
X            ((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR.IE =1 ;
N			NVIC_EnableIRQ(TMR0_IRQn); 
N            break;
N        }
N        case TMR1:
N        {
N            TIMER1->TCSR.IE =1 ;
X            ((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR.IE =1 ;
N			NVIC_EnableIRQ(TMR1_IRQn); 
N            break;
N        }
N
N        default:
N        {
N			return E_DRVTIMER_CHANNEL;
X			return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N        }
N    }
N    
N    return E_SUCCESS ;
X    return 0 ;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_ResetTicks                                                                          */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               channel    - [in],  TMR0/TMR1			                                                   */
N/*                                                                                                         */
N/* Returns:      E_SUCCESS / E_DRVTIMER_CHANNEL                                                            */
N/* Side effects:                                                                                           */
N/* Description:                                                                                            */
N/*               This function is used to reset TIMER Tick.                                                */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvTIMER_ResetTicks(TIMER_CHANNEL channel)
N{
N    switch (channel)
N    {
N        case TMR0:
N        {
N            uTimer0Count = 0;
N            break;
N        }
N        case TMR1:
N        {
N            uTimer1Count = 0;
N            break;
N        }
N
N        default:
N        {
N            return E_DRVTIMER_CHANNEL;
X            return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N        }
N    }
N    return E_SUCCESS;
X    return 0;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_Init                                                                                */
N/*                                                                                                         */
N/* Parameters:   NONE                                                                                      */
N/*                                                                                                         */
N/* Returns:      NONE                                                                                      */
N/* Side effects:                                                                                           */
N/* Description:                                                                                            */
N/*               This function is used to initial TIMER when system boot up.                               */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid DrvTIMER_Init(void)
N{
N
N    bIsTimer0Initial    = TRUE;
X    bIsTimer0Initial    = 1;
N    bIsTimer1Initial    = TRUE;
X    bIsTimer1Initial    = 1;
N
N}
N
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     CalTimerInitValue                                                                         */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               u32ClockSrc    - [in], The source clock of Timer.                                         */
N/*               u32TicksPerSec - [in], The ticks per second.                                              */
N/*                                                                                                         */
N/* Returns:                                                                                                */
N/*               Return 32 bits unsigned integer where                                                     */
N/*               bits [ 0:24] - The initial value for TCMPR.                                               */
N/*               bits [25:32] - The value of pre scaler.                                                   */
N/* Description:                                                                                            */
N/*               This function is used to calculate the prescal and value of TCMPR(Initial counter value). */
N/*---------------------------------------------------------------------------------------------------------*/
Nstatic uint32_t CalTimerInitValue(uint32_t u32ClockSrc, uint32_t u32TicksPerSec)
N{
N    uint32_t u32PreScale;
N    uint32_t u32InitValue;
N
N    if((u32ClockSrc < 2) || (u32TicksPerSec == 0))
N        return (uint32_t)-1;
N
N    for(u32PreScale = 1;u32PreScale < 256;u32PreScale++)
N    {
N        u32InitValue = u32ClockSrc / (u32TicksPerSec * u32PreScale);
N
N        /* The initial value must > 1 */
N	   if ((u32InitValue > 1) && (u32InitValue < 0x1000000))
N            return (((u32PreScale-1) << 24) | u32InitValue);
N  
N    
N    }
N    
N    return (uint32_t)-1;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_Open                                                                                */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               channel        - [in], TMR0/TMR1		                                                   */
N/*               uTickPerSecond - [in], Tick / second                                                      */
N/*               Mode           - [in], Operation Mode One-Shot / Periodic / Toggle /UNINTERREUPT          */
N/*                                                                                                         */
N/* Returns:      E_SUCCESS / E_DRVTIMER_CMD / E_DRVTIMER_EIO                                               */
N/* Description:                                                                                            */
N/*               This function is used to set and start TIMER                                              */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvTIMER_Open(TIMER_CHANNEL channel, uint32_t uTicksPerSecond, TIMER_OPMODE mode )
N{
N    uint32_t i;
N    uint32_t uRegTcmpr, uRegTcr;
N
N    if ( (bIsTimer0Initial == FALSE)|(bIsTimer1Initial == FALSE))
X    if ( (bIsTimer0Initial == 0)|(bIsTimer1Initial == 0))
N    {
N        return E_DRVTIMER_EIO;
X        return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((4) & 0x7F));
N
N    }
N
N    uRegTcr = (uint32_t)( 0x60010000 | ( mode << 27) );        /* Start Timer and set operation mode       */
N    
N	
N
N    switch (channel)
N    {
N        case TMR0:
N        {
N            if ( (bIsTimer0Initial != TRUE)|(bIsTimer0Used   != FALSE))
X            if ( (bIsTimer0Initial != 1)|(bIsTimer0Used   != 0))
N                return E_DRVTIMER_EIO;
X                return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((4) & 0x7F));
N            
N            bIsTimer0Used   = TRUE;
X            bIsTimer0Used   = 1;
N           
N		   	SYSCLK->APBCLK.TMR0_EN =1;
X		   	((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->APBCLK.TMR0_EN =1;
N			
N			outpw((uint32_t)&TIMER0->TCSR ,0 );                         /* disable timer                              */
X			*((vu32 *)((uint32_t)&((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR))=0;                          
N           
N		    TIMER0->TISR.TIF = 1;                             /* write 1 to clear for safty                 */
X		    ((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TISR.TIF = 1;                              
N
N            for (i=0; i<TIMER_EVENT_COUNT; i++)
X            for (i=0; i<10; i++)
N            {
N                tTime0Event[i].active = FALSE;
X                tTime0Event[i].active = 0;
N            }
N            uTimer0Count = 0;
N			
N			_sys_uTimer0TickPerSecond = uTicksPerSecond;
N            		
N            uRegTcmpr = CalTimerInitValue(GetTimerCLk(TMR0), uTicksPerSecond); 
N
N			if(uRegTcmpr == 0xFFFFFFFF)		
N			{
N				return E_DRVTIMER_CMD;			
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((1) & 0x7F));			
N			}
N
N			TIMER0->TCMPR = (uRegTcmpr << 8) >> 8;
X			((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCMPR = (uRegTcmpr << 8) >> 8;
N            uRegTcr |= (uRegTcmpr >> 24);
N		
N			outpw((uint32_t)&TIMER0->TCSR,  (uint32_t)uRegTcr);   
X			*((vu32 *)((uint32_t)&((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR))=(uint32_t)uRegTcr;   
N			
N			NVIC_EnableIRQ(TMR0_IRQn); 
N
N            break;
N        }
N
N        case TMR1:
N        {
N            if ( (bIsTimer1Initial != TRUE)|(bIsTimer1Used   != FALSE))
X            if ( (bIsTimer1Initial != 1)|(bIsTimer1Used   != 0))
N            {
N                return E_DRVTIMER_EIO;
X                return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((4) & 0x7F));
N            }
N
N            bIsTimer1Used   = TRUE;
X            bIsTimer1Used   = 1;
N
N            SYSCLK->APBCLK.TMR1_EN =1;
X            ((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->APBCLK.TMR1_EN =1;
N			
N			outpw((uint32_t)&TIMER1->TCSR ,0 );                       	/* disable timer                               */
X			*((vu32 *)((uint32_t)&((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR))=0;                       	 
N            
N			TIMER1->TISR.TIF =1;                            	/* write 1 to clear for safty                  */
X			((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TISR.TIF =1;                            	 
N
N            for (i=0; i<TIMER_EVENT_COUNT; i++)
X            for (i=0; i<10; i++)
N            {
N                tTime1Event[i].active = FALSE;
X                tTime1Event[i].active = 0;
N            }
N            uTimer1Count = 0;
N            _sys_uTimer1TickPerSecond = uTicksPerSecond;
N
N            uRegTcmpr = CalTimerInitValue(GetTimerCLk(TMR1), uTicksPerSecond); 
N
N			if(uRegTcmpr == 0xFFFFFFFF)		
N			{
N				return E_DRVTIMER_CMD;			
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((1) & 0x7F));			
N			}
N
N			TIMER1->TCMPR = (uRegTcmpr << 8) >> 8;
X			((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCMPR = (uRegTcmpr << 8) >> 8;
N            uRegTcr |= (uRegTcmpr >> 24);
N		
N			outpw((uint32_t)&TIMER1->TCSR,  (uint32_t)uRegTcr);   
X			*((vu32 *)((uint32_t)&((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR))=(uint32_t)uRegTcr;   
N
N			NVIC_EnableIRQ(TMR1_IRQn); 
N
N            break;
N        }
N
N
N        default:
N        {
N            return E_DRVTIMER_CMD ;
X            return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((1) & 0x7F)) ;
N 
N        }
N    }
N    return E_SUCCESS;
X    return 0;
N
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_GetTicks                                                                            */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               channel      - [in], TMR0/TMR1			                                                   */
N/*                                                                                                         */
N/* Returns:                                                                                                */
N/*               uTimer0Count - [out], Timer0 Current ticks                                                */
N/*               uTimer1Count - [out], Timer1 Current ticks                                                */
N/*                                                                                                         */
N/* Description:                                                                                            */
N/*               This function is used to return Timer ticks                                               */
N/*---------------------------------------------------------------------------------------------------------*/
Nuint32_t DrvTIMER_GetTicks(TIMER_CHANNEL channel)
N{
N
N    switch (channel)
N    {
N        case TMR0:
N        {
N            return uTimer0Count;
N  
N        }
N        case TMR1:
N        {
N            return uTimer1Count;
N
N        }	
N        default:
N        {
N            break;
N        }
N    }
N    return 0;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_Delay                                                                               */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               uTicks - [in], The delay time and it is depend on Timer CLK.                              */
N/*                                                                                                         */
N/* Returns:      None                                                                                      */
N/*                                                                                                         */
N/* Description:                                                                                            */
N/*               This function is used to set a delay time if necessary. The TIMER0 is used in this delay  */
N/*               function thus it needs to be opened and initialized first.                                */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid DrvTIMER_Delay(uint32_t uTicks)
N{
N    uint32_t volatile btime;
N
N    btime = DrvTIMER_GetTicks(TMR0);
N    
N    while (1)
N    {
N        if ((DrvTIMER_GetTicks(TMR0) - btime) > uTicks)
N        {
N            break;
N        }
N    }
N
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:  		DrvTIMER_SetEXTClockFreq                                                     		   */
N/*                                                                                                         */
N/* Parameter:        																					   */	
N/*	             	u32ClockFreq - [in]  																   */
N/*						Set the clock frequence (Hz) for external clock source                             */
N/* Returns:                                                                                                */
N/*               	None                                                                                   */
N/* Description:                                                                                            */
N/*               	Set the external clock frequency, it's used for timer clock source. 			       */
N/*               	User can change the timer clock source from the external clock source by calling       */
N/*               	DrvSYS_SetIPClockSource (...)												       */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid DrvTIMER_SetEXTClockFreq(uint32_t u32ClockFreq)
N{
N	u32EXTClockFreq = u32ClockFreq;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_Ioctl                                                                               */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               channel - [in],   TMR0/TMR1		                                                       */
N/*               uCmd    - [in],   Reference TIMER_IOCRL_Table                                             */
N/*               uArg1   - [in],   The first parameter for IOCRL                                           */
N/*                                                                                                         */
N/* Returns:                                                                                                */
N/*               E_SUCCESS          Success                                                                */
N/*               E_DRVTIMER_CMD     Command Error                                                          */
N/*                                                                                                         */
N/* Description:                                                                                            */
N/*               To process the general control of timer.                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvTIMER_Ioctl(TIMER_CHANNEL channel, TIMER_CMD uCmd,uint32_t uArg1)
N{
N
N    switch (uCmd)
N    {
N        case TIMER_IOC_START_COUNT :		  	/* Start Timer Count */
N        {
N            if(channel == TMR0)
N				TIMER0->TCSR.CEN =1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR.CEN =1 ;
N			else if(channel == TMR1)
N				TIMER1->TCSR.CEN =1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR.CEN =1 ;
N			else
N				return E_DRVTIMER_CHANNEL;						
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));						
N
N			break;
N        }
N        case TIMER_IOC_STOP_COUNT :				/* Stop Timer Count */
N        {
N            if(channel == TMR0)
N				TIMER0->TCSR.CEN =0 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR.CEN =0 ;
N			else if(channel == TMR1)
N				TIMER1->TCSR.CEN =0 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR.CEN =0 ;
N			else
N				return E_DRVTIMER_CHANNEL;						
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));						
N
N            break;
N        }
N        case TIMER_IOC_ENABLE_INT :			   	/* Enable Specified Channel Interrupt */
N        {
N			if(channel == TMR0)
N				TIMER0->TCSR.IE =1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR.IE =1 ;
N			else if(channel == TMR1)
N				TIMER1->TCSR.IE =1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR.IE =1 ;
N			else
N				return E_DRVTIMER_CHANNEL;
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N            break;
N        }
N
N        case TIMER_IOC_DISABLE_INT :			/* Disable Specified Channel Interrupt */
N        {
N			if(channel == TMR0)
N				TIMER0->TCSR.IE =0 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR.IE =0 ;
N			else if(channel == TMR1)
N				TIMER1->TCSR.IE =0 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR.IE =0 ;
N			else
N				return E_DRVTIMER_CHANNEL;
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N
N            break;
N        }
N
N        case TIMER_IOC_RESET_TIMER :			/* Reset specified channel */
N        {
N			if(channel == TMR0)
N				TIMER0->TCSR.CRST =1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR.CRST =1 ;
N			else if(channel == TMR1)
N				TIMER1->TCSR.CRST =1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR.CRST =1 ;
N			else
N				return E_DRVTIMER_CHANNEL;
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N            break;
N        }
N
N        case TIMER_IOC_SET_PRESCALE  :			/* Set Specified channel prescale parameter */
N        {
N     		if(channel == TMR0)
N				TIMER0->TCSR.PRESCALE = uArg1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCSR.PRESCALE = uArg1 ;
N			else if(channel == TMR1)
N				TIMER1->TCSR.PRESCALE = uArg1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCSR.PRESCALE = uArg1 ;
N			else
N				return E_DRVTIMER_CHANNEL;
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N            break;
N        }
N
N        case TIMER_IOC_SET_INITIAL_COUNT :	  	/* Set Inital Count value */
N        {
N            if(channel == TMR0)
N				TIMER0->TCMPR = uArg1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10000))->TCMPR = uArg1 ;
N			else if(channel == TMR1)
N				TIMER1->TCMPR = uArg1 ;
X				((TIMER_T *) ((( uint32_t)0x40000000) + 0x10020))->TCMPR = uArg1 ;
N			else
N				return E_DRVTIMER_CHANNEL;
X				return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((2) & 0x7F));
N
N            break;
N        }
N
N        default:
N        {
N            return E_DRVTIMER_CMD;
X            return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((1) & 0x7F));
N  
N        }
N    }
N
N    return E_SUCCESS;
X    return 0;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     TIMER_Close                                                                               */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               channel 	- [in],  TMR0 / TMR1    			                                           */
N/* Returns:                                                                                                */
N/*               E_SUCCESS          Success                                                                */
N/*               E_DRVTIMER_CMD     Command Error                                                          */
N/* Description:                                                                                            */
N/*               The function is used to disable timer                                                     */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvTIMER_Close(TIMER_CHANNEL channel)
N{
N
N    if (channel > TMR1)
N	{
N        return E_DRVTIMER_CMD;
X        return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((1) & 0x7F));
N    }
N
N    switch (channel)
N    {
N        case TMR0:
N        {
N            bIsTimer0Used       = FALSE;
X            bIsTimer0Used       = 0;
N            bIsSetTime0Event    = FALSE;
X            bIsSetTime0Event    = 0;
N            DrvTIMER_Ioctl(TMR0, TIMER_IOC_DISABLE_INT, 0);
N            DrvTIMER_Ioctl(TMR0, TIMER_IOC_RESET_TIMER, 0);
N            break;
N
N        }
N        case TMR1:
N        {
N            bIsTimer1Used       = FALSE;
X            bIsTimer1Used       = 0;
N            bIsSetTime1Event    = FALSE;
X            bIsSetTime1Event    = 0;
N            DrvTIMER_Ioctl(TMR1,TIMER_IOC_DISABLE_INT,  0);
N            DrvTIMER_Ioctl(TMR1, TIMER_IOC_RESET_TIMER, 0);
N            break;
N
N        }
N
N        default:
N        {
N            return E_DRVTIMER_CMD ;
X            return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((1) & 0x7F)) ;
N        }
N    }
N
N    return E_SUCCESS;
X    return 0;
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function: 	WDT_InstallISR                                                                             */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*				pvNewISR   - [in]   The function pointer of the interrupt service routine				   */
N/*                                                                                                         */
N/* Returns:																								   */	
N/*				None                                                                                       */
N/* Description:                                                                                            */
N/*              The function is used to install  WDT interrupt service routine.                            */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid DrvWDT_InstallISR(TIMER_CALLBACK pvNewISR)
N{
N	WDT->WTCR.WTIE =1 ;
X	((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTIE =1 ;
N	fnCallBack_WDT = (TIMER_CALLBACK)pvNewISR; 
N}
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:        DrvWDT_Open                                                                            */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*                  WDTlevel -[in]   E_WDT_INTERVAL, enumerate the WDT time-out interval.                  */
N/*					    			 Refer to WDT_INTERVAL enumeration for detail time-out value.          */
N/* Returns:                                                                                                */
N/*					None                                        							               */
N/* Description:                                                                                            */
N/*                  Enable WDT engine clock and set WDT time-out interval.                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N
N
Nvoid DrvWDT_Open(E_WDT_INTERVAL WDTlevel)
N{
N    DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);  /* Stop WDT first */
N
N    SYSCLK->APBCLK.WDG_EN = 1;  /* Enable WatchDog Timer Clock */    
X    ((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->APBCLK.WDG_EN = 1;       
N
N    WDT->WTCR.WTIS = WDTlevel;  /* Select WatchDog Timer Interval */
X    ((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTIS = WDTlevel;   
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     WDT_IRQHandler                                                                            */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               NONE                                                                                      */
N/*                                                                                                         */
N/* Returns:      NONE                                                                                      */
N/* Side effects:                                                                                           */
N/* Description:                                                                                            */
N/*               The function is default WatchDog Interrupt Service Routine                                */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid WDT_IRQHandler(void)
N{
N
N
N    WDT->WTCR.WTIF =1;                  				/* Clear INT32 Flag */
X    ((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTIF =1;                  				 
N
N    if((fnCallBack_WDT) )                              /* Install WDT Callback Function  */
N    {
N         fnCallBack_WDT(NULL);
X         fnCallBack_WDT(0);
N    }
N
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:        DrvWDT_Ioctl                                                                           */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*					uWDTCmd - [in]                               							               */
N/*                      E_WDT_CMD commands, it could be the one of the follow commands                     */
N/*                          E_WDT_IOC_START_TIMER,                                                         */
N/*                          E_WDT_IOC_STOP_TIMER,                                                          */
N/*                          E_WDT_IOC_ENABLE_INT,                                                          */
N/*                          E_WDT_IOC_DISABLE_INT,                                                         */
N/*                          E_WDT_IOC_ENABLE_WAKEUP,                                                       */
N/*                          E_WDT_IOC_DISABLE_WAKEUP,                                                      */
N/*                          E_WDT_IOC_RESET_TIMER,                                                         */
N/*                          E_WDT_IOC_ENABLE_RESET_FUNC,                                                   */
N/*                          E_WDT_IOC_DISABLE_RESET_FUNC,                                                  */
N/*                          E_WDT_IOC_SET_INTERVAL                                                         */
N/*					uArgument - [in]                               						                   */
N/*                      Set the argument for the specified WDT command	                                   */
N/* Returns:                                                                                                */
N/*					E_SUCCESS								Operation successful   				           */
N/*					E_DRVWDT_CMD							Invalid WDT command		                       */
N/* Description:                                                                                            */
N/*                  The function is used to operate more WDT applications, it could be the                 */
N/*                  start/stop the WDT, enable/disable WDT interrupt function, enable/disable WDT          */
N/*                  time-out wake up function, enable/disable system reset when WDT time-out and 		   */
N/*					set the WDT time-out interval.       												   */
N/*---------------------------------------------------------------------------------------------------------*/
N
Nint32_t DrvWDT_Ioctl(E_WDT_CMD uWDTCmd, uint32_t uArgument)
N{
N    switch (uWDTCmd)
N    {
N        case E_WDT_IOC_START_TIMER  :
N        {
N 			WDT->WTCR.WTE = 1;
X 			((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTE = 1;
N            break ;
N        }
N
N        case E_WDT_IOC_STOP_TIMER :
N        {
N 			WDT->WTCR.WTE = 0;
X 			((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTE = 0;
N            break ;
N        }
N
N        case E_WDT_IOC_ENABLE_INT :
N        {
N 			WDT->WTCR.WTIE = 1;
X 			((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTIE = 1;
N			NVIC_EnableIRQ(WDT_IRQn);
N            break ;
N        }
N
N        case E_WDT_IOC_DISABLE_INT :
N        {
N  			WDT->WTCR.WTIE = 0;
X  			((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTIE = 0;
N			NVIC_DisableIRQ(WDT_IRQn); 
N            break ;
N        }
N
N        case E_WDT_IOC_RESET_TIMER:
N        {
N 			WDT->WTCR.WTR = 1;
X 			((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTR = 1;
N            break ;
N        }
N
N        case E_WDT_IOC_ENABLE_RESET_FUNC :
N        {
N			WDT->WTCR.WTRE = 1;
X			((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTRE = 1;
N            break ;
N        }
N
N        case E_WDT_IOC_DISABLE_RESET_FUNC:
N        {
N 			WDT->WTCR.WTRE = 0;
X 			((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTRE = 0;
N            break ;
N        }
N
N        case E_WDT_IOC_SET_INTERVAL:
N        {
N            WDT->WTCR.WTIS = (E_WDT_INTERVAL)uArgument;
X            ((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTIS = (E_WDT_INTERVAL)uArgument;
N
N            break ;
N        }
N       
N		default :
N        {
N            return E_DRVWDT_CMD;
X            return (((1) ? 0xFFFF0000 : 0x00000000) | ((((MODULE_ID_DRVTIMER) & 0xFF) | ((1) ? 0x100 : 0x00)) << 7) | ((5) & 0x7F));
N        }
N    }
N
N    return E_SUCCESS;
X    return 0;
N}
N
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     WDT_Close                                                                                 */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               NONE                                                                                      */
N/*                                                                                                         */
N/* Returns:                                                                                                */
N/*				 NONE																					   */	
N/* Description:                                                                                            */
N/*               The function is used to Stop Watch Dog Timer and Disable WDT Interrupt                    */
N/*---------------------------------------------------------------------------------------------------------*/
N
Nvoid DrvWDT_Close(void)
N{
N    DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);     /* Stop WDT */
N    DrvWDT_Ioctl(E_WDT_IOC_DISABLE_INT, 0);    /* Disable WDT Interrupt */
N
N    SYSCLK->APBCLK.WDG_EN = 0;
X    ((SYSCLK_T *)((( uint32_t)0x50000000) + 0x00200))->APBCLK.WDG_EN = 0;
N}
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function:     WDT_ResetCount                                                                            */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*               NONE                                                                                      */
N/*                                                                                                         */
N/* Returns:      NONE                                                                                      */
N/*                                                                                                         */
N/* Description:                                                                                            */
N/*               This function is used to reset WDT Tick to avoid time-out to restart system.              */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid DrvWDT_ResetCount(void)
N{
N    WDT->WTCR.WTR =1 ;
X    ((WDT_T *) ((( uint32_t)0x40000000) + 0x04000))->WTCR.WTR =1 ;
N
N}
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Function: DrvTIMER_GetVersion                                                                           */
N/*                                                                                                         */
N/* Parameters:                                                                                             */
N/*              None                                                                                       */
N/*                                                                                                         */
N/* Returns:                                                                                                */
N/*              None                                                                                       */
N/*                                                                                                         */
N/* Description:                                                                                            */
N/*              Get the version number of Timer/WDT driver.                                                */
N/*                                                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
Nint32_t DrvTIMER_GetVersion(void)
N{
N	return DRVTIMER_VERSION_NUM;
X	return (((1) << 16) | ((00) << 8) | (1));
N}
N
