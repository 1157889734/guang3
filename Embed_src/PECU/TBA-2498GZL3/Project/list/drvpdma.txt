; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\drvpdma.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\output\drvpdma.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport -I..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Nuvoton --omf_browse=..\output\drvpdma.crf ..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\DrvPDMA.c]
                          THUMB

                          AREA ||i.DrvPDMA_CHEnablelTransfer||, CODE, READONLY, ALIGN=2

                  DrvPDMA_CHEnablelTransfer PROC
;;;473    /*---------------------------------------------------------------------------------------------------------*/
;;;474    int32_t	DrvPDMA_CHEnablelTransfer(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;475    {
;;;476     	/* Check PDMA Channel is Valid */
;;;477        if (eChannel > eDRVPDMA_CHANNEL_3)
000002  2903              CMP      r1,#3
000004  dd01              BLE      |L1.10|
;;;478            return E_DRVPDMA_FALSE_INPUT;
000006  480c              LDR      r0,|L1.56|
                  |L1.8|
;;;479                
;;;480      
;;;481       	/* PDMA Channel Enable & Trigger Enable */
;;;482        PDMA->channel[eChannel].CSR.PDMACEN = 1;
;;;483        PDMA->channel[eChannel].CSR.TRIG_EN = 1;
;;;484        return E_SUCCESS;      
;;;485    }
000008  4770              BX       lr
                  |L1.10|
00000a  0208              LSLS     r0,r1,#8              ;482
00000c  4a0b              LDR      r2,|L1.60|
00000e  1880              ADDS     r0,r0,r2              ;482
000010  6800              LDR      r0,[r0,#0]            ;482
000012  0840              LSRS     r0,r0,#1              ;482
000014  0040              LSLS     r0,r0,#1              ;482
000016  1c40              ADDS     r0,r0,#1              ;482
000018  020a              LSLS     r2,r1,#8              ;482
00001a  4b08              LDR      r3,|L1.60|
00001c  18d2              ADDS     r2,r2,r3              ;482
00001e  6010              STR      r0,[r2,#0]            ;482
000020  0208              LSLS     r0,r1,#8              ;483
000022  461a              MOV      r2,r3                 ;483
000024  1880              ADDS     r0,r0,r2              ;483
000026  6800              LDR      r0,[r0,#0]            ;483
000028  0212              LSLS     r2,r2,#8              ;483
00002a  4390              BICS     r0,r0,r2              ;483
00002c  1880              ADDS     r0,r0,r2              ;483
00002e  020a              LSLS     r2,r1,#8              ;483
000030  18d2              ADDS     r2,r2,r3              ;483
000032  6010              STR      r0,[r2,#0]            ;483
000034  2000              MOVS     r0,#0                 ;484
000036  e7e7              B        |L1.8|
;;;486    
                          ENDP

                  |L1.56|
                          DCD      0xffff9081
                  |L1.60|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_CHSoftwareReset||, CODE, READONLY, ALIGN=2

                  DrvPDMA_CHSoftwareReset PROC
;;;452    /*---------------------------------------------------------------------------------------------------------*/
;;;453    int32_t DrvPDMA_CHSoftwareReset(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;454    {
;;;455        if (eChannel > eDRVPDMA_CHANNEL_3)		  /* Check PDMA Channel is Valid */
000002  2903              CMP      r1,#3
000004  dd01              BLE      |L2.10|
;;;456            return E_DRVPDMA_FALSE_INPUT;
000006  4807              LDR      r0,|L2.36|
                  |L2.8|
;;;457      			
;;;458         PDMA->channel[eChannel].CSR.SW_RST = 1;  /* Set S/W Reset Bit */
;;;459        return E_SUCCESS;     
;;;460    }
000008  4770              BX       lr
                  |L2.10|
00000a  0208              LSLS     r0,r1,#8              ;458
00000c  4a06              LDR      r2,|L2.40|
00000e  1880              ADDS     r0,r0,r2              ;458
000010  6800              LDR      r0,[r0,#0]            ;458
000012  2202              MOVS     r2,#2                 ;458
000014  4390              BICS     r0,r0,r2              ;458
000016  1c80              ADDS     r0,r0,#2              ;458
000018  020a              LSLS     r2,r1,#8              ;458
00001a  4b03              LDR      r3,|L2.40|
00001c  18d2              ADDS     r2,r2,r3              ;458
00001e  6010              STR      r0,[r2,#0]            ;458
000020  2000              MOVS     r0,#0                 ;459
000022  e7f1              B        |L2.8|
;;;461    
                          ENDP

                  |L2.36|
                          DCD      0xffff9081
                  |L2.40|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_ClearInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_ClearInt PROC
;;;578    /*---------------------------------------------------------------------------------------------------------*/
;;;579    void DrvPDMA_ClearInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_FLAG eIntFlag)
000000  b510              PUSH     {r4,lr}
;;;580    {
;;;581    	switch(eIntFlag)
000002  2301              MOVS     r3,#1
000004  025b              LSLS     r3,r3,#9
000006  1aca              SUBS     r2,r1,r3
000008  4299              CMP      r1,r3
00000a  d037              BEQ      |L3.124|
00000c  dc07              BGT      |L3.30|
00000e  2901              CMP      r1,#1
000010  d00e              BEQ      |L3.48|
000012  2902              CMP      r1,#2
000014  d018              BEQ      |L3.72|
000016  1fca              SUBS     r2,r1,#7
000018  3af9              SUBS     r2,r2,#0xf9
00001a  d15c              BNE      |L3.214|
00001c  e020              B        |L3.96|
                  |L3.30|
00001e  3aff              SUBS     r2,r2,#0xff
000020  3aff              SUBS     r2,r2,#0xff
000022  3a02              SUBS     r2,#2
000024  d039              BEQ      |L3.154|
000026  2301              MOVS     r3,#1
000028  029b              LSLS     r3,r3,#10
00002a  1ad2              SUBS     r2,r2,r3
00002c  d153              BNE      |L3.214|
00002e  e043              B        |L3.184|
                  |L3.48|
;;;582    	{
;;;583    		case eDRVPDMA_TABORT_FLAG:
;;;584    			PDMA->channel[eChannel].ISR.TABORT_IF = 1;
000030  0202              LSLS     r2,r0,#8
000032  4b2a              LDR      r3,|L3.220|
000034  18d2              ADDS     r2,r2,r3
000036  6a52              LDR      r2,[r2,#0x24]
000038  0852              LSRS     r2,r2,#1
00003a  0052              LSLS     r2,r2,#1
00003c  1c52              ADDS     r2,r2,#1
00003e  0203              LSLS     r3,r0,#8
000040  4c26              LDR      r4,|L3.220|
000042  191b              ADDS     r3,r3,r4
000044  625a              STR      r2,[r3,#0x24]
;;;585    			break;
000046  e047              B        |L3.216|
                  |L3.72|
;;;586    
;;;587    		case eDRVPDMA_BLKD_FLAG:
;;;588    			PDMA->channel[eChannel].ISR.BLKD_IF = 1;
000048  0202              LSLS     r2,r0,#8
00004a  4b24              LDR      r3,|L3.220|
00004c  18d2              ADDS     r2,r2,r3
00004e  6a52              LDR      r2,[r2,#0x24]
000050  2302              MOVS     r3,#2
000052  439a              BICS     r2,r2,r3
000054  1c92              ADDS     r2,r2,#2
000056  0203              LSLS     r3,r0,#8
000058  4c20              LDR      r4,|L3.220|
00005a  191b              ADDS     r3,r3,r4
00005c  625a              STR      r2,[r3,#0x24]
;;;589    			break;
00005e  e03b              B        |L3.216|
                  |L3.96|
;;;590    
;;;591    		case eDRVPDMA_WRA_EMPTY_FLAG:
;;;592    			PDMA->channel[eChannel].ISR.WAR_IF = 1;
000060  0202              LSLS     r2,r0,#8
000062  4b1e              LDR      r3,|L3.220|
000064  18d2              ADDS     r2,r2,r3
000066  6a52              LDR      r2,[r2,#0x24]
000068  230f              MOVS     r3,#0xf
00006a  021b              LSLS     r3,r3,#8
00006c  439a              BICS     r2,r2,r3
00006e  32ff              ADDS     r2,r2,#0xff
000070  3201              ADDS     r2,#1
000072  0203              LSLS     r3,r0,#8
000074  4c19              LDR      r4,|L3.220|
000076  191b              ADDS     r3,r3,r4
000078  625a              STR      r2,[r3,#0x24]
;;;593    			break;
00007a  e02d              B        |L3.216|
                  |L3.124|
;;;594    
;;;595    		case eDRVPDMA_WRA_THREE_FOURTHS_FLAG:
;;;596    			PDMA->channel[eChannel].ISR.WAR_IF = 2;
00007c  0202              LSLS     r2,r0,#8
00007e  4b17              LDR      r3,|L3.220|
000080  18d2              ADDS     r2,r2,r3
000082  6a52              LDR      r2,[r2,#0x24]
000084  230f              MOVS     r3,#0xf
000086  021b              LSLS     r3,r3,#8
000088  439a              BICS     r2,r2,r3
00008a  32ff              ADDS     r2,r2,#0xff
00008c  32ff              ADDS     r2,r2,#0xff
00008e  3202              ADDS     r2,#2
000090  0203              LSLS     r3,r0,#8
000092  4c12              LDR      r4,|L3.220|
000094  191b              ADDS     r3,r3,r4
000096  625a              STR      r2,[r3,#0x24]
;;;597    			break;
000098  e01e              B        |L3.216|
                  |L3.154|
;;;598    
;;;599    		case eDRVPDMA_WRA_HALF_FLAG:
;;;600    			PDMA->channel[eChannel].ISR.WAR_IF = 4;
00009a  0202              LSLS     r2,r0,#8
00009c  4b0f              LDR      r3,|L3.220|
00009e  18d2              ADDS     r2,r2,r3
0000a0  6a52              LDR      r2,[r2,#0x24]
0000a2  230f              MOVS     r3,#0xf
0000a4  021b              LSLS     r3,r3,#8
0000a6  439a              BICS     r2,r2,r3
0000a8  2301              MOVS     r3,#1
0000aa  029b              LSLS     r3,r3,#10
0000ac  18d2              ADDS     r2,r2,r3
0000ae  0203              LSLS     r3,r0,#8
0000b0  4c0a              LDR      r4,|L3.220|
0000b2  191b              ADDS     r3,r3,r4
0000b4  625a              STR      r2,[r3,#0x24]
;;;601    			break;
0000b6  e00f              B        |L3.216|
                  |L3.184|
;;;602    
;;;603    		case eDRVPDMA_WRA_QUARTER_FLAG:
;;;604    			PDMA->channel[eChannel].ISR.WAR_IF = 8;
0000b8  0202              LSLS     r2,r0,#8
0000ba  4b08              LDR      r3,|L3.220|
0000bc  18d2              ADDS     r2,r2,r3
0000be  6a52              LDR      r2,[r2,#0x24]
0000c0  230f              MOVS     r3,#0xf
0000c2  021b              LSLS     r3,r3,#8
0000c4  439a              BICS     r2,r2,r3
0000c6  2301              MOVS     r3,#1
0000c8  02db              LSLS     r3,r3,#11
0000ca  18d2              ADDS     r2,r2,r3
0000cc  0203              LSLS     r3,r0,#8
0000ce  4c03              LDR      r4,|L3.220|
0000d0  191b              ADDS     r3,r3,r4
0000d2  625a              STR      r2,[r3,#0x24]
;;;605    			break;
0000d4  e000              B        |L3.216|
                  |L3.214|
;;;606    		default:
;;;607    			break;
0000d6  bf00              NOP      
                  |L3.216|
0000d8  bf00              NOP                            ;585
;;;608    	}
;;;609    }
0000da  bd10              POP      {r4,pc}
;;;610    						  
                          ENDP

                  |L3.220|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_Clear_CSR||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Clear_CSR PROC
;;;149    /*---------------------------------------------------------------------------------------------------------*/
;;;150    int32_t DrvPDMA_Clear_CSR(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;151    {						  	
;;;152    	outpw( &PDMA->channel[eChannel].CSR, 0 ) ;   /* clear Control Register */
000002  2000              MOVS     r0,#0
000004  020a              LSLS     r2,r1,#8
000006  4b02              LDR      r3,|L4.16|
000008  18d2              ADDS     r2,r2,r3
00000a  6010              STR      r0,[r2,#0]
;;;153    	
;;;154    	return E_SUCCESS;
;;;155    }
00000c  4770              BX       lr
;;;156    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_Close||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Close PROC
;;;73     /*---------------------------------------------------------------------------------------------------------*/
;;;74     void DrvPDMA_Close(void)
000000  480b              LDR      r0,|L5.48|
;;;75     {
;;;76        	/* Disable All PDMA clock */
;;;77     	PDMA_GCR->GCR.HCLK_EN = 0x00;
000002  6800              LDR      r0,[r0,#0]
000004  210f              MOVS     r1,#0xf
000006  0209              LSLS     r1,r1,#8
000008  4388              BICS     r0,r0,r1
00000a  4909              LDR      r1,|L5.48|
00000c  6008              STR      r0,[r1,#0]
;;;78     	/* Disable PDMA clock */
;;;79     	UNLOCKREG();
00000e  2059              MOVS     r0,#0x59
000010  4908              LDR      r1,|L5.52|
000012  6008              STR      r0,[r1,#0]
000014  2016              MOVS     r0,#0x16
000016  6008              STR      r0,[r1,#0]
000018  2088              MOVS     r0,#0x88
00001a  6008              STR      r0,[r1,#0]
;;;80     	SYSCLK->AHBCLK.PDMA_EN  =0;
00001c  4806              LDR      r0,|L5.56|
00001e  6840              LDR      r0,[r0,#4]
000020  2102              MOVS     r1,#2
000022  4388              BICS     r0,r0,r1
000024  4904              LDR      r1,|L5.56|
000026  6048              STR      r0,[r1,#4]
;;;81     	LOCKREG();					
000028  2000              MOVS     r0,#0
00002a  4902              LDR      r1,|L5.52|
00002c  6008              STR      r0,[r1,#0]
;;;82     	
;;;83     }
00002e  4770              BX       lr
;;;84     
                          ENDP

                  |L5.48|
                          DCD      0x50008f00
                  |L5.52|
                          DCD      0x50000100
                  |L5.56|
                          DCD      0x50000200

                          AREA ||i.DrvPDMA_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_DisableInt PROC
;;;522    /*---------------------------------------------------------------------------------------------------------*/
;;;523    void DrvPDMA_DisableInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource)
000000  b510              PUSH     {r4,lr}
;;;524    { 						   
;;;525    	/* Disable Specified Interrupt */
;;;526    	outpw(&PDMA->channel[eChannel].IER, inpw(&PDMA->channel[eChannel].IER) & ~eIntSource); 
000002  0202              LSLS     r2,r0,#8
000004  4b04              LDR      r3,|L6.24|
000006  18d2              ADDS     r2,r2,r3
000008  6a12              LDR      r2,[r2,#0x20]
00000a  438a              BICS     r2,r2,r1
00000c  0203              LSLS     r3,r0,#8
00000e  4c02              LDR      r4,|L6.24|
000010  191b              ADDS     r3,r3,r4
000012  621a              STR      r2,[r3,#0x20]
;;;527    }
000014  bd10              POP      {r4,pc}
;;;528    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_EnableCH||, CODE, READONLY, ALIGN=2

                  DrvPDMA_EnableCH PROC
;;;169    /*---------------------------------------------------------------------------------------------------------*/
;;;170    void DrvPDMA_EnableCH(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_OPERATION eOP)
000000  b510              PUSH     {r4,lr}
;;;171    {
;;;172    	PDMA->channel[eChannel].CSR.PDMACEN = eOP; 			  	  /* Enable PDMA Channel */
000002  0202              LSLS     r2,r0,#8
000004  4b06              LDR      r3,|L7.32|
000006  18d2              ADDS     r2,r2,r3
000008  6812              LDR      r2,[r2,#0]
00000a  0852              LSRS     r2,r2,#1
00000c  0052              LSLS     r2,r2,#1
00000e  07cb              LSLS     r3,r1,#31
000010  0fdb              LSRS     r3,r3,#31
000012  431a              ORRS     r2,r2,r3
000014  0203              LSLS     r3,r0,#8
000016  4c02              LDR      r4,|L7.32|
000018  191b              ADDS     r3,r3,r4
00001a  601a              STR      r2,[r3,#0]
;;;173    }
00001c  bd10              POP      {r4,pc}
;;;174    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_EnableInt PROC
;;;499    /*---------------------------------------------------------------------------------------------------------*/
;;;500    int32_t DrvPDMA_EnableInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource)
000000  b570              PUSH     {r4-r6,lr}
;;;501    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;502        if (eChannel > eDRVPDMA_CHANNEL_3)							/* Check PDMA Channel is Valid */
000006  2c03              CMP      r4,#3
000008  dd01              BLE      |L8.14|
;;;503            return E_DRVPDMA_FALSE_INPUT;
00000a  4808              LDR      r0,|L8.44|
                  |L8.12|
;;;504    
;;;505    	outpw(&PDMA->channel[eChannel].IER, inpw(&PDMA->channel[eChannel].IER) | eIntSource); 
;;;506      																		
;;;507    	NVIC_EnableIRQ(PDMA_IRQn);  							   	/* Enable Specified Interrupt */
;;;508       
;;;509        return E_SUCCESS;      
;;;510    }
00000c  bd70              POP      {r4-r6,pc}
                  |L8.14|
00000e  0220              LSLS     r0,r4,#8              ;505
000010  4907              LDR      r1,|L8.48|
000012  1840              ADDS     r0,r0,r1              ;505
000014  6a00              LDR      r0,[r0,#0x20]         ;505
000016  4328              ORRS     r0,r0,r5              ;505
000018  0221              LSLS     r1,r4,#8              ;505
00001a  4a05              LDR      r2,|L8.48|
00001c  1889              ADDS     r1,r1,r2              ;505
00001e  6208              STR      r0,[r1,#0x20]         ;505
000020  201a              MOVS     r0,#0x1a              ;507
000022  f7fffffe          BL       NVIC_EnableIRQ
000026  2000              MOVS     r0,#0                 ;509
000028  e7f0              B        |L8.12|
;;;511    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      0xffff9081
                  |L8.48|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetAPBTransferWidth||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetAPBTransferWidth PROC
;;;275    /*---------------------------------------------------------------------------------------------------------*/
;;;276    int32_t DrvPDMA_GetAPBTransferWidth(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;277    {
;;;278    	volatile int32_t u32Width;
;;;279        																		/* Check Channel is valid */
;;;280        if (eChannel > eDRVPDMA_CHANNEL_3)
000002  2903              CMP      r1,#3
000004  dd01              BLE      |L9.10|
;;;281            return E_DRVPDMA_FALSE_INPUT; 
000006  4805              LDR      r0,|L9.28|
                  |L9.8|
;;;282          
;;;283    	u32Width = PDMA->channel[eChannel].CSR.APB_TWS;    					    /* Get Transfer width */
;;;284        
;;;285        return u32Width;    
;;;286    }
000008  4770              BX       lr
                  |L9.10|
00000a  0208              LSLS     r0,r1,#8              ;283
00000c  4b04              LDR      r3,|L9.32|
00000e  18c0              ADDS     r0,r0,r3              ;283
000010  6800              LDR      r0,[r0,#0]            ;283
000012  02c0              LSLS     r0,r0,#11             ;283
000014  0f82              LSRS     r2,r0,#30             ;283
000016  4610              MOV      r0,r2                 ;285
000018  e7f6              B        |L9.8|
;;;287    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0xffff9081
                  |L9.32|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetCHForAPBDevice||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCHForAPBDevice PROC
;;;383    /*---------------------------------------------------------------------------------------------------------*/
;;;384    int32_t DrvPDMA_GetCHForAPBDevice(E_DRVPDMA_APB_DEVICE eDevice,E_DRVPDMA_APB_RW eRWAPB)
000000  b500              PUSH     {lr}
;;;385    {
000002  4602              MOV      r2,r0
;;;386      
;;;387    	switch(eDevice)
000004  0013              MOVS     r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0504              DCB      0x05,0x04
00000c  10192530          DCB      0x10,0x19,0x25,0x30
000010  3900              DCB      0x39,0x00
;;;388    	{
;;;389    		case eDRVPDMA_SPI0:
;;;390    			if(eRWAPB)	  
000012  2900              CMP      r1,#0
000014  d004              BEQ      |L10.32|
;;;391    				return PDMA_GCR->PDSSR.SPI0_TXSEL;						 	/* Get SPI0 PDMA Channel */
000016  481a              LDR      r0,|L10.128|
000018  6840              LDR      r0,[r0,#4]
00001a  0600              LSLS     r0,r0,#24
00001c  0f00              LSRS     r0,r0,#28
                  |L10.30|
;;;392    			else
;;;393    				return PDMA_GCR->PDSSR.SPI0_RXSEL;
;;;394    	   		
;;;395    	   	case eDRVPDMA_DPWM:												 	/* Get DPWM PDMA Channel */
;;;396    			if(eRWAPB)	  
;;;397    				return PDMA_GCR->PDSSR.DPWM_TXSEL;
;;;398    			else
;;;399    				return E_DRVPDMA_FALSE_INPUT;
;;;400    	   		   		
;;;401    		case eDRVPDMA_UART0:											 	/* Get UART0 PDMA Channel */
;;;402    			if(eRWAPB)	
;;;403    				return PDMA_GCR->PDSSR.UART0_TXSEL;
;;;404    			else
;;;405    				return PDMA_GCR->PDSSR.UART0_RXSEL;
;;;406    	   		
;;;407    	   		
;;;408    		case eDRVPDMA_I2S:													/* Get I2S PDMA Channel */
;;;409    			if(eRWAPB)	
;;;410    				return PDMA_GCR->PDSSR.I2S_TXSEL;
;;;411    			else
;;;412    				return PDMA_GCR->PDSSR.I2S_RXSEL;
;;;413    	   		
;;;414    		case eDRVPDMA_ADC:													/* Get ADC PDMA Channel */
;;;415    			if(eRWAPB)	
;;;416    				return E_DRVPDMA_FALSE_INPUT;
;;;417    			else
;;;418    				return PDMA_GCR->PDSSR.ADC_RXSEL;
;;;419    	   		
;;;420    		default:
;;;421    			return 	E_DRVPDMA_FALSE_INPUT;
;;;422    	}
;;;423    }
00001e  bd00              POP      {pc}
                  |L10.32|
000020  4817              LDR      r0,|L10.128|
000022  6840              LDR      r0,[r0,#4]            ;393
000024  0700              LSLS     r0,r0,#28             ;393
000026  0f00              LSRS     r0,r0,#28             ;393
000028  e7f9              B        |L10.30|
00002a  2900              CMP      r1,#0                 ;396
00002c  d004              BEQ      |L10.56|
00002e  4814              LDR      r0,|L10.128|
000030  6840              LDR      r0,[r0,#4]            ;397
000032  0400              LSLS     r0,r0,#16             ;397
000034  0f00              LSRS     r0,r0,#28             ;397
000036  e7f2              B        |L10.30|
                  |L10.56|
000038  4812              LDR      r0,|L10.132|
00003a  e7f0              B        |L10.30|
00003c  2900              CMP      r1,#0                 ;402
00003e  d004              BEQ      |L10.74|
000040  480f              LDR      r0,|L10.128|
000042  6840              LDR      r0,[r0,#4]            ;403
000044  0200              LSLS     r0,r0,#8              ;403
000046  0f00              LSRS     r0,r0,#28             ;403
000048  e7e9              B        |L10.30|
                  |L10.74|
00004a  480d              LDR      r0,|L10.128|
00004c  6840              LDR      r0,[r0,#4]            ;405
00004e  0300              LSLS     r0,r0,#12             ;405
000050  0f00              LSRS     r0,r0,#28             ;405
000052  e7e4              B        |L10.30|
000054  2900              CMP      r1,#0                 ;409
000056  d003              BEQ      |L10.96|
000058  4809              LDR      r0,|L10.128|
00005a  6840              LDR      r0,[r0,#4]            ;410
00005c  0f00              LSRS     r0,r0,#28             ;410
00005e  e7de              B        |L10.30|
                  |L10.96|
000060  4807              LDR      r0,|L10.128|
000062  6840              LDR      r0,[r0,#4]            ;412
000064  0100              LSLS     r0,r0,#4              ;412
000066  0f00              LSRS     r0,r0,#28             ;412
000068  e7d9              B        |L10.30|
00006a  2900              CMP      r1,#0                 ;415
00006c  d001              BEQ      |L10.114|
00006e  4805              LDR      r0,|L10.132|
000070  e7d5              B        |L10.30|
                  |L10.114|
000072  4803              LDR      r0,|L10.128|
000074  6840              LDR      r0,[r0,#4]            ;418
000076  0500              LSLS     r0,r0,#20             ;418
000078  0f00              LSRS     r0,r0,#28             ;418
00007a  e7d0              B        |L10.30|
00007c  4801              LDR      r0,|L10.132|
00007e  e7ce              B        |L10.30|
;;;424    
                          ENDP

                  |L10.128|
                          DCD      0x50008f00
                  |L10.132|
                          DCD      0xffff9081

                          AREA ||i.DrvPDMA_GetCurrentDestAddr||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCurrentDestAddr PROC
;;;790    /*---------------------------------------------------------------------------------------------------------*/
;;;791    uint32_t DrvPDMA_GetCurrentDestAddr(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;792    {
;;;793    	return PDMA->channel[eChannel].CDAR;    
000002  0208              LSLS     r0,r1,#8
000004  4a01              LDR      r2,|L11.12|
000006  1880              ADDS     r0,r0,r2
000008  6980              LDR      r0,[r0,#0x18]
;;;794    }
00000a  4770              BX       lr
;;;795    
                          ENDP

                  |L11.12|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetCurrentSourceAddr||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCurrentSourceAddr PROC
;;;775    /*---------------------------------------------------------------------------------------------------------*/
;;;776    uint32_t DrvPDMA_GetCurrentSourceAddr(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;777    {
;;;778        return PDMA->channel[eChannel].CSAR;    
000002  0208              LSLS     r0,r1,#8
000004  4a01              LDR      r2,|L12.12|
000006  1880              ADDS     r0,r0,r2
000008  6940              LDR      r0,[r0,#0x14]
;;;779    }
00000a  4770              BX       lr
;;;780    
                          ENDP

                  |L12.12|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetCurrentTransferCount||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetCurrentTransferCount PROC
;;;805    /*---------------------------------------------------------------------------------------------------------*/
;;;806    uint32_t DrvPDMA_GetCurrentTransferCount(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;807    {
;;;808    	return PDMA->channel[eChannel].CBCR.CBCR;
000002  0208              LSLS     r0,r1,#8
000004  4a02              LDR      r2,|L13.16|
000006  1880              ADDS     r0,r0,r2
000008  69c0              LDR      r0,[r0,#0x1c]
00000a  0200              LSLS     r0,r0,#8
00000c  0a00              LSRS     r0,r0,#8
;;;809    }
00000e  4770              BX       lr
;;;810    
                          ENDP

                  |L13.16|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetInternalBufPointer||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetInternalBufPointer PROC
;;;665    /*---------------------------------------------------------------------------------------------------------*/
;;;666    uint32_t DrvPDMA_GetInternalBufPointer(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;667    {    
;;;668        if (eChannel > eDRVPDMA_CHANNEL_3)
000002  2903              CMP      r1,#3
000004  dd01              BLE      |L14.10|
;;;669            return E_DRVPDMA_FALSE_INPUT;    
000006  4803              LDR      r0,|L14.20|
                  |L14.8|
;;;670    
;;;671    	return PDMA->channel[eChannel].POINT;
;;;672    }
000008  4770              BX       lr
                  |L14.10|
00000a  0208              LSLS     r0,r1,#8              ;671
00000c  4a02              LDR      r2,|L14.24|
00000e  1880              ADDS     r0,r0,r2              ;671
000010  6900              LDR      r0,[r0,#0x10]         ;671
000012  e7f9              B        |L14.8|
;;;673    
                          ENDP

                  |L14.20|
                          DCD      0xffff9081
                  |L14.24|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetTransferLength||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetTransferLength PROC
;;;228    /*---------------------------------------------------------------------------------------------------------*/
;;;229    int32_t DrvPDMA_GetTransferLength(E_DRVPDMA_CHANNEL_INDEX eChannel, uint32_t* pu32TransferLength)
000000  4602              MOV      r2,r0
;;;230    {
;;;231        
;;;232        if (eChannel > eDRVPDMA_CHANNEL_3)										/* Check Channel is valid */
000002  2a03              CMP      r2,#3
000004  dd01              BLE      |L15.10|
;;;233            return E_DRVPDMA_FALSE_INPUT; 
000006  4804              LDR      r0,|L15.24|
                  |L15.8|
;;;234                
;;;235    	*pu32TransferLength = PDMA->channel[eChannel].BCR;					   	/* Get Transfer Length */
;;;236        
;;;237        return E_SUCCESS;       
;;;238    }
000008  4770              BX       lr
                  |L15.10|
00000a  0210              LSLS     r0,r2,#8              ;235
00000c  4b03              LDR      r3,|L15.28|
00000e  18c0              ADDS     r0,r0,r3              ;235
000010  68c0              LDR      r0,[r0,#0xc]          ;235
000012  6008              STR      r0,[r1,#0]            ;235
000014  2000              MOVS     r0,#0                 ;237
000016  e7f7              B        |L15.8|
;;;239    
                          ENDP

                  |L15.24|
                          DCD      0xffff9081
                  |L15.28|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetTransferSetting||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetTransferSetting PROC
;;;857    /*---------------------------------------------------------------------------------------------------------*/
;;;858    int32_t DrvPDMA_GetTransferSetting(
000000  b530              PUSH     {r4,r5,lr}
;;;859    	E_DRVPDMA_CHANNEL_INDEX eChannel, 
;;;860    	E_DRVPDMA_TARGET eTarget, 
;;;861    	uint32_t* pu32Addr, 
;;;862    	E_DRVPDMA_DIRECTION_SELECT* peDirection
;;;863    )
;;;864    {
000002  4604              MOV      r4,r0
;;;865        if (eChannel > eDRVPDMA_CHANNEL_3)							/* Check PDMA Channel is Valid */
000004  2c03              CMP      r4,#3
000006  dd01              BLE      |L16.12|
;;;866            return E_DRVPDMA_FALSE_INPUT;
000008  480f              LDR      r0,|L16.72|
                  |L16.10|
;;;867    
;;;868    	if(eTarget == eDRVPDMA_TARGET_SOURCE) {
;;;869    		*pu32Addr = PDMA->channel[eChannel].SAR;
;;;870    		*peDirection = (E_DRVPDMA_DIRECTION_SELECT)PDMA->channel[eChannel].CSR.SAD_SEL;
;;;871    	} else if(eTarget == eDRVPDMA_TARGET_DESTINATION) {
;;;872    		*pu32Addr = PDMA->channel[eChannel].DAR;
;;;873    		*peDirection = (E_DRVPDMA_DIRECTION_SELECT)PDMA->channel[eChannel].CSR.DAD_SEL;
;;;874    	}
;;;875    
;;;876    	return E_SUCCESS;
;;;877    }
00000a  bd30              POP      {r4,r5,pc}
                  |L16.12|
00000c  2900              CMP      r1,#0                 ;868
00000e  d10b              BNE      |L16.40|
000010  0220              LSLS     r0,r4,#8              ;869
000012  4d0e              LDR      r5,|L16.76|
000014  1940              ADDS     r0,r0,r5              ;869
000016  6840              LDR      r0,[r0,#4]            ;869
000018  6010              STR      r0,[r2,#0]            ;869
00001a  0220              LSLS     r0,r4,#8              ;870
00001c  1940              ADDS     r0,r0,r5              ;870
00001e  6800              LDR      r0,[r0,#0]            ;870
000020  0680              LSLS     r0,r0,#26             ;870
000022  0f80              LSRS     r0,r0,#30             ;870
000024  7018              STRB     r0,[r3,#0]            ;870
000026  e00c              B        |L16.66|
                  |L16.40|
000028  2901              CMP      r1,#1                 ;871
00002a  d10a              BNE      |L16.66|
00002c  0220              LSLS     r0,r4,#8              ;872
00002e  4d07              LDR      r5,|L16.76|
000030  1940              ADDS     r0,r0,r5              ;872
000032  6880              LDR      r0,[r0,#8]            ;872
000034  6010              STR      r0,[r2,#0]            ;872
000036  0220              LSLS     r0,r4,#8              ;873
000038  1940              ADDS     r0,r0,r5              ;873
00003a  6800              LDR      r0,[r0,#0]            ;873
00003c  0600              LSLS     r0,r0,#24             ;873
00003e  0f80              LSRS     r0,r0,#30             ;873
000040  7018              STRB     r0,[r3,#0]            ;873
                  |L16.66|
000042  2000              MOVS     r0,#0                 ;876
000044  e7e1              B        |L16.10|
;;;878    
                          ENDP

000046  0000              DCW      0x0000
                  |L16.72|
                          DCD      0xffff9081
                  |L16.76|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetVersion PROC
;;;889    /*---------------------------------------------------------------------------------------------------------*/
;;;890    int32_t DrvPDMA_GetVersion(void)
000000  4800              LDR      r0,|L17.4|
;;;891    {
;;;892    	return DRVPDMA_VERSION_NUM;
;;;893    }
000002  4770              BX       lr
;;;894    
                          ENDP

                  |L17.4|
                          DCD      0x00010001

                          AREA ||i.DrvPDMA_GetWrapIntType||, CODE, READONLY, ALIGN=2

                  DrvPDMA_GetWrapIntType PROC
;;;436    /*---------------------------------------------------------------------------------------------------------*/
;;;437    int32_t DrvPDMA_GetWrapIntType(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;438    {
;;;439    	return PDMA->channel[eChannel].CSR.WRA_INT_SEL;
000002  0208              LSLS     r0,r1,#8
000004  4a02              LDR      r2,|L18.16|
000006  1880              ADDS     r0,r0,r2
000008  6800              LDR      r0,[r0,#0]
00000a  0400              LSLS     r0,r0,#16
00000c  0f00              LSRS     r0,r0,#28
;;;440    }
00000e  4770              BX       lr
;;;441    
                          ENDP

                  |L18.16|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_Init||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Init PROC
;;;55     /*---------------------------------------------------------------------------------------------------------*/
;;;56     void DrvPDMA_Init(void)
000000  2059              MOVS     r0,#0x59
;;;57     {
;;;58         UNLOCKREG();
000002  4908              LDR      r1,|L19.36|
000004  6008              STR      r0,[r1,#0]
000006  2016              MOVS     r0,#0x16
000008  6008              STR      r0,[r1,#0]
00000a  2088              MOVS     r0,#0x88
00000c  6008              STR      r0,[r1,#0]
;;;59     	/* Enable PDMA Clock */
;;;60     	SYSCLK->AHBCLK.PDMA_EN  =1;		 	
00000e  4806              LDR      r0,|L19.40|
000010  6840              LDR      r0,[r0,#4]
000012  2102              MOVS     r1,#2
000014  4388              BICS     r0,r0,r1
000016  1c80              ADDS     r0,r0,#2
000018  4903              LDR      r1,|L19.40|
00001a  6048              STR      r0,[r1,#4]
;;;61     	LOCKREG();
00001c  2000              MOVS     r0,#0
00001e  4901              LDR      r1,|L19.36|
000020  6008              STR      r0,[r1,#0]
;;;62     }
000022  4770              BX       lr
;;;63     
                          ENDP

                  |L19.36|
                          DCD      0x50000100
                  |L19.40|
                          DCD      0x50000200

                          AREA ||i.DrvPDMA_InstallCallBack||, CODE, READONLY, ALIGN=2

                  DrvPDMA_InstallCallBack PROC
;;;747    /*---------------------------------------------------------------------------------------------------------*/
;;;748    int32_t DrvPDMA_InstallCallBack(
000000  b570              PUSH     {r4-r6,lr}
;;;749    	E_DRVPDMA_CHANNEL_INDEX eChannel, 
;;;750        E_DRVPDMA_INT_ENABLE eIntSource,
;;;751    	PFN_DRVPDMA_CALLBACK pfncallback   
;;;752    )
;;;753    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;754    
;;;755        if (eChannel > eDRVPDMA_CHANNEL_3)								/* Check PDMA Channel is Valid */
000008  2c03              CMP      r4,#3
00000a  dd01              BLE      |L20.16|
;;;756            return E_DRVPDMA_FALSE_INPUT;
00000c  4806              LDR      r0,|L20.40|
                  |L20.14|
;;;757    
;;;758    	g_pfnPDMACallback[eChannel][eIntSource>>1] = pfncallback;	    /* Install Callback funtion */
;;;759    	
;;;760    	NVIC_EnableIRQ(PDMA_IRQn);     
;;;761    
;;;762        return E_SUCCESS;      
;;;763    }
00000e  bd70              POP      {r4-r6,pc}
                  |L20.16|
000010  200c              MOVS     r0,#0xc               ;758
000012  4360              MULS     r0,r4,r0              ;758
000014  4905              LDR      r1,|L20.44|
000016  1840              ADDS     r0,r0,r1              ;758
000018  1069              ASRS     r1,r5,#1              ;758
00001a  0089              LSLS     r1,r1,#2              ;758
00001c  5046              STR      r6,[r0,r1]            ;758
00001e  201a              MOVS     r0,#0x1a              ;760
000020  f7fffffe          BL       NVIC_EnableIRQ
000024  2000              MOVS     r0,#0                 ;762
000026  e7f2              B        |L20.14|
;;;764    
                          ENDP

                  |L20.40|
                          DCD      0xffff9081
                  |L20.44|
                          DCD      g_pfnPDMACallback

                          AREA ||i.DrvPDMA_IsCHBusy||, CODE, READONLY, ALIGN=2

                  DrvPDMA_IsCHBusy PROC
;;;201    /*---------------------------------------------------------------------------------------------------------*/
;;;202    int32_t DrvPDMA_IsCHBusy(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;203    {
;;;204        
;;;205        if (eChannel > eDRVPDMA_CHANNEL_3)	    								/* Check Channel is valid */
000002  2903              CMP      r1,#3
000004  dd01              BLE      |L21.10|
;;;206            return E_DRVPDMA_FALSE_INPUT;    
000006  4806              LDR      r0,|L21.32|
                  |L21.8|
;;;207           
;;;208        if (PDMA->channel[eChannel].CSR.TRIG_EN)								/* Check Channel is triggering or not */
;;;209            return TRUE;
;;;210        else
;;;211            return FALSE;    
;;;212    }
000008  4770              BX       lr
                  |L21.10|
00000a  0208              LSLS     r0,r1,#8              ;208
00000c  4a05              LDR      r2,|L21.36|
00000e  1880              ADDS     r0,r0,r2              ;208
000010  6800              LDR      r0,[r0,#0]            ;208
000012  0200              LSLS     r0,r0,#8              ;208
000014  0fc0              LSRS     r0,r0,#31             ;208
000016  d001              BEQ      |L21.28|
000018  2001              MOVS     r0,#1                 ;209
00001a  e7f5              B        |L21.8|
                  |L21.28|
00001c  2000              MOVS     r0,#0                 ;211
00001e  e7f3              B        |L21.8|
;;;213    
                          ENDP

                  |L21.32|
                          DCD      0xffff9081
                  |L21.36|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_IsEnabledCH||, CODE, READONLY, ALIGN=2

                  DrvPDMA_IsEnabledCH PROC
;;;184    /*---------------------------------------------------------------------------------------------------------*/
;;;185    int32_t DrvPDMA_IsEnabledCH(E_DRVPDMA_CHANNEL_INDEX eChannel)
000000  4601              MOV      r1,r0
;;;186    {
;;;187    	return 	PDMA->channel[eChannel].CSR.PDMACEN;
000002  0208              LSLS     r0,r1,#8
000004  4a02              LDR      r2,|L22.16|
000006  1880              ADDS     r0,r0,r2
000008  6800              LDR      r0,[r0,#0]
00000a  07c0              LSLS     r0,r0,#31
00000c  0fc0              LSRS     r0,r0,#31
;;;188    }
00000e  4770              BX       lr
;;;189    
                          ENDP

                  |L22.16|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_IsIntEnabled||, CODE, READONLY, ALIGN=2

                  DrvPDMA_IsIntEnabled PROC
;;;541    /*---------------------------------------------------------------------------------------------------------*/
;;;542    int32_t	DrvPDMA_IsIntEnabled(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_ENABLE eIntSource )
000000  4602              MOV      r2,r0
;;;543    {
;;;544       
;;;545        switch(eIntSource)					/* Read ISR Register and check Specified Interrupt Enable or not */
000002  2901              CMP      r1,#1
000004  d004              BEQ      |L23.16|
000006  2902              CMP      r1,#2
000008  d009              BEQ      |L23.30|
00000a  2904              CMP      r1,#4
00000c  d119              BNE      |L23.66|
00000e  e00d              B        |L23.44|
                  |L23.16|
;;;546        {														
;;;547        	case eDRVPDMA_TABORT: 			
;;;548    			return ((PDMA->channel[eChannel].ISR.TABORT_IF) ? TRUE : FALSE);	/* Target Abort Interrupt */
000010  0210              LSLS     r0,r2,#8
000012  4b0d              LDR      r3,|L23.72|
000014  18c0              ADDS     r0,r0,r3
000016  6a40              LDR      r0,[r0,#0x24]
000018  07c0              LSLS     r0,r0,#31
00001a  0fc0              LSRS     r0,r0,#31
                  |L23.28|
;;;549        		
;;;550        	case eDRVPDMA_BLKD:    					
;;;551    			return ((PDMA->channel[eChannel].ISR.BLKD_IF) ? TRUE : FALSE);		/* Transfer Done Interrupt */
;;;552        															
;;;553        	case eDRVPDMA_WAR:   					
;;;554    			return ((PDMA->channel[eChannel].ISR.WAR_IF) ? TRUE : FALSE);	    /* Wrap Around Interrupt */
;;;555        		
;;;556    		default :
;;;557    	    	return E_DRVPDMA_FALSE_INPUT;		    		
;;;558    	}    
;;;559    }
00001c  4770              BX       lr
                  |L23.30|
00001e  0210              LSLS     r0,r2,#8              ;551
000020  4b09              LDR      r3,|L23.72|
000022  18c0              ADDS     r0,r0,r3              ;551
000024  6a40              LDR      r0,[r0,#0x24]         ;551
000026  0780              LSLS     r0,r0,#30             ;551
000028  0fc0              LSRS     r0,r0,#31             ;551
00002a  e7f7              B        |L23.28|
                  |L23.44|
00002c  0210              LSLS     r0,r2,#8              ;554
00002e  4b06              LDR      r3,|L23.72|
000030  18c0              ADDS     r0,r0,r3              ;554
000032  6a40              LDR      r0,[r0,#0x24]         ;554
000034  0500              LSLS     r0,r0,#20             ;554
000036  0f00              LSRS     r0,r0,#28             ;554
000038  d001              BEQ      |L23.62|
00003a  2001              MOVS     r0,#1                 ;554
00003c  e7ee              B        |L23.28|
                  |L23.62|
00003e  2000              MOVS     r0,#0                 ;554
000040  e7ec              B        |L23.28|
                  |L23.66|
000042  4802              LDR      r0,|L23.76|
000044  e7ea              B        |L23.28|
;;;560    
                          ENDP

000046  0000              DCW      0x0000
                  |L23.72|
                          DCD      0x50008000
                  |L23.76|
                          DCD      0xffff9081

                          AREA ||i.DrvPDMA_Open||, CODE, READONLY, ALIGN=2

                  DrvPDMA_Open PROC
;;;104    /*---------------------------------------------------------------------------------------------------------*/
;;;105    int32_t DrvPDMA_Open(E_DRVPDMA_CHANNEL_INDEX eChannel, STR_PDMA_T *sParam)
000000  b530              PUSH     {r4,r5,lr}
;;;106    {						  
000002  4602              MOV      r2,r0
;;;107    	volatile int32_t i = 10;
000004  230a              MOVS     r3,#0xa
;;;108    
;;;109        /*-----------------------------------------------------------------------------------------------------*/
;;;110        /* Check PDMA channel                                                                                  */
;;;111        /*-----------------------------------------------------------------------------------------------------*/
;;;112        if (eChannel > eDRVPDMA_CHANNEL_3)
000006  2a03              CMP      r2,#3
000008  dd01              BLE      |L24.14|
;;;113        {
;;;114    		return E_DRVPDMA_ERR_PORT_INVALID;
00000a  4846              LDR      r0,|L24.292|
                  |L24.12|
;;;115        }
;;;116    
;;;117    	/*-----------------------------------------------------------------------------------------------------*/
;;;118        /* Set PDMA settings                                                                                   */
;;;119        /*-----------------------------------------------------------------------------------------------------*/
;;;120        PDMA_GCR->GCR.HCLK_EN |= (1<<(eChannel));	              /* Enable Channel Clock */
;;;121     	PDMA->channel[eChannel].CSR.PDMACEN = 1; 			  	  /* Enable PDMA Channel */
;;;122    	PDMA->channel[eChannel].CSR.SW_RST=1;					  /* Reset PDMA Channel */
;;;123        while(i--);	  /* Need a delay to allow reset */
;;;124        
;;;125        PDMA->channel[eChannel].SAR = sParam->sSrcAddr.u32Addr;   /* Set Source Address */
;;;126        PDMA->channel[eChannel].DAR = sParam->sDestAddr.u32Addr;  /* Set Destination Address */
;;;127        /* Set Control Register */
;;;128        PDMA->channel[eChannel].CSR.SAD_SEL = sParam->sSrcAddr.eAddrDirection;
;;;129        PDMA->channel[eChannel].CSR.DAD_SEL = sParam->sDestAddr.eAddrDirection;
;;;130        PDMA->channel[eChannel].CSR.APB_TWS = sParam->u8TransWidth;
;;;131        PDMA->channel[eChannel].CSR.MODE_SEL = sParam->u8Mode;
;;;132        PDMA->channel[eChannel].CSR.WRA_INT_SEL = sParam->u8WrapBcr;
;;;133    
;;;134        PDMA->channel[eChannel].BCR = sParam->i32ByteCnt;	    /* Set Byte Count Register */
;;;135        
;;;136    	return E_SUCCESS;    
;;;137    }
00000c  bd30              POP      {r4,r5,pc}
                  |L24.14|
00000e  4c46              LDR      r4,|L24.296|
000010  6824              LDR      r4,[r4,#0]            ;120
000012  0524              LSLS     r4,r4,#20             ;120
000014  0f24              LSRS     r4,r4,#28             ;120
000016  2501              MOVS     r5,#1                 ;120
000018  4095              LSLS     r5,r5,r2              ;120
00001a  432c              ORRS     r4,r4,r5              ;120
00001c  0224              LSLS     r4,r4,#8              ;120
00001e  250f              MOVS     r5,#0xf               ;120
000020  022d              LSLS     r5,r5,#8              ;120
000022  402c              ANDS     r4,r4,r5              ;120
000024  4620              MOV      r0,r4                 ;120
000026  4c40              LDR      r4,|L24.296|
000028  6824              LDR      r4,[r4,#0]            ;120
00002a  43ac              BICS     r4,r4,r5              ;120
00002c  4304              ORRS     r4,r4,r0              ;120
00002e  4d3e              LDR      r5,|L24.296|
000030  602c              STR      r4,[r5,#0]            ;120
000032  0210              LSLS     r0,r2,#8              ;121
000034  4c3d              LDR      r4,|L24.300|
000036  1900              ADDS     r0,r0,r4              ;121
000038  6800              LDR      r0,[r0,#0]            ;121
00003a  0840              LSRS     r0,r0,#1              ;121
00003c  0040              LSLS     r0,r0,#1              ;121
00003e  1c40              ADDS     r0,r0,#1              ;121
000040  0214              LSLS     r4,r2,#8              ;121
000042  4d3a              LDR      r5,|L24.300|
000044  1964              ADDS     r4,r4,r5              ;121
000046  6020              STR      r0,[r4,#0]            ;121
000048  0210              LSLS     r0,r2,#8              ;122
00004a  462c              MOV      r4,r5                 ;122
00004c  1900              ADDS     r0,r0,r4              ;122
00004e  6800              LDR      r0,[r0,#0]            ;122
000050  2402              MOVS     r4,#2                 ;122
000052  43a0              BICS     r0,r0,r4              ;122
000054  1c80              ADDS     r0,r0,#2              ;122
000056  0214              LSLS     r4,r2,#8              ;122
000058  1964              ADDS     r4,r4,r5              ;122
00005a  6020              STR      r0,[r4,#0]            ;122
00005c  bf00              NOP                            ;123
                  |L24.94|
00005e  4618              MOV      r0,r3                 ;123
000060  1e5b              SUBS     r3,r3,#1              ;123
000062  2800              CMP      r0,#0                 ;123
000064  d1fb              BNE      |L24.94|
000066  0214              LSLS     r4,r2,#8              ;125
000068  4d30              LDR      r5,|L24.300|
00006a  1964              ADDS     r4,r4,r5              ;125
00006c  6808              LDR      r0,[r1,#0]            ;125
00006e  6060              STR      r0,[r4,#4]            ;125
000070  0214              LSLS     r4,r2,#8              ;126
000072  1964              ADDS     r4,r4,r5              ;126
000074  6888              LDR      r0,[r1,#8]            ;126
000076  60a0              STR      r0,[r4,#8]            ;126
000078  0210              LSLS     r0,r2,#8              ;128
00007a  462c              MOV      r4,r5                 ;128
00007c  1900              ADDS     r0,r0,r4              ;128
00007e  6800              LDR      r0,[r0,#0]            ;128
000080  2430              MOVS     r4,#0x30              ;128
000082  43a0              BICS     r0,r0,r4              ;128
000084  790c              LDRB     r4,[r1,#4]            ;128
000086  0124              LSLS     r4,r4,#4              ;128
000088  2530              MOVS     r5,#0x30              ;128
00008a  402c              ANDS     r4,r4,r5              ;128
00008c  4320              ORRS     r0,r0,r4              ;128
00008e  0214              LSLS     r4,r2,#8              ;128
000090  4d26              LDR      r5,|L24.300|
000092  1964              ADDS     r4,r4,r5              ;128
000094  6020              STR      r0,[r4,#0]            ;128
000096  0210              LSLS     r0,r2,#8              ;129
000098  462c              MOV      r4,r5                 ;129
00009a  1900              ADDS     r0,r0,r4              ;129
00009c  6800              LDR      r0,[r0,#0]            ;129
00009e  24c0              MOVS     r4,#0xc0              ;129
0000a0  43a0              BICS     r0,r0,r4              ;129
0000a2  7b0c              LDRB     r4,[r1,#0xc]          ;129
0000a4  01a4              LSLS     r4,r4,#6              ;129
0000a6  25c0              MOVS     r5,#0xc0              ;129
0000a8  402c              ANDS     r4,r4,r5              ;129
0000aa  4320              ORRS     r0,r0,r4              ;129
0000ac  0214              LSLS     r4,r2,#8              ;129
0000ae  4d1f              LDR      r5,|L24.300|
0000b0  1964              ADDS     r4,r4,r5              ;129
0000b2  6020              STR      r0,[r4,#0]            ;129
0000b4  0210              LSLS     r0,r2,#8              ;130
0000b6  462c              MOV      r4,r5                 ;130
0000b8  1900              ADDS     r0,r0,r4              ;130
0000ba  6800              LDR      r0,[r0,#0]            ;130
0000bc  2403              MOVS     r4,#3                 ;130
0000be  04e4              LSLS     r4,r4,#19             ;130
0000c0  43a0              BICS     r0,r0,r4              ;130
0000c2  7c0c              LDRB     r4,[r1,#0x10]         ;130
0000c4  04e4              LSLS     r4,r4,#19             ;130
0000c6  2503              MOVS     r5,#3                 ;130
0000c8  04ed              LSLS     r5,r5,#19             ;130
0000ca  402c              ANDS     r4,r4,r5              ;130
0000cc  4320              ORRS     r0,r0,r4              ;130
0000ce  0214              LSLS     r4,r2,#8              ;130
0000d0  4d16              LDR      r5,|L24.300|
0000d2  1964              ADDS     r4,r4,r5              ;130
0000d4  6020              STR      r0,[r4,#0]            ;130
0000d6  0210              LSLS     r0,r2,#8              ;131
0000d8  462c              MOV      r4,r5                 ;131
0000da  1900              ADDS     r0,r0,r4              ;131
0000dc  6800              LDR      r0,[r0,#0]            ;131
0000de  240c              MOVS     r4,#0xc               ;131
0000e0  43a0              BICS     r0,r0,r4              ;131
0000e2  7c4c              LDRB     r4,[r1,#0x11]         ;131
0000e4  00a4              LSLS     r4,r4,#2              ;131
0000e6  250c              MOVS     r5,#0xc               ;131
0000e8  402c              ANDS     r4,r4,r5              ;131
0000ea  4320              ORRS     r0,r0,r4              ;131
0000ec  0214              LSLS     r4,r2,#8              ;131
0000ee  4d0f              LDR      r5,|L24.300|
0000f0  1964              ADDS     r4,r4,r5              ;131
0000f2  6020              STR      r0,[r4,#0]            ;131
0000f4  0210              LSLS     r0,r2,#8              ;132
0000f6  462c              MOV      r4,r5                 ;132
0000f8  1900              ADDS     r0,r0,r4              ;132
0000fa  6800              LDR      r0,[r0,#0]            ;132
0000fc  240f              MOVS     r4,#0xf               ;132
0000fe  0324              LSLS     r4,r4,#12             ;132
000100  43a0              BICS     r0,r0,r4              ;132
000102  7c8c              LDRB     r4,[r1,#0x12]         ;132
000104  0324              LSLS     r4,r4,#12             ;132
000106  250f              MOVS     r5,#0xf               ;132
000108  032d              LSLS     r5,r5,#12             ;132
00010a  402c              ANDS     r4,r4,r5              ;132
00010c  4320              ORRS     r0,r0,r4              ;132
00010e  0214              LSLS     r4,r2,#8              ;132
000110  4d06              LDR      r5,|L24.300|
000112  1964              ADDS     r4,r4,r5              ;132
000114  6020              STR      r0,[r4,#0]            ;132
000116  0214              LSLS     r4,r2,#8              ;134
000118  1964              ADDS     r4,r4,r5              ;134
00011a  6948              LDR      r0,[r1,#0x14]         ;134
00011c  60e0              STR      r0,[r4,#0xc]          ;134
00011e  2000              MOVS     r0,#0                 ;136
000120  e774              B        |L24.12|
;;;138    
                          ENDP

000122  0000              DCW      0x0000
                  |L24.292|
                          DCD      0xffff9082
                  |L24.296|
                          DCD      0x50008f00
                  |L24.300|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_PollInt||, CODE, READONLY, ALIGN=2

                  DrvPDMA_PollInt PROC
;;;629    /*---------------------------------------------------------------------------------------------------------*/
;;;630    int32_t	DrvPDMA_PollInt(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_INT_FLAG eIntFlag)
000000  4602              MOV      r2,r0
;;;631    {
;;;632    	switch(eIntFlag)
000002  4b25              LDR      r3,|L25.152|
000004  1ac8              SUBS     r0,r1,r3
000006  4299              CMP      r1,r3
000008  d026              BEQ      |L25.88|
00000a  dc07              BGT      |L25.28|
00000c  2901              CMP      r1,#1
00000e  d00e              BEQ      |L25.46|
000010  2902              CMP      r1,#2
000012  d013              BEQ      |L25.60|
000014  1fc8              SUBS     r0,r1,#7
000016  38f9              SUBS     r0,r0,#0xf9
000018  d13c              BNE      |L25.148|
00001a  e016              B        |L25.74|
                  |L25.28|
00001c  38ff              SUBS     r0,r0,#0xff
00001e  38ff              SUBS     r0,r0,#0xff
000020  3802              SUBS     r0,#2
000022  d023              BEQ      |L25.108|
000024  2301              MOVS     r3,#1
000026  029b              LSLS     r3,r3,#10
000028  1ac0              SUBS     r0,r0,r3
00002a  d133              BNE      |L25.148|
00002c  e028              B        |L25.128|
                  |L25.46|
;;;633    	{
;;;634    		case eDRVPDMA_TABORT_FLAG:
;;;635    			return ((PDMA->channel[eChannel].ISR.TABORT_IF) ? TRUE : FALSE);
00002e  0210              LSLS     r0,r2,#8
000030  4b1a              LDR      r3,|L25.156|
000032  18c0              ADDS     r0,r0,r3
000034  6a40              LDR      r0,[r0,#0x24]
000036  07c0              LSLS     r0,r0,#31
000038  0fc0              LSRS     r0,r0,#31
                  |L25.58|
;;;636    
;;;637    		case eDRVPDMA_BLKD_FLAG:
;;;638    			return ((PDMA->channel[eChannel].ISR.BLKD_IF) ? TRUE : FALSE);
;;;639    
;;;640    		case eDRVPDMA_WRA_EMPTY_FLAG:
;;;641    			return ((PDMA->channel[eChannel].ISR.WAR_IF & 0x01) ? TRUE : FALSE);
;;;642    
;;;643    		case eDRVPDMA_WRA_THREE_FOURTHS_FLAG:
;;;644    			return ((PDMA->channel[eChannel].ISR.WAR_IF & 0x02) ? TRUE : FALSE);
;;;645    
;;;646    		case eDRVPDMA_WRA_HALF_FLAG:
;;;647    			return ((PDMA->channel[eChannel].ISR.WAR_IF & 0x04) ? TRUE : FALSE);
;;;648    
;;;649    		case eDRVPDMA_WRA_QUARTER_FLAG:
;;;650    			return ((PDMA->channel[eChannel].ISR.WAR_IF & 0x08) ? TRUE : FALSE);
;;;651    
;;;652    		default:
;;;653    			return FALSE;
;;;654    	}
;;;655    }
00003a  4770              BX       lr
                  |L25.60|
00003c  0210              LSLS     r0,r2,#8              ;638
00003e  4b17              LDR      r3,|L25.156|
000040  18c0              ADDS     r0,r0,r3              ;638
000042  6a40              LDR      r0,[r0,#0x24]         ;638
000044  0780              LSLS     r0,r0,#30             ;638
000046  0fc0              LSRS     r0,r0,#31             ;638
000048  e7f7              B        |L25.58|
                  |L25.74|
00004a  0210              LSLS     r0,r2,#8              ;641
00004c  4b13              LDR      r3,|L25.156|
00004e  18c0              ADDS     r0,r0,r3              ;641
000050  6a40              LDR      r0,[r0,#0x24]         ;641
000052  05c0              LSLS     r0,r0,#23             ;641
000054  0fc0              LSRS     r0,r0,#31             ;641
000056  e7f0              B        |L25.58|
                  |L25.88|
000058  0210              LSLS     r0,r2,#8              ;644
00005a  4b10              LDR      r3,|L25.156|
00005c  18c0              ADDS     r0,r0,r3              ;644
00005e  6a40              LDR      r0,[r0,#0x24]         ;644
000060  0500              LSLS     r0,r0,#20             ;644
000062  0f00              LSRS     r0,r0,#28             ;644
000064  2302              MOVS     r3,#2                 ;644
000066  4018              ANDS     r0,r0,r3              ;644
000068  0840              LSRS     r0,r0,#1              ;644
00006a  e7e6              B        |L25.58|
                  |L25.108|
00006c  0210              LSLS     r0,r2,#8              ;647
00006e  4b0b              LDR      r3,|L25.156|
000070  18c0              ADDS     r0,r0,r3              ;647
000072  6a40              LDR      r0,[r0,#0x24]         ;647
000074  0500              LSLS     r0,r0,#20             ;647
000076  0f00              LSRS     r0,r0,#28             ;647
000078  2304              MOVS     r3,#4                 ;647
00007a  4018              ANDS     r0,r0,r3              ;647
00007c  0880              LSRS     r0,r0,#2              ;647
00007e  e7dc              B        |L25.58|
                  |L25.128|
000080  0210              LSLS     r0,r2,#8              ;650
000082  4b06              LDR      r3,|L25.156|
000084  18c0              ADDS     r0,r0,r3              ;650
000086  6a40              LDR      r0,[r0,#0x24]         ;650
000088  0500              LSLS     r0,r0,#20             ;650
00008a  0f00              LSRS     r0,r0,#28             ;650
00008c  2308              MOVS     r3,#8                 ;650
00008e  4018              ANDS     r0,r0,r3              ;650
000090  08c0              LSRS     r0,r0,#3              ;650
000092  e7d2              B        |L25.58|
                  |L25.148|
000094  2000              MOVS     r0,#0                 ;653
000096  e7d0              B        |L25.58|
;;;656    /*---------------------------------------------------------------------------------------------------------*/
                          ENDP

                  |L25.152|
                          DCD      0x00000200
                  |L25.156|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_SetAPBTransferWidth||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetAPBTransferWidth PROC
;;;254    /*---------------------------------------------------------------------------------------------------------*/
;;;255    int32_t	DrvPDMA_SetAPBTransferWidth(E_DRVPDMA_CHANNEL_INDEX eChannel,E_DRVPDMA_TRANSFER_WIDTH eTransferWidth)
000000  b510              PUSH     {r4,lr}
;;;256    {
000002  4602              MOV      r2,r0
;;;257       							
;;;258        if (eChannel > eDRVPDMA_CHANNEL_3)					   	/* Check Channel is valid */
000004  2a03              CMP      r2,#3
000006  dd01              BLE      |L26.12|
;;;259            return E_DRVPDMA_FALSE_INPUT; 
000008  4809              LDR      r0,|L26.48|
                  |L26.10|
;;;260                
;;;261        PDMA->channel[eChannel].CSR.APB_TWS = eTransferWidth;	/* Set PDMA Transfer width */
;;;262            
;;;263        return E_SUCCESS;     													
;;;264    }
00000a  bd10              POP      {r4,pc}
                  |L26.12|
00000c  0210              LSLS     r0,r2,#8              ;261
00000e  4b09              LDR      r3,|L26.52|
000010  18c0              ADDS     r0,r0,r3              ;261
000012  6800              LDR      r0,[r0,#0]            ;261
000014  2303              MOVS     r3,#3                 ;261
000016  04db              LSLS     r3,r3,#19             ;261
000018  4398              BICS     r0,r0,r3              ;261
00001a  04cb              LSLS     r3,r1,#19             ;261
00001c  2403              MOVS     r4,#3                 ;261
00001e  04e4              LSLS     r4,r4,#19             ;261
000020  4023              ANDS     r3,r3,r4              ;261
000022  4318              ORRS     r0,r0,r3              ;261
000024  0213              LSLS     r3,r2,#8              ;261
000026  4c03              LDR      r4,|L26.52|
000028  191b              ADDS     r3,r3,r4              ;261
00002a  6018              STR      r0,[r3,#0]            ;261
00002c  2000              MOVS     r0,#0                 ;263
00002e  e7ec              B        |L26.10|
;;;265    
                          ENDP

                  |L26.48|
                          DCD      0xffff9081
                  |L26.52|
                          DCD      0x50008000

                          AREA ||i.DrvPDMA_SetCHForAPBDevice||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetCHForAPBDevice PROC
;;;304    /*---------------------------------------------------------------------------------------------------------*/
;;;305    int32_t	DrvPDMA_SetCHForAPBDevice(
000000  b530              PUSH     {r4,r5,lr}
;;;306        E_DRVPDMA_CHANNEL_INDEX eChannel, 
;;;307        E_DRVPDMA_APB_DEVICE 	eDevice,
;;;308        E_DRVPDMA_APB_RW 		eRWAPB    
;;;309    )
;;;310    {
000002  4604              MOV      r4,r0
;;;311        if (eChannel > eDRVPDMA_CHANNEL_3) 						 				/* Check Channel is valid */
000004  2c03              CMP      r4,#3
000006  dd01              BLE      |L27.12|
;;;312            return E_DRVPDMA_FALSE_INPUT; 
000008  4875              LDR      r0,|L27.480|
                  |L27.10|
;;;313    
;;;314    	/* check if eChannel is occupied by other APB then disconnect it. */	 														   
;;;315    	if (PDMA_GCR->PDSSR.SPI0_TXSEL == eChannel)
;;;316    		PDMA_GCR->PDSSR.SPI0_TXSEL = 0xf;
;;;317    	if (PDMA_GCR->PDSSR.UART0_TXSEL == eChannel)
;;;318    		PDMA_GCR->PDSSR.UART0_TXSEL = 0xf;
;;;319    	if (PDMA_GCR->PDSSR.DPWM_TXSEL == eChannel)
;;;320    		PDMA_GCR->PDSSR.DPWM_TXSEL = 0xf;
;;;321    	if (PDMA_GCR->PDSSR.I2S_TXSEL == eChannel)
;;;322    		PDMA_GCR->PDSSR.I2S_TXSEL = 0xf;
;;;323    	if (PDMA_GCR->PDSSR.SPI0_RXSEL == eChannel)
;;;324    		PDMA_GCR->PDSSR.SPI0_RXSEL = 0xf;
;;;325    	if (PDMA_GCR->PDSSR.UART0_RXSEL == eChannel)
;;;326    		PDMA_GCR->PDSSR.UART0_RXSEL = 0xf;
;;;327    	if (PDMA_GCR->PDSSR.ADC_RXSEL == eChannel)
;;;328    		PDMA_GCR->PDSSR.ADC_RXSEL = 0xf;
;;;329    	if (PDMA_GCR->PDSSR.I2S_RXSEL == eChannel)
;;;330    		PDMA_GCR->PDSSR.I2S_RXSEL = 0xf;
;;;331       
;;;332    	switch(eDevice)
;;;333    	{
;;;334    		case eDRVPDMA_SPI0:												    /* Set SPI0 PDMA Channel */
;;;335    			if(eRWAPB)	  
;;;336    				PDMA_GCR->PDSSR.SPI0_TXSEL	=	eChannel;
;;;337    			else
;;;338    				PDMA_GCR->PDSSR.SPI0_RXSEL	=	eChannel;
;;;339    	   		break;
;;;340    		case eDRVPDMA_UART0:											   	/* Set UART0 PDMA Channel */
;;;341    			if(eRWAPB)	
;;;342    				PDMA_GCR->PDSSR.UART0_TXSEL	=	eChannel;
;;;343    			else
;;;344    				PDMA_GCR->PDSSR.UART0_RXSEL	=	eChannel;
;;;345    	   		break;
;;;346    		case eDRVPDMA_DPWM:												    /* Set DPWM PDMA Channel */
;;;347    			if(eRWAPB)	
;;;348    				PDMA_GCR->PDSSR.DPWM_TXSEL	=	eChannel;
;;;349    			else
;;;350    				return 	E_DRVPDMA_FALSE_INPUT;
;;;351    	   		break;
;;;352    		case eDRVPDMA_I2S:													/* Set I2S PDMA Channel */
;;;353    			if(eRWAPB)	
;;;354    				PDMA_GCR->PDSSR.I2S_TXSEL	=	eChannel;
;;;355    			else
;;;356    				PDMA_GCR->PDSSR.I2S_RXSEL	=	eChannel;
;;;357    	   		break;
;;;358    		case eDRVPDMA_ADC:													/* Set ADC PDMA Channel */
;;;359    			if(eRWAPB)	
;;;360    				return 	E_DRVPDMA_FALSE_INPUT;
;;;361    			else
;;;362    				PDMA_GCR->PDSSR.ADC_RXSEL	=	eChannel;
;;;363    	   		break;
;;;364    		default:
;;;365    			return 	E_DRVPDMA_FALSE_INPUT;
;;;366    	}
;;;367     
;;;368        return E_SUCCESS;  
;;;369    }
00000a  bd30              POP      {r4,r5,pc}
                  |L27.12|
00000c  4875              LDR      r0,|L27.484|
00000e  6840              LDR      r0,[r0,#4]            ;315
000010  0600              LSLS     r0,r0,#24             ;315
000012  0f00              LSRS     r0,r0,#28             ;315
000014  42a0              CMP      r0,r4                 ;315
000016  d106              BNE      |L27.38|
000018  4872              LDR      r0,|L27.484|
00001a  6840              LDR      r0,[r0,#4]            ;316
00001c  23f0              MOVS     r3,#0xf0              ;316
00001e  4398              BICS     r0,r0,r3              ;316
000020  30f0              ADDS     r0,r0,#0xf0           ;316
000022  4b70              LDR      r3,|L27.484|
000024  6058              STR      r0,[r3,#4]            ;316
                  |L27.38|
000026  486f              LDR      r0,|L27.484|
000028  6840              LDR      r0,[r0,#4]            ;317
00002a  0200              LSLS     r0,r0,#8              ;317
00002c  0f00              LSRS     r0,r0,#28             ;317
00002e  42a0              CMP      r0,r4                 ;317
000030  d107              BNE      |L27.66|
000032  486c              LDR      r0,|L27.484|
000034  6840              LDR      r0,[r0,#4]            ;318
000036  230f              MOVS     r3,#0xf               ;318
000038  051b              LSLS     r3,r3,#20             ;318
00003a  4398              BICS     r0,r0,r3              ;318
00003c  18c0              ADDS     r0,r0,r3              ;318
00003e  4b69              LDR      r3,|L27.484|
000040  6058              STR      r0,[r3,#4]            ;318
                  |L27.66|
000042  4868              LDR      r0,|L27.484|
000044  6840              LDR      r0,[r0,#4]            ;319
000046  0400              LSLS     r0,r0,#16             ;319
000048  0f00              LSRS     r0,r0,#28             ;319
00004a  42a0              CMP      r0,r4                 ;319
00004c  d107              BNE      |L27.94|
00004e  4865              LDR      r0,|L27.484|
000050  6840              LDR      r0,[r0,#4]            ;320
000052  230f              MOVS     r3,#0xf               ;320
000054  031b              LSLS     r3,r3,#12             ;320
000056  4398              BICS     r0,r0,r3              ;320
000058  18c0              ADDS     r0,r0,r3              ;320
00005a  4b62              LDR      r3,|L27.484|
00005c  6058              STR      r0,[r3,#4]            ;320
                  |L27.94|
00005e  4861              LDR      r0,|L27.484|
000060  6840              LDR      r0,[r0,#4]            ;321
000062  0f00              LSRS     r0,r0,#28             ;321
000064  42a0              CMP      r0,r4                 ;321
000066  d108              BNE      |L27.122|
000068  485e              LDR      r0,|L27.484|
00006a  6840              LDR      r0,[r0,#4]            ;322
00006c  0100              LSLS     r0,r0,#4              ;322
00006e  0900              LSRS     r0,r0,#4              ;322
000070  230f              MOVS     r3,#0xf               ;322
000072  071b              LSLS     r3,r3,#28             ;322
000074  18c0              ADDS     r0,r0,r3              ;322
000076  4b5b              LDR      r3,|L27.484|
000078  6058              STR      r0,[r3,#4]            ;322
                  |L27.122|
00007a  485a              LDR      r0,|L27.484|
00007c  6840              LDR      r0,[r0,#4]            ;323
00007e  0700              LSLS     r0,r0,#28             ;323
000080  0f00              LSRS     r0,r0,#28             ;323
000082  42a0              CMP      r0,r4                 ;323
000084  d106              BNE      |L27.148|
000086  4857              LDR      r0,|L27.484|
000088  6840              LDR      r0,[r0,#4]            ;324
00008a  0900              LSRS     r0,r0,#4              ;324
00008c  0100              LSLS     r0,r0,#4              ;324
00008e  300f              ADDS     r0,r0,#0xf            ;324
000090  4b54              LDR      r3,|L27.484|
000092  6058              STR      r0,[r3,#4]            ;324
                  |L27.148|
000094  4853              LDR      r0,|L27.484|
000096  6840              LDR      r0,[r0,#4]            ;325
000098  0300              LSLS     r0,r0,#12             ;325
00009a  0f00              LSRS     r0,r0,#28             ;325
00009c  42a0              CMP      r0,r4                 ;325
00009e  d107              BNE      |L27.176|
0000a0  4850              LDR      r0,|L27.484|
0000a2  6840              LDR      r0,[r0,#4]            ;326
0000a4  230f              MOVS     r3,#0xf               ;326
0000a6  041b              LSLS     r3,r3,#16             ;326
0000a8  4398              BICS     r0,r0,r3              ;326
0000aa  18c0              ADDS     r0,r0,r3              ;326
0000ac  4b4d              LDR      r3,|L27.484|
0000ae  6058              STR      r0,[r3,#4]            ;326
                  |L27.176|
0000b0  484c              LDR      r0,|L27.484|
0000b2  6840              LDR      r0,[r0,#4]            ;327
0000b4  0500              LSLS     r0,r0,#20             ;327
0000b6  0f00              LSRS     r0,r0,#28             ;327
0000b8  42a0              CMP      r0,r4                 ;327
0000ba  d107              BNE      |L27.204|
0000bc  4849              LDR      r0,|L27.484|
0000be  6840              LDR      r0,[r0,#4]            ;328
0000c0  230f              MOVS     r3,#0xf               ;328
0000c2  021b              LSLS     r3,r3,#8              ;328
0000c4  4398              BICS     r0,r0,r3              ;328
0000c6  18c0              ADDS     r0,r0,r3              ;328
0000c8  4b46              LDR      r3,|L27.484|
0000ca  6058              STR      r0,[r3,#4]            ;328
                  |L27.204|
0000cc  4845              LDR      r0,|L27.484|
0000ce  6840              LDR      r0,[r0,#4]            ;329
0000d0  0100              LSLS     r0,r0,#4              ;329
0000d2  0f00              LSRS     r0,r0,#28             ;329
0000d4  42a0              CMP      r0,r4                 ;329
0000d6  d107              BNE      |L27.232|
0000d8  4842              LDR      r0,|L27.484|
0000da  6840              LDR      r0,[r0,#4]            ;330
0000dc  230f              MOVS     r3,#0xf               ;330
0000de  061b              LSLS     r3,r3,#24             ;330
0000e0  4398              BICS     r0,r0,r3              ;330
0000e2  18c0              ADDS     r0,r0,r3              ;330
0000e4  4b3f              LDR      r3,|L27.484|
0000e6  6058              STR      r0,[r3,#4]            ;330
                  |L27.232|
0000e8  000b              MOVS     r3,r1                 ;332
0000ea  f7fffffe          BL       __ARM_common_switch8
0000ee  0504              DCB      0x05,0x04
0000f0  371b4963          DCB      0x37,0x1b,0x49,0x63
0000f4  7400              DCB      0x74,0x00
0000f6  2a00              CMP      r2,#0                 ;335
0000f8  d00a              BEQ      |L27.272|
0000fa  483a              LDR      r0,|L27.484|
0000fc  6840              LDR      r0,[r0,#4]            ;336
0000fe  23f0              MOVS     r3,#0xf0              ;336
000100  4398              BICS     r0,r0,r3              ;336
000102  0123              LSLS     r3,r4,#4              ;336
000104  25f0              MOVS     r5,#0xf0              ;336
000106  402b              ANDS     r3,r3,r5              ;336
000108  4318              ORRS     r0,r0,r3              ;336
00010a  4b36              LDR      r3,|L27.484|
00010c  6058              STR      r0,[r3,#4]            ;336
00010e  e008              B        |L27.290|
                  |L27.272|
000110  4834              LDR      r0,|L27.484|
000112  6840              LDR      r0,[r0,#4]            ;338
000114  0900              LSRS     r0,r0,#4              ;338
000116  0100              LSLS     r0,r0,#4              ;338
000118  0723              LSLS     r3,r4,#28             ;338
00011a  0f1b              LSRS     r3,r3,#28             ;338
00011c  4318              ORRS     r0,r0,r3              ;338
00011e  4b31              LDR      r3,|L27.484|
000120  6058              STR      r0,[r3,#4]            ;338
                  |L27.290|
000122  e05a              B        |L27.474|
000124  2a00              CMP      r2,#0                 ;341
000126  d00c              BEQ      |L27.322|
000128  482e              LDR      r0,|L27.484|
00012a  6840              LDR      r0,[r0,#4]            ;342
00012c  230f              MOVS     r3,#0xf               ;342
00012e  051b              LSLS     r3,r3,#20             ;342
000130  4398              BICS     r0,r0,r3              ;342
000132  0523              LSLS     r3,r4,#20             ;342
000134  250f              MOVS     r5,#0xf               ;342
000136  052d              LSLS     r5,r5,#20             ;342
000138  402b              ANDS     r3,r3,r5              ;342
00013a  4318              ORRS     r0,r0,r3              ;342
00013c  4b29              LDR      r3,|L27.484|
00013e  6058              STR      r0,[r3,#4]            ;342
000140  e00b              B        |L27.346|
                  |L27.322|
000142  4828              LDR      r0,|L27.484|
000144  6840              LDR      r0,[r0,#4]            ;344
000146  230f              MOVS     r3,#0xf               ;344
000148  041b              LSLS     r3,r3,#16             ;344
00014a  4398              BICS     r0,r0,r3              ;344
00014c  0423              LSLS     r3,r4,#16             ;344
00014e  250f              MOVS     r5,#0xf               ;344
000150  042d              LSLS     r5,r5,#16             ;344
000152  402b              ANDS     r3,r3,r5              ;344
000154  4318              ORRS     r0,r0,r3              ;344
000156  4b23              LDR      r3,|L27.484|
000158  6058              STR      r0,[r3,#4]            ;344
                  |L27.346|
00015a  e03e              B        |L27.474|
00015c  2a00              CMP      r2,#0                 ;347
00015e  d00c              BEQ      |L27.378|
000160  4820              LDR      r0,|L27.484|
000162  6840              LDR      r0,[r0,#4]            ;348
000164  230f              MOVS     r3,#0xf               ;348
000166  031b              LSLS     r3,r3,#12             ;348
000168  4398              BICS     r0,r0,r3              ;348
00016a  0323              LSLS     r3,r4,#12             ;348
00016c  250f              MOVS     r5,#0xf               ;348
00016e  032d              LSLS     r5,r5,#12             ;348
000170  402b              ANDS     r3,r3,r5              ;348
000172  4318              ORRS     r0,r0,r3              ;348
000174  4b1b              LDR      r3,|L27.484|
000176  6058              STR      r0,[r3,#4]            ;348
000178  e001              B        |L27.382|
                  |L27.378|
00017a  4819              LDR      r0,|L27.480|
00017c  e745              B        |L27.10|
                  |L27.382|
00017e  e02c              B        |L27.474|
000180  2a00              CMP      r2,#0                 ;353
000182  d00a              BEQ      |L27.410|
000184  4817              LDR      r0,|L27.484|
000186  6840              LDR      r0,[r0,#4]            ;354
000188  0100              LSLS     r0,r0,#4              ;354
00018a  0900              LSRS     r0,r0,#4              ;354
00018c  0723              LSLS     r3,r4,#28             ;354
00018e  0f1b              LSRS     r3,r3,#28             ;354
000190  071b              LSLS     r3,r3,#28             ;354
000192  4318              ORRS     r0,r0,r3              ;354
000194  4b13              LDR      r3,|L27.484|
000196  6058              STR      r0,[r3,#4]            ;354
000198  e00b              B        |L27.434|
                  |L27.410|
00019a  4812              LDR      r0,|L27.484|
00019c  6840              LDR      r0,[r0,#4]            ;356
00019e  230f              MOVS     r3,#0xf               ;356
0001a0  061b              LSLS     r3,r3,#24             ;356
0001a2  4398              BICS     r0,r0,r3              ;356
0001a4  0623              LSLS     r3,r4,#24             ;356
0001a6  250f              MOVS     r5,#0xf               ;356
0001a8  062d              LSLS     r5,r5,#24             ;356
0001aa  402b              ANDS     r3,r3,r5              ;356
0001ac  4318              ORRS     r0,r0,r3              ;356
0001ae  4b0d              LDR      r3,|L27.484|
0001b0  6058              STR      r0,[r3,#4]            ;356
                  |L27.434|
0001b2  e012              B        |L27.474|
0001b4  2a00              CMP      r2,#0                 ;359
0001b6  d001              BEQ      |L27.444|
0001b8  4809              LDR      r0,|L27.480|
0001ba  e726              B        |L27.10|
                  |L27.444|
0001bc  4809              LDR      r0,|L27.484|
0001be  6840              LDR      r0,[r0,#4]            ;362
0001c0  230f              MOVS     r3,#0xf               ;362
0001c2  021b              LSLS     r3,r3,#8              ;362
0001c4  4398              BICS     r0,r0,r3              ;362
0001c6  0223              LSLS     r3,r4,#8              ;362
0001c8  250f              MOVS     r5,#0xf               ;362
0001ca  022d              LSLS     r5,r5,#8              ;362
0001cc  402b              ANDS     r3,r3,r5              ;362
0001ce  4318              ORRS     r0,r0,r3              ;362
0001d0  4b04              LDR      r3,|L27.484|
0001d2  6058              STR      r0,[r3,#4]            ;362
0001d4  e001              B        |L27.474|
0001d6  4802              LDR      r0,|L27.480|
0001d8  e717              B        |L27.10|
                  |L27.474|
0001da  bf00              NOP                            ;339
0001dc  2000              MOVS     r0,#0                 ;368
0001de  e714              B        |L27.10|
;;;370    
                          ENDP

                  |L27.480|
                          DCD      0xffff9081
                  |L27.484|
                          DCD      0x50008f00

                          AREA ||i.DrvPDMA_SetTransferSetting||, CODE, READONLY, ALIGN=2

                  DrvPDMA_SetTransferSetting PROC
;;;824    /*---------------------------------------------------------------------------------------------------------*/
;;;825    int32_t DrvPDMA_SetTransferSetting(
000000  b570              PUSH     {r4-r6,lr}
;;;826    	E_DRVPDMA_CHANNEL_INDEX eChannel, 
;;;827    	S_DRVPDMA_CH_ADDR_SETTING* psSrcAddr, 
;;;828    	S_DRVPDMA_CH_ADDR_SETTING* psDestAddr, 
;;;829    	uint32_t u32TransferLength
;;;830    )
;;;831    {
000002  4604              MOV      r4,r0
;;;832        if (eChannel > eDRVPDMA_CHANNEL_3)					/* Check PDMA Channel is Valid */
000004  2c03              CMP      r4,#3
000006  dd01              BLE      |L28.12|
;;;833            return E_DRVPDMA_FALSE_INPUT;
000008  4817              LDR      r0,|L28.104|
                  |L28.10|
;;;834    
;;;835        PDMA->channel[eChannel].SAR = psSrcAddr->u32Addr;   /* Set Source Address */
;;;836        PDMA->channel[eChannel].DAR = psDestAddr->u32Addr;  /* Set Destination Address */
;;;837        PDMA->channel[eChannel].CSR.SAD_SEL = psSrcAddr->eAddrDirection;
;;;838        PDMA->channel[eChannel].CSR.DAD_SEL = psDestAddr->eAddrDirection;
;;;839    	PDMA->channel[eChannel].BCR = u32TransferLength;    /* Set Byte Count Register */
;;;840    
;;;841    	return E_SUCCESS;
;;;842    }
00000a  bd70              POP      {r4-r6,pc}
                  |L28.12|
00000c  0225              LSLS     r5,r4,#8              ;835
00000e  4e17              LDR      r6,|L28.108|
000010  19ad              ADDS     r5,r5,r6              ;835
000012  6808              LDR      r0,[r1,#0]            ;835
000014  6068              STR      r0,[r5,#4]            ;835
000016  0225              LSLS     r5,r4,#8              ;836
000018  19ad              ADDS     r5,r5,r6              ;836
00001a  6810              LDR      r0,[r2,#0]            ;836
00001c  60a8              STR      r0,[r5,#8]            ;836
00001e  0220              LSLS     r0,r4,#8              ;837
000020  4635              MOV      r5,r6                 ;837
000022  1940              ADDS     r0,r0,r5              ;837
000024  6800              LDR      r0,[r0,#0]            ;837
000026  2530              MOVS     r5,#0x30              ;837
000028  43a8              BICS     r0,r0,r5              ;837
00002a  790d              LDRB     r5,[r1,#4]            ;837
00002c  012d              LSLS     r5,r5,#4              ;837
00002e  2630              MOVS     r6,#0x30              ;837
000030  4035              ANDS     r5,r5,r6              ;837
000032  4328              ORRS     r0,r0,r5              ;837
000034  0225              LSLS     r5,r4,#8              ;837
000036  4e0d              LDR      r6,|L28.108|
000038  19ad              ADDS     r5,r5,r6              ;837
00003a  6028              STR      r0,[r5,#0]            ;837
00003c  0220              LSLS     r0,r4,#8              ;838
00003e  4635              MOV      r5,r6                 ;838
000040  1940              ADDS     r0,r0,r5              ;838
000042  6800              LDR      r0,[r0,#0]            ;838
000044  25c0              MOVS     r5,#0xc0              ;838
000046  43a8              BICS     r0,r0,r5              ;838
000048  7915              LDRB     r5,[r2,#4]            ;838
00004a  01ad              LSLS     r5,r5,#6              ;838
00004c  26c0              MOVS     r6,#0xc0              ;838
00004e  4035              ANDS     r5,r5,r6              ;838
000050  4328              ORRS     r0,r0,r5              ;838
000052  0225              LSLS     r5,r4,#8              ;838
000054  4e05              LDR      r6,|L28.108|
000056  19ad              ADDS     r5,r5,r6              ;838
000058  6028              STR      r0,[r5,#0]            ;838
00005a  0220              LSLS     r0,r4,#8              ;839
00005c  4635              MOV      r5,r6                 ;839
00005e  1940              ADDS     r0,r0,r5              ;839
000060  60c3              STR      r3,[r0,#0xc]          ;839
000062  2000              MOVS     r0,#0                 ;841
000064  e7d1              B        |L28.10|
;;;843    
                          ENDP

000066  0000              DCW      0x0000
                  |L28.104|
                          DCD      0xffff9081
                  |L28.108|
                          DCD      0x50008000

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;541     */
;;;542    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;543    {
;;;544      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L29.16|
00000a  6011              STR      r1,[r2,#0]
;;;545    }
00000c  4770              BX       lr
;;;546    
                          ENDP

00000e  0000              DCW      0x0000
                  |L29.16|
                          DCD      0xe000e100

                          AREA ||i.PDMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  PDMA_IRQHandler PROC
;;;685    /*---------------------------------------------------------------------------------------------------------*/
;;;686    void PDMA_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;687    {
;;;688        volatile uint32_t u32WraparoundStatus;
;;;689        volatile int32_t  i32Channel= 0 ;
000002  2400              MOVS     r4,#0
;;;690      
;;;691    	for(i32Channel=0;i32Channel<MAX_CHANNEL_NUM;i32Channel++)  
000004  bf00              NOP      
000006  e080              B        |L30.266|
                  |L30.8|
;;;692    	{ 										 			
;;;693    		if(PDMA_GCR->GCRISR & (1<<i32Channel))										 /* Check INT Channel */
000008  4842              LDR      r0,|L30.276|
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  2101              MOVS     r1,#1
00000e  40a1              LSLS     r1,r1,r4
000010  4208              TST      r0,r1
000012  d079              BEQ      |L30.264|
;;;694    		{			 							
;;;695    			if(PDMA->channel[i32Channel].ISR.TABORT_IF)								/* Check Target Abort INT and clear */
000014  0220              LSLS     r0,r4,#8
000016  4940              LDR      r1,|L30.280|
000018  1840              ADDS     r0,r0,r1
00001a  6a40              LDR      r0,[r0,#0x24]
00001c  07c0              LSLS     r0,r0,#31
00001e  0fc0              LSRS     r0,r0,#31
000020  d016              BEQ      |L30.80|
;;;696    			{
;;;697    			   PDMA->channel[i32Channel].ISR.TABORT_IF = 1;
000022  0221              LSLS     r1,r4,#8
000024  4a3c              LDR      r2,|L30.280|
000026  1889              ADDS     r1,r1,r2
000028  4608              MOV      r0,r1
00002a  3024              ADDS     r0,r0,#0x24
00002c  6a49              LDR      r1,[r1,#0x24]
00002e  0849              LSRS     r1,r1,#1
000030  0049              LSLS     r1,r1,#1
000032  1c49              ADDS     r1,r1,#1
000034  6001              STR      r1,[r0,#0]
;;;698    
;;;699    			   if (g_pfnPDMACallback[i32Channel][0] != 0)    		
000036  200c              MOVS     r0,#0xc
000038  4360              MULS     r0,r4,r0
00003a  4938              LDR      r1,|L30.284|
00003c  5808              LDR      r0,[r1,r0]
00003e  2800              CMP      r0,#0
000040  d062              BEQ      |L30.264|
;;;700    		    		(*g_pfnPDMACallback[i32Channel][0])(PDMATABORT_IF);				/* Target Abort callback funtion */
000042  200c              MOVS     r0,#0xc
000044  4360              MULS     r0,r4,r0
000046  460a              MOV      r2,r1
000048  5811              LDR      r1,[r2,r0]
00004a  2001              MOVS     r0,#1
00004c  4788              BLX      r1
00004e  e05b              B        |L30.264|
                  |L30.80|
;;;701    				
;;;702    			}			 							
;;;703    			else if(PDMA->channel[i32Channel].ISR.BLKD_IF)							/* Transfer Done INT and clear */
000050  0220              LSLS     r0,r4,#8
000052  4931              LDR      r1,|L30.280|
000054  1840              ADDS     r0,r0,r1
000056  6a40              LDR      r0,[r0,#0x24]
000058  0780              LSLS     r0,r0,#30
00005a  0fc0              LSRS     r0,r0,#31
00005c  d018              BEQ      |L30.144|
;;;704    			{
;;;705    				PDMA->channel[i32Channel].ISR.BLKD_IF = 1;
00005e  0221              LSLS     r1,r4,#8
000060  4a2d              LDR      r2,|L30.280|
000062  1889              ADDS     r1,r1,r2
000064  4608              MOV      r0,r1
000066  3024              ADDS     r0,r0,#0x24
000068  6a49              LDR      r1,[r1,#0x24]
00006a  2202              MOVS     r2,#2
00006c  4391              BICS     r1,r1,r2
00006e  1c89              ADDS     r1,r1,#2
000070  6001              STR      r1,[r0,#0]
;;;706    
;;;707    				if (g_pfnPDMACallback[i32Channel][1] != 0)    			
000072  200c              MOVS     r0,#0xc
000074  4360              MULS     r0,r4,r0
000076  4929              LDR      r1,|L30.284|
000078  1840              ADDS     r0,r0,r1
00007a  6840              LDR      r0,[r0,#4]
00007c  2800              CMP      r0,#0
00007e  d043              BEQ      |L30.264|
;;;708    			    	(*g_pfnPDMACallback[i32Channel][1])(PDMABLKD_IF);				/* Transfer Done INT callback funtion */
000080  200c              MOVS     r0,#0xc
000082  4360              MULS     r0,r4,r0
000084  460a              MOV      r2,r1
000086  1880              ADDS     r0,r0,r2
000088  6841              LDR      r1,[r0,#4]
00008a  2002              MOVS     r0,#2
00008c  4788              BLX      r1
00008e  e03b              B        |L30.264|
                  |L30.144|
;;;709    			}
;;;710    			else 										 							/* Wrap Around INT */
;;;711    			{
;;;712    				if(PDMA->channel[i32Channel].ISR.WAR_IF)
000090  0220              LSLS     r0,r4,#8
000092  4921              LDR      r1,|L30.280|
000094  1840              ADDS     r0,r0,r1
000096  6a40              LDR      r0,[r0,#0x24]
000098  0500              LSLS     r0,r0,#20
00009a  0f00              LSRS     r0,r0,#28
00009c  d034              BEQ      |L30.264|
;;;713    		    	{																	/* Check Wrap Around Method and clear */
;;;714    					u32WraparoundStatus = PDMA->channel[i32Channel].ISR.WAR_IF;
00009e  0220              LSLS     r0,r4,#8
0000a0  1840              ADDS     r0,r0,r1
0000a2  6a40              LDR      r0,[r0,#0x24]
0000a4  0500              LSLS     r0,r0,#20
0000a6  0f05              LSRS     r5,r0,#28
;;;715    					if(PDMA->channel[i32Channel].ISR.WAR_IF & 0x04)
0000a8  0220              LSLS     r0,r4,#8
0000aa  1840              ADDS     r0,r0,r1
0000ac  6a40              LDR      r0,[r0,#0x24]
0000ae  0500              LSLS     r0,r0,#20
0000b0  0f00              LSRS     r0,r0,#28
0000b2  2104              MOVS     r1,#4
0000b4  4208              TST      r0,r1
0000b6  d00d              BEQ      |L30.212|
;;;716    						  PDMA->channel[i32Channel].ISR.WAR_IF = 0x04;
0000b8  0221              LSLS     r1,r4,#8
0000ba  4a17              LDR      r2,|L30.280|
0000bc  1889              ADDS     r1,r1,r2
0000be  4608              MOV      r0,r1
0000c0  3024              ADDS     r0,r0,#0x24
0000c2  6a49              LDR      r1,[r1,#0x24]
0000c4  220f              MOVS     r2,#0xf
0000c6  0212              LSLS     r2,r2,#8
0000c8  4391              BICS     r1,r1,r2
0000ca  2201              MOVS     r2,#1
0000cc  0292              LSLS     r2,r2,#10
0000ce  1889              ADDS     r1,r1,r2
0000d0  6001              STR      r1,[r0,#0]
0000d2  e00b              B        |L30.236|
                  |L30.212|
;;;717    					else
;;;718    						  PDMA->channel[i32Channel].ISR.WAR_IF = 0x01;
0000d4  0221              LSLS     r1,r4,#8
0000d6  4a10              LDR      r2,|L30.280|
0000d8  1889              ADDS     r1,r1,r2
0000da  4608              MOV      r0,r1
0000dc  3024              ADDS     r0,r0,#0x24
0000de  6a49              LDR      r1,[r1,#0x24]
0000e0  220f              MOVS     r2,#0xf
0000e2  0212              LSLS     r2,r2,#8
0000e4  4391              BICS     r1,r1,r2
0000e6  31ff              ADDS     r1,r1,#0xff
0000e8  3101              ADDS     r1,#1
0000ea  6001              STR      r1,[r0,#0]
                  |L30.236|
;;;719    
;;;720    					if (g_pfnPDMACallback[i32Channel][2] != 0)		    						
0000ec  200c              MOVS     r0,#0xc
0000ee  4360              MULS     r0,r4,r0
0000f0  490a              LDR      r1,|L30.284|
0000f2  1840              ADDS     r0,r0,r1
0000f4  6880              LDR      r0,[r0,#8]
0000f6  2800              CMP      r0,#0
0000f8  d006              BEQ      |L30.264|
;;;721    			  			(*g_pfnPDMACallback[i32Channel][2])(u32WraparoundStatus); 	/* Wrap Around INT callback funtion */
0000fa  200c              MOVS     r0,#0xc
0000fc  4360              MULS     r0,r4,r0
0000fe  460a              MOV      r2,r1
000100  1880              ADDS     r0,r0,r2
000102  6881              LDR      r1,[r0,#8]
000104  4628              MOV      r0,r5
000106  4788              BLX      r1
                  |L30.264|
000108  1c64              ADDS     r4,r4,#1              ;691
                  |L30.266|
00010a  2c04              CMP      r4,#4                 ;691
00010c  da00              BGE      |L30.272|
00010e  e77b              B        |L30.8|
                  |L30.272|
;;;722    	 		
;;;723    					
;;;724    		    	}		
;;;725    			}
;;;726    
;;;727    			
;;;728    		}
;;;729    	
;;;730    	}
;;;731    
;;;732    }
000110  bd70              POP      {r4-r6,pc}
;;;733    
                          ENDP

000112  0000              DCW      0x0000
                  |L30.276|
                          DCD      0x50008f00
                  |L30.280|
                          DCD      0x50008000
                  |L30.284|
                          DCD      g_pfnPDMACallback

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_pfnPDMACallback
                          %        48

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L188.24|
                  |L188.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L188.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L188.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\ISD91XX_SDK\\NuvotonPlatform_Keil\\Src\\Driver\\DrvPDMA.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_DrvPDMA_c_d6b5d850____REV16|
#line 112 "..\\..\\ISD91XX_SDK\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___9_DrvPDMA_c_d6b5d850____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_DrvPDMA_c_d6b5d850____REVSH|
#line 130
|__asm___9_DrvPDMA_c_d6b5d850____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
