; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\retarget.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\output\retarget.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport -I..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Nuvoton --omf_browse=..\output\retarget.crf ..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\retarget.c]
                          THUMB

                          AREA ||i.GetChar||, CODE, READONLY, ALIGN=2

                  GetChar PROC
;;;85     /*---------------------------------------------------------------------------------------------------------*/
;;;86     char GetChar()
000000  bf00              NOP      
                  |L1.2|
;;;87     {
;;;88     #ifdef VERILOG_VALIDATION
;;;89     	return 0;
;;;90     #else
;;;91       	while (UART0->FSR.RX_EMPTY == 1);
000002  4804              LDR      r0,|L1.20|
000004  6980              LDR      r0,[r0,#0x18]
000006  0440              LSLS     r0,r0,#17
000008  0fc0              LSRS     r0,r0,#31
00000a  2801              CMP      r0,#1
00000c  d0f9              BEQ      |L1.2|
;;;92     	return (UART0->DATA);
00000e  4801              LDR      r0,|L1.20|
000010  7800              LDRB     r0,[r0,#0]
;;;93     #endif
;;;94     
;;;95     }
000012  4770              BX       lr
;;;96     
                          ENDP

                  |L1.20|
                          DCD      0x40050000

                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=2

                  SendChar PROC
;;;65     /*---------------------------------------------------------------------------------------------------------*/
;;;66     void SendChar(int ch)
000000  bf00              NOP      
                  |L2.2|
;;;67     {
;;;68     #ifdef VERILOG_VALIDATION
;;;69     	GPIO0->DATA[PRINT_CHAR].BYTE[PRINT_BYTE] = ch; // Write whole char to 2nd byte
;;;70     	GPIO0->DATA[PRINT_STROBE].BYTE[PRINT_BYTE] = PRINT_STROBE; // Write strobe
;;;71     	GPIO0->DATA[PRINT_STROBE].BYTE[PRINT_BYTE] = 0; // Clear Strobe
;;;72     #else
;;;73     	while(UART0->FSR.TX_FULL == 1);
000002  490a              LDR      r1,|L2.44|
000004  6989              LDR      r1,[r1,#0x18]
000006  0209              LSLS     r1,r1,#8
000008  0fc9              LSRS     r1,r1,#31
00000a  2901              CMP      r1,#1
00000c  d0f9              BEQ      |L2.2|
;;;74     	UART0->DATA = ch;
00000e  4a07              LDR      r2,|L2.44|
000010  7010              STRB     r0,[r2,#0]
;;;75         if(ch == '\n'){
000012  280a              CMP      r0,#0xa
000014  d109              BNE      |L2.42|
;;;76             while(UART0->FSR.TX_FULL == 1);
000016  bf00              NOP      
                  |L2.24|
000018  4904              LDR      r1,|L2.44|
00001a  6989              LDR      r1,[r1,#0x18]
00001c  0209              LSLS     r1,r1,#8
00001e  0fc9              LSRS     r1,r1,#31
000020  2901              CMP      r1,#1
000022  d0f9              BEQ      |L2.24|
;;;77             UART0->DATA = '\r';
000024  210d              MOVS     r1,#0xd
000026  4a01              LDR      r2,|L2.44|
000028  7011              STRB     r1,[r2,#0]
                  |L2.42|
;;;78         }
;;;79     #endif
;;;80     
;;;81     }
00002a  4770              BX       lr
;;;82     
                          ENDP

                  |L2.44|
                          DCD      0x40050000

                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;101    
;;;102    void _ttywrch(int ch)
000000  b500              PUSH     {lr}
;;;103    {
000002  4603              MOV      r3,r0
;;;104      SendChar(ch);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       SendChar
;;;105      return;
;;;106    }
00000a  bd00              POP      {pc}
;;;107    
                          ENDP


                          AREA ||i.ferror||, CODE, READONLY, ALIGN=2

                  ferror PROC
;;;118    
;;;119    int ferror(FILE *f) {
000000  4601              MOV      r1,r0
;;;120      return EOF;
000002  4801              LDR      r0,|L4.8|
;;;121    }
000004  4770              BX       lr
;;;122    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0xffffffff

                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;113    									
;;;114    int fgetc(FILE *f) {
000000  b500              PUSH     {lr}
000002  4601              MOV      r1,r0
;;;115      return (GetChar());
000004  f7fffffe          BL       GetChar
;;;116    }
000008  bd00              POP      {pc}
;;;117    
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;107    
;;;108    int fputc(int ch, FILE *f)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;110      SendChar(ch);
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       SendChar
;;;111      return 0;
00000c  2000              MOVS     r0,#0
;;;112    }
00000e  bd10              POP      {r4,pc}
;;;113    									
                          ENDP


                          AREA ||i.gotachar||, CODE, READONLY, ALIGN=2

                  gotachar PROC
;;;130    int
;;;131    gotachar(void)
000000  4803              LDR      r0,|L7.16|
;;;132    {
;;;133    	return (UART0->FSR.RX_EMPTY==0);
000002  6980              LDR      r0,[r0,#0x18]
000004  0440              LSLS     r0,r0,#17
000006  0fc0              LSRS     r0,r0,#31
000008  2101              MOVS     r1,#1
00000a  4048              EORS     r0,r0,r1
;;;134    
;;;135    }
00000c  4770              BX       lr
;;;136    #else
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40050000

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\ISD91XX_SDK\\NuvotonPlatform_Keil\\Src\\Driver\\retarget.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_retarget_c_SendChar____REV16|
#line 112 "..\\..\\ISD91XX_SDK\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___10_retarget_c_SendChar____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_retarget_c_SendChar____REVSH|
#line 130
|__asm___10_retarget_c_SendChar____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
