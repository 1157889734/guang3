; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\output\drvsys.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\output\drvsys.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\inc -I..\..\ISD91XX_SDK\CMSIS\CM0\CoreSupport -I..\..\ISD91XX_SDK\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include\Driver -I..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Include -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\Nuvoton --omf_browse=..\output\drvsys.crf ..\..\ISD91XX_SDK\NuvotonPlatform_Keil\Src\Driver\DrvSYS.c]
                          THUMB

                          AREA ||i.DrvSYS_ClearRstSrc||, CODE, READONLY, ALIGN=2

                  DrvSYS_ClearRstSrc PROC
;;;150    /*---------------------------------------------------------------------------------------------------------*/
;;;151    uint32_t DrvSYS_ClearRstSrc(uint32_t u32Src)
000000  4601              MOV      r1,r0
;;;152    {
;;;153    	*((__IO uint32_t *) &SYS->RSTSRC) = u32Src;
000002  4802              LDR      r0,|L1.12|
000004  6041              STR      r1,[r0,#4]
;;;154    	return 0;
000006  2000              MOVS     r0,#0
;;;155    }
000008  4770              BX       lr
;;;156    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x50000000

                          AREA ||i.DrvSYS_Delay||, CODE, READONLY, ALIGN=2

                  DrvSYS_Delay PROC
;;;111    /*---------------------------------------------------------------------------------------------------------*/
;;;112    void DrvSYS_Delay(uint32_t us)
000000  2130              MOVS     r1,#0x30
;;;113    {
;;;114        SysTick->LOAD = us * 48;
000002  4341              MULS     r1,r0,r1
000004  4a06              LDR      r2,|L2.32|
000006  6151              STR      r1,[r2,#0x14]
;;;115        SysTick->VAL  = (0x00);
000008  2100              MOVS     r1,#0
00000a  6191              STR      r1,[r2,#0x18]
;;;116        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000c  2105              MOVS     r1,#5
00000e  6111              STR      r1,[r2,#0x10]
;;;117    
;;;118        /* Waiting for down-count to zero */
;;;119        while((SysTick->CTRL & (1 << 16)) == 0);
000010  bf00              NOP      
                  |L2.18|
000012  4903              LDR      r1,|L2.32|
000014  6909              LDR      r1,[r1,#0x10]
000016  2201              MOVS     r2,#1
000018  0412              LSLS     r2,r2,#16
00001a  4211              TST      r1,r2
00001c  d0f9              BEQ      |L2.18|
;;;120    }
00001e  4770              BX       lr
;;;121    
                          ENDP

                  |L2.32|
                          DCD      0xe000e000

                          AREA ||i.DrvSYS_EnableDeepPowerDown||, CODE, READONLY, ALIGN=2

                  DrvSYS_EnableDeepPowerDown PROC
;;;479    /*---------------------------------------------------------------------------------------------------------*/
;;;480    void DrvSYS_EnableDeepPowerDown(int32_t i32Enable)
000000  4906              LDR      r1,|L3.28|
;;;481    {
;;;482    	SYSCLK->PWRCON.DEEP_PD = i32Enable;
000002  6809              LDR      r1,[r1,#0]
000004  2201              MOVS     r2,#1
000006  02d2              LSLS     r2,r2,#11
000008  4391              BICS     r1,r1,r2
00000a  02c2              LSLS     r2,r0,#11
00000c  2301              MOVS     r3,#1
00000e  02db              LSLS     r3,r3,#11
000010  401a              ANDS     r2,r2,r3
000012  4311              ORRS     r1,r1,r2
000014  4a01              LDR      r2,|L3.28|
000016  6011              STR      r1,[r2,#0]
;;;483    }
000018  4770              BX       lr
;;;484    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetEXTClock||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetEXTClock PROC
;;;500    /*---------------------------------------------------------------------------------------------------------*/
;;;501    uint32_t DrvSYS_GetEXTClock(void)
000000  4801              LDR      r0,|L4.8|
;;;502    {	
;;;503    	return s_u32ExtClockKHz;
000002  6800              LDR      r0,[r0,#0]  ; s_u32ExtClockKHz
;;;504    }
000004  4770              BX       lr
;;;505    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      s_u32ExtClockKHz

                          AREA ||i.DrvSYS_GetHCLK||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetHCLK PROC
;;;521    /*---------------------------------------------------------------------------------------------------------*/
;;;522    uint32_t DrvSYS_GetHCLK(void)
000000  b570              PUSH     {r4-r6,lr}
;;;523    {
;;;524    	
;;;525    	uint32_t u32Freqout = 0, u32AHBDivider;
000002  2500              MOVS     r5,#0
;;;526    
;;;527    	if(SYSCLK->CLKSEL0.HCLK_S == 1)     	/* external 32KHz crystal clock */ 
000004  4810              LDR      r0,|L5.72|
000006  6900              LDR      r0,[r0,#0x10]
000008  0740              LSLS     r0,r0,#29
00000a  0f40              LSRS     r0,r0,#29
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L5.20|
;;;528    	{
;;;529    		u32Freqout = 32;
000010  2520              MOVS     r5,#0x20
000012  e00f              B        |L5.52|
                  |L5.20|
;;;530    	}
;;;531    	else if(SYSCLK->CLKSEL0.HCLK_S == 2)	/* internal 10KHz oscillator clock */
000014  480c              LDR      r0,|L5.72|
000016  6900              LDR      r0,[r0,#0x10]
000018  0740              LSLS     r0,r0,#29
00001a  0f40              LSRS     r0,r0,#29
00001c  2802              CMP      r0,#2
00001e  d101              BNE      |L5.36|
;;;532    	{
;;;533    	 	u32Freqout = 10;
000020  250a              MOVS     r5,#0xa
000022  e007              B        |L5.52|
                  |L5.36|
;;;534    	}
;;;535    	else									/* internal 49MHz oscillator clock */
;;;536    	{
;;;537    	 	if(SYSCLK->CLKSEL0.OSCFSel)
000024  4808              LDR      r0,|L5.72|
000026  6900              LDR      r0,[r0,#0x10]
000028  0640              LSLS     r0,r0,#25
00002a  0fc0              LSRS     r0,r0,#31
00002c  d001              BEQ      |L5.50|
;;;538    		u32Freqout = 32768;
00002e  4d07              LDR      r5,|L5.76|
000030  e000              B        |L5.52|
                  |L5.50|
;;;539    		else
;;;540    		u32Freqout = 49152;
000032  4d07              LDR      r5,|L5.80|
                  |L5.52|
;;;541    	
;;;542    	}
;;;543    	u32AHBDivider = SYSCLK->CLKDIV.HCLK_N + 1 ;
000034  4804              LDR      r0,|L5.72|
000036  6980              LDR      r0,[r0,#0x18]
000038  0700              LSLS     r0,r0,#28
00003a  0f00              LSRS     r0,r0,#28
00003c  1c44              ADDS     r4,r0,#1
;;;544    	
;;;545    	return (u32Freqout/u32AHBDivider);	
00003e  4621              MOV      r1,r4
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       __aeabi_uidivmod
;;;546    }
000046  bd70              POP      {r4-r6,pc}
;;;547    
                          ENDP

                  |L5.72|
                          DCD      0x50000200
                  |L5.76|
                          DCD      0x00008000
                  |L5.80|
                          DCD      0x0000c000

                          AREA ||i.DrvSYS_GetRstSrc||, CODE, READONLY, ALIGN=1

                  DrvSYS_GetRstSrc PROC
;;;133    /*---------------------------------------------------------------------------------------------------------*/
;;;134    uint32_t DrvSYS_GetRstSrc(void)
000000  2005              MOVS     r0,#5
;;;135    {
;;;136    	return *((__IO uint32_t *) &SYS->RSTSRC);
000002  0700              LSLS     r0,r0,#28
000004  6840              LDR      r0,[r0,#4]
;;;137    }
000006  4770              BX       lr
;;;138    
                          ENDP


                          AREA ||i.DrvSYS_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetVersion PROC
;;;29     /*---------------------------------------------------------------------------------------------------------*/
;;;30     uint32_t DrvSYS_GetVersion(void)
000000  4800              LDR      r0,|L7.4|
;;;31     {
;;;32     	return DRVSYS_VERSION_NUM;
;;;33     }
000002  4770              BX       lr
;;;34     
                          ENDP

                  |L7.4|
                          DCD      0x00010001

                          AREA ||i.DrvSYS_LockKeyAddr||, CODE, READONLY, ALIGN=2

                  DrvSYS_LockKeyAddr PROC
;;;88     /*---------------------------------------------------------------------------------------------------------*/
;;;89     int32_t DrvSYS_LockKeyAddr(void)
000000  2000              MOVS     r0,#0
;;;90     {
;;;91     	uint32_t lockbit;
;;;92     	
;;;93     	SYS->REGLOCK = 0x00;
000002  4a06              LDR      r2,|L8.28|
000004  6010              STR      r0,[r2,#0]
;;;94     
;;;95     	lockbit = SYS->REGLOCK & 0x01;
000006  4610              MOV      r0,r2
000008  6800              LDR      r0,[r0,#0]
00000a  07c1              LSLS     r1,r0,#31
00000c  0fc9              LSRS     r1,r1,#31
;;;96     	return (lockbit)? E_DRVSYS_ERR_LOCK_FAIL:0;
00000e  2900              CMP      r1,#0
000010  d001              BEQ      |L8.22|
000012  4803              LDR      r0,|L8.32|
                  |L8.20|
;;;97     }
000014  4770              BX       lr
                  |L8.22|
000016  2000              MOVS     r0,#0                 ;96
000018  e7fc              B        |L8.20|
;;;98     
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x50000100
                  |L8.32|
                          DCD      0xffff9602

                          AREA ||i.DrvSYS_ReadProductID||, CODE, READONLY, ALIGN=1

                  DrvSYS_ReadProductID PROC
;;;47     /*---------------------------------------------------------------------------------------------------------*/
;;;48     uint32_t DrvSYS_ReadProductID(void)
000000  2005              MOVS     r0,#5
;;;49     {	
;;;50     	return SYS->PDID;
000002  0700              LSLS     r0,r0,#28
000004  6800              LDR      r0,[r0,#0]
;;;51     }
000006  4770              BX       lr
;;;52     
                          ENDP


                          AREA ||i.DrvSYS_ResetCPU||, CODE, READONLY, ALIGN=2

                  DrvSYS_ResetCPU PROC
;;;202    /*---------------------------------------------------------------------------------------------------------*/
;;;203    void DrvSYS_ResetCPU(void)
000000  2005              MOVS     r0,#5
;;;204    {
;;;205    	SYS->IPRSTC1.CPU_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6880              LDR      r0,[r0,#8]
000006  2102              MOVS     r1,#2
000008  4388              BICS     r0,r0,r1
00000a  1c80              ADDS     r0,r0,#2
00000c  4901              LDR      r1,|L10.20|
00000e  6088              STR      r0,[r1,#8]
;;;206    }
000010  4770              BX       lr
;;;207    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x50000000

                          AREA ||i.DrvSYS_ResetChip||, CODE, READONLY, ALIGN=2

                  DrvSYS_ResetChip PROC
;;;219    /*---------------------------------------------------------------------------------------------------------*/
;;;220    void DrvSYS_ResetChip(void)
000000  2005              MOVS     r0,#5
;;;221    {
;;;222    	SYS->IPRSTC1.CHIP_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6880              LDR      r0,[r0,#8]
000006  0840              LSRS     r0,r0,#1
000008  0040              LSLS     r0,r0,#1
00000a  1c40              ADDS     r0,r0,#1
00000c  4901              LDR      r1,|L11.20|
00000e  6088              STR      r0,[r1,#8]
;;;223    }
000010  4770              BX       lr
;;;224    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x50000000

                          AREA ||i.DrvSYS_ResetIP||, CODE, READONLY, ALIGN=2

                  DrvSYS_ResetIP PROC
;;;173    /*---------------------------------------------------------------------------------------------------------*/
;;;174    void DrvSYS_ResetIP(E_SYS_IP_RST eIpRst)
000000  2820              CMP      r0,#0x20
;;;175    {	
;;;176    	uint32_t u32Reg;
;;;177    
;;;178    	if (eIpRst == E_SYS_PDMA_RST)
000002  d10e              BNE      |L12.34|
;;;179    	{
;;;180    		SYS->IPRSTC1.PDMA_RST = 1;
000004  2205              MOVS     r2,#5
000006  0712              LSLS     r2,r2,#28
000008  6892              LDR      r2,[r2,#8]
00000a  2304              MOVS     r3,#4
00000c  439a              BICS     r2,r2,r3
00000e  1d12              ADDS     r2,r2,#4
000010  4b0b              LDR      r3,|L12.64|
000012  609a              STR      r2,[r3,#8]
;;;181    		SYS->IPRSTC1.PDMA_RST = 0;
000014  461a              MOV      r2,r3
000016  6892              LDR      r2,[r2,#8]
000018  2304              MOVS     r3,#4
00001a  439a              BICS     r2,r2,r3
00001c  4b08              LDR      r3,|L12.64|
00001e  609a              STR      r2,[r3,#8]
000020  e00c              B        |L12.60|
                  |L12.34|
;;;182    	}
;;;183    	else
;;;184    	{
;;;185    		u32Reg = *((__IO uint32_t *) &SYS->IPRSTC2);
000022  4a07              LDR      r2,|L12.64|
000024  68d1              LDR      r1,[r2,#0xc]
;;;186    		*((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg | (1<<eIpRst);
000026  2201              MOVS     r2,#1
000028  4082              LSLS     r2,r2,r0
00002a  430a              ORRS     r2,r2,r1
00002c  4b04              LDR      r3,|L12.64|
00002e  60da              STR      r2,[r3,#0xc]
;;;187    		*((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg & ~(1<<eIpRst);
000030  2201              MOVS     r2,#1
000032  4082              LSLS     r2,r2,r0
000034  460b              MOV      r3,r1
000036  4393              BICS     r3,r3,r2
000038  4a01              LDR      r2,|L12.64|
00003a  60d3              STR      r3,[r2,#0xc]
                  |L12.60|
;;;188    	}
;;;189    }
00003c  4770              BX       lr
;;;190    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      0x50000000

                          AREA ||i.DrvSYS_SetClockDivider||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetClockDivider PROC
;;;403    /*---------------------------------------------------------------------------------------------------------*/
;;;404    int32_t DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , int32_t i32value)
000000  b510              PUSH     {r4,lr}
;;;405    {
000002  4602              MOV      r2,r0
;;;406    	if (eIpDiv == E_SYS_ADC_DIV)
000004  2a00              CMP      r2,#0
000006  d10c              BNE      |L13.34|
;;;407    	{
;;;408    	 	SYSCLK->CLKDIV.ADC_N = i32value; //0x5000_0218[23:16]
000008  4815              LDR      r0,|L13.96|
00000a  6980              LDR      r0,[r0,#0x18]
00000c  23ff              MOVS     r3,#0xff
00000e  041b              LSLS     r3,r3,#16
000010  4398              BICS     r0,r0,r3
000012  040b              LSLS     r3,r1,#16
000014  24ff              MOVS     r4,#0xff
000016  0424              LSLS     r4,r4,#16
000018  4023              ANDS     r3,r3,r4
00001a  4318              ORRS     r0,r0,r3
00001c  4b10              LDR      r3,|L13.96|
00001e  6198              STR      r0,[r3,#0x18]
000020  e01c              B        |L13.92|
                  |L13.34|
;;;409    	}
;;;410    //	else if(eIpDiv == E_SYS_CAN_DIV)
;;;411    //	{
;;;412    //	 	SYSCLK->CLKDIV.CAN_N = i32value;
;;;413    //	}
;;;414    	else if(eIpDiv == E_SYS_UART_DIV) 
000022  2a01              CMP      r2,#1
000024  d10c              BNE      |L13.64|
;;;415    	{
;;;416    	 	SYSCLK->CLKDIV.UART_N = i32value;//0x5000_0218[11:8]
000026  480e              LDR      r0,|L13.96|
000028  6980              LDR      r0,[r0,#0x18]
00002a  230f              MOVS     r3,#0xf
00002c  021b              LSLS     r3,r3,#8
00002e  4398              BICS     r0,r0,r3
000030  020b              LSLS     r3,r1,#8
000032  240f              MOVS     r4,#0xf
000034  0224              LSLS     r4,r4,#8
000036  4023              ANDS     r3,r3,r4
000038  4318              ORRS     r0,r0,r3
00003a  4b09              LDR      r3,|L13.96|
00003c  6198              STR      r0,[r3,#0x18]
00003e  e00d              B        |L13.92|
                  |L13.64|
;;;417    	}
;;;418    //	else if(eIpDiv == E_SYS_USB_DIV)
;;;419    //	{
;;;420    //	 	SYSCLK->CLKDIV.USB_N = i32value;
;;;421    //	}
;;;422    	else if(eIpDiv == E_SYS_HCLK_DIV)
000040  2a02              CMP      r2,#2
000042  d109              BNE      |L13.88|
;;;423    	{
;;;424    	 	SYSCLK->CLKDIV.HCLK_N = i32value; //0x5000_0218[3:0]
000044  4806              LDR      r0,|L13.96|
000046  6980              LDR      r0,[r0,#0x18]
000048  0900              LSRS     r0,r0,#4
00004a  0100              LSLS     r0,r0,#4
00004c  070b              LSLS     r3,r1,#28
00004e  0f1b              LSRS     r3,r3,#28
000050  4318              ORRS     r0,r0,r3
000052  4b03              LDR      r3,|L13.96|
000054  6198              STR      r0,[r3,#0x18]
000056  e001              B        |L13.92|
                  |L13.88|
;;;425    	}
;;;426    	else
;;;427    		return E_DRVSYS_ERR_IPDIV;
000058  4802              LDR      r0,|L13.100|
                  |L13.90|
;;;428    
;;;429    	return E_SUCCESS;
;;;430    	
;;;431    }
00005a  bd10              POP      {r4,pc}
                  |L13.92|
00005c  2000              MOVS     r0,#0                 ;429
00005e  e7fc              B        |L13.90|
;;;432    
                          ENDP

                  |L13.96|
                          DCD      0x50000200
                  |L13.100|
                          DCD      0xffff9605

                          AREA ||i.DrvSYS_SetHCLKSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetHCLKSource PROC
;;;300    /*---------------------------------------------------------------------------------------------------------*/
;;;301    int32_t DrvSYS_SetHCLKSource(uint8_t u8ClkSrcSel)
000000  4601              MOV      r1,r0
;;;302    {
;;;303    	if (u8ClkSrcSel > 2)
000002  2902              CMP      r1,#2
000004  dd01              BLE      |L14.10|
;;;304    	{
;;;305    		return E_DRVSYS_ERR_ARGUMENT;
000006  4806              LDR      r0,|L14.32|
                  |L14.8|
;;;306    	}
;;;307    	else
;;;308    	{
;;;309    		SYSCLK->CLKSEL0.HCLK_S = u8ClkSrcSel; //0x5000_0210[2:0]
;;;310    	}
;;;311    	return 0;
;;;312    }
000008  4770              BX       lr
                  |L14.10|
00000a  4806              LDR      r0,|L14.36|
00000c  6900              LDR      r0,[r0,#0x10]         ;309
00000e  08c0              LSRS     r0,r0,#3              ;309
000010  00c0              LSLS     r0,r0,#3              ;309
000012  074a              LSLS     r2,r1,#29             ;309
000014  0f52              LSRS     r2,r2,#29             ;309
000016  4310              ORRS     r0,r0,r2              ;309
000018  4a02              LDR      r2,|L14.36|
00001a  6110              STR      r0,[r2,#0x10]         ;309
00001c  2000              MOVS     r0,#0                 ;311
00001e  e7f3              B        |L14.8|
;;;313    
                          ENDP

                  |L14.32|
                          DCD      0xffff9603
                  |L14.36|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetIPClock||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetIPClock PROC
;;;258    /*---------------------------------------------------------------------------------------------------------*/
;;;259    void DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable)
000000  b530              PUSH     {r4,r5,lr}
;;;260    {	
;;;261    	uint32_t u32Reg;
;;;262    
;;;263    	if (eIpClk == E_SYS_PDMA_CLK)
000002  2821              CMP      r0,#0x21
000004  d10a              BNE      |L15.28|
;;;264    	{
;;;265    		SYSCLK->AHBCLK.PDMA_EN = i32Enable; //0x5000_0204[1]
000006  4b14              LDR      r3,|L15.88|
000008  685b              LDR      r3,[r3,#4]
00000a  2402              MOVS     r4,#2
00000c  43a3              BICS     r3,r3,r4
00000e  004c              LSLS     r4,r1,#1
000010  2502              MOVS     r5,#2
000012  402c              ANDS     r4,r4,r5
000014  4323              ORRS     r3,r3,r4
000016  4c10              LDR      r4,|L15.88|
000018  6063              STR      r3,[r4,#4]
00001a  e01c              B        |L15.86|
                  |L15.28|
;;;266    	}
;;;267    	else if (eIpClk == E_SYS_ISP_CLK)
00001c  2822              CMP      r0,#0x22
00001e  d10a              BNE      |L15.54|
;;;268    	{
;;;269    		SYSCLK->AHBCLK.ISP_EN = i32Enable; //0x5000_0204[2]
000020  4b0d              LDR      r3,|L15.88|
000022  685b              LDR      r3,[r3,#4]
000024  2404              MOVS     r4,#4
000026  43a3              BICS     r3,r3,r4
000028  008c              LSLS     r4,r1,#2
00002a  2504              MOVS     r5,#4
00002c  402c              ANDS     r4,r4,r5
00002e  4323              ORRS     r3,r3,r4
000030  4c09              LDR      r4,|L15.88|
000032  6063              STR      r3,[r4,#4]
000034  e00f              B        |L15.86|
                  |L15.54|
;;;270    	}
;;;271    	else
;;;272    	{
;;;273    		u32Reg = *((__IO uint32_t *) &SYSCLK->APBCLK);
000036  4b08              LDR      r3,|L15.88|
000038  689a              LDR      r2,[r3,#8]
;;;274    		
;;;275    		if (i32Enable)
00003a  2900              CMP      r1,#0
00003c  d005              BEQ      |L15.74|
;;;276    		{
;;;277    			*((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg | (1<<eIpClk); //0x5000_0208
00003e  2301              MOVS     r3,#1
000040  4083              LSLS     r3,r3,r0
000042  4313              ORRS     r3,r3,r2
000044  4c04              LDR      r4,|L15.88|
000046  60a3              STR      r3,[r4,#8]
000048  e005              B        |L15.86|
                  |L15.74|
;;;278    		}
;;;279    		else
;;;280    		{
;;;281    			*((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg & ~(1<<eIpClk);
00004a  2301              MOVS     r3,#1
00004c  4083              LSLS     r3,r3,r0
00004e  4614              MOV      r4,r2
000050  439c              BICS     r4,r4,r3
000052  4b01              LDR      r3,|L15.88|
000054  609c              STR      r4,[r3,#8]
                  |L15.86|
;;;282    		}
;;;283    	}
;;;284    }
000056  bd30              POP      {r4,r5,pc}
;;;285    
                          ENDP

                  |L15.88|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetIPClockSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetIPClockSource PROC
;;;359    /*---------------------------------------------------------------------------------------------------------*/
;;;360    int32_t DrvSYS_SetIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel)
000000  b510              PUSH     {r4,lr}
;;;361    {
000002  4602              MOV      r2,r0
;;;362    	
;;;363    	switch(eIpClkSrc)
000004  0013              MOVS     r3,r2
000006  f7fffffe          BL       __ARM_common_switch8
00000a  0805              DCB      0x08,0x05
00000c  0f4b1c29          DCB      0x0f,0x4b,0x1c,0x29
000010  4b41364b          DCB      0x4b,0x41,0x36,0x4b
;;;364    	{
;;;365    		case E_SYS_I2S_CLKSRC:
;;;366    			SYSCLK->CLKSEL2.I2S_S = u8ClkSrcSel;  //0x5000_021C[1:0]
000014  4825              LDR      r0,|L16.172|
000016  69c0              LDR      r0,[r0,#0x1c]
000018  0880              LSRS     r0,r0,#2
00001a  0080              LSLS     r0,r0,#2
00001c  078b              LSLS     r3,r1,#30
00001e  0f9b              LSRS     r3,r3,#30
000020  4318              ORRS     r0,r0,r3
000022  4b22              LDR      r3,|L16.172|
000024  61d8              STR      r0,[r3,#0x1c]
;;;367    			break;
000026  e03d              B        |L16.164|
;;;368    		case E_SYS_PWM01_CLKSRC:
;;;369    			SYSCLK->CLKSEL1.PWM01_S = u8ClkSrcSel;//0x5000_0214[29:28]
000028  4820              LDR      r0,|L16.172|
00002a  6940              LDR      r0,[r0,#0x14]
00002c  2303              MOVS     r3,#3
00002e  071b              LSLS     r3,r3,#28
000030  4398              BICS     r0,r0,r3
000032  070b              LSLS     r3,r1,#28
000034  2403              MOVS     r4,#3
000036  0724              LSLS     r4,r4,#28
000038  4023              ANDS     r3,r3,r4
00003a  4318              ORRS     r0,r0,r3
00003c  4b1b              LDR      r3,|L16.172|
00003e  6158              STR      r0,[r3,#0x14]
;;;370    			break;
000040  e030              B        |L16.164|
;;;371    		case E_SYS_TMR1_CLKSRC:
;;;372    		    SYSCLK->CLKSEL1.TMR1_S = u8ClkSrcSel;//0x5000_0214[14:12]
000042  481a              LDR      r0,|L16.172|
000044  6940              LDR      r0,[r0,#0x14]
000046  2307              MOVS     r3,#7
000048  031b              LSLS     r3,r3,#12
00004a  4398              BICS     r0,r0,r3
00004c  030b              LSLS     r3,r1,#12
00004e  2407              MOVS     r4,#7
000050  0324              LSLS     r4,r4,#12
000052  4023              ANDS     r3,r3,r4
000054  4318              ORRS     r0,r0,r3
000056  4b15              LDR      r3,|L16.172|
000058  6158              STR      r0,[r3,#0x14]
;;;373    			break;				
00005a  e023              B        |L16.164|
;;;374    		case E_SYS_TMR0_CLKSRC:
;;;375    		    SYSCLK->CLKSEL1.TMR0_S = u8ClkSrcSel;//0x5000_0214[10:8]
00005c  4813              LDR      r0,|L16.172|
00005e  6940              LDR      r0,[r0,#0x14]
000060  2307              MOVS     r3,#7
000062  021b              LSLS     r3,r3,#8
000064  4398              BICS     r0,r0,r3
000066  020b              LSLS     r3,r1,#8
000068  2407              MOVS     r4,#7
00006a  0224              LSLS     r4,r4,#8
00006c  4023              ANDS     r3,r3,r4
00006e  4318              ORRS     r0,r0,r3
000070  4b0e              LDR      r3,|L16.172|
000072  6158              STR      r0,[r3,#0x14]
;;;376    			break;				
000074  e016              B        |L16.164|
;;;377    		case E_SYS_DPWM_CLKSRC:
;;;378    		    SYSCLK->CLKSEL1.DPWM_S = u8ClkSrcSel;//0x5000_0214[4]
000076  480d              LDR      r0,|L16.172|
000078  6940              LDR      r0,[r0,#0x14]
00007a  2310              MOVS     r3,#0x10
00007c  4398              BICS     r0,r0,r3
00007e  010b              LSLS     r3,r1,#4
000080  2410              MOVS     r4,#0x10
000082  4023              ANDS     r3,r3,r4
000084  4318              ORRS     r0,r0,r3
000086  4b09              LDR      r3,|L16.172|
000088  6158              STR      r0,[r3,#0x14]
;;;379    			break;				
00008a  e00b              B        |L16.164|
;;;380    		case E_SYS_WDG_CLKSRC:
;;;381    		    SYSCLK->CLKSEL1.WDG_S = u8ClkSrcSel;//0x5000_0214[1:0]
00008c  4807              LDR      r0,|L16.172|
00008e  6940              LDR      r0,[r0,#0x14]
000090  0880              LSRS     r0,r0,#2
000092  0080              LSLS     r0,r0,#2
000094  078b              LSLS     r3,r1,#30
000096  0f9b              LSRS     r3,r3,#30
000098  4318              ORRS     r0,r0,r3
00009a  4b04              LDR      r3,|L16.172|
00009c  6158              STR      r0,[r3,#0x14]
;;;382    			break;				
00009e  e001              B        |L16.164|
;;;383    		default:
;;;384    			return E_DRVSYS_ERR_IPSRC;
0000a0  4803              LDR      r0,|L16.176|
                  |L16.162|
;;;385    	}
;;;386    	
;;;387    	return E_SUCCESS;
;;;388    }
0000a2  bd10              POP      {r4,pc}
                  |L16.164|
0000a4  bf00              NOP                            ;367
0000a6  2000              MOVS     r0,#0                 ;387
0000a8  e7fb              B        |L16.162|
;;;389    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L16.172|
                          DCD      0x50000200
                  |L16.176|
                          DCD      0xffff9604

                          AREA ||i.DrvSYS_SetOscCtrl||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetOscCtrl PROC
;;;447    /*---------------------------------------------------------------------------------------------------------*/
;;;448    int32_t DrvSYS_SetOscCtrl(E_SYS_OSC_CTRL eOscCtrl, int32_t i32Enable)
000000  b510              PUSH     {r4,lr}
;;;449    {	
000002  4602              MOV      r2,r0
;;;450    	switch(eOscCtrl)
000004  2a01              CMP      r2,#1
000006  d004              BEQ      |L17.18|
000008  2a02              CMP      r2,#2
00000a  d00d              BEQ      |L17.40|
00000c  2a03              CMP      r2,#3
00000e  d121              BNE      |L17.84|
000010  e015              B        |L17.62|
                  |L17.18|
;;;451    	{
;;;452    		case E_SYS_XTL32K:
;;;453    			SYSCLK->PWRCON.XTL32K_EN = i32Enable;
000012  4813              LDR      r0,|L17.96|
000014  6800              LDR      r0,[r0,#0]
000016  2302              MOVS     r3,#2
000018  4398              BICS     r0,r0,r3
00001a  004b              LSLS     r3,r1,#1
00001c  2402              MOVS     r4,#2
00001e  4023              ANDS     r3,r3,r4
000020  4318              ORRS     r0,r0,r3
000022  4b0f              LDR      r3,|L17.96|
000024  6018              STR      r0,[r3,#0]
;;;454    			break;
000026  e017              B        |L17.88|
                  |L17.40|
;;;455    		case E_SYS_OSC49M:
;;;456    		    SYSCLK->PWRCON.OSC49M_EN = i32Enable;
000028  480d              LDR      r0,|L17.96|
00002a  6800              LDR      r0,[r0,#0]
00002c  2304              MOVS     r3,#4
00002e  4398              BICS     r0,r0,r3
000030  008b              LSLS     r3,r1,#2
000032  2404              MOVS     r4,#4
000034  4023              ANDS     r3,r3,r4
000036  4318              ORRS     r0,r0,r3
000038  4b09              LDR      r3,|L17.96|
00003a  6018              STR      r0,[r3,#0]
;;;457    			break;
00003c  e00c              B        |L17.88|
                  |L17.62|
;;;458    		case E_SYS_OSC10K:
;;;459    		    SYSCLK->PWRCON.OSC10K_EN = i32Enable;
00003e  4808              LDR      r0,|L17.96|
000040  6800              LDR      r0,[r0,#0]
000042  2308              MOVS     r3,#8
000044  4398              BICS     r0,r0,r3
000046  00cb              LSLS     r3,r1,#3
000048  2408              MOVS     r4,#8
00004a  4023              ANDS     r3,r3,r4
00004c  4318              ORRS     r0,r0,r3
00004e  4b04              LDR      r3,|L17.96|
000050  6018              STR      r0,[r3,#0]
;;;460    			break;				
000052  e001              B        |L17.88|
                  |L17.84|
;;;461    		default:
;;;462    			return E_DRVSYS_ERR_ARGUMENT;
000054  4803              LDR      r0,|L17.100|
                  |L17.86|
;;;463    	}
;;;464    	
;;;465    	return E_SUCCESS;
;;;466    }
000056  bd10              POP      {r4,pc}
                  |L17.88|
000058  bf00              NOP                            ;454
00005a  2000              MOVS     r0,#0                 ;465
00005c  e7fb              B        |L17.86|
;;;467    
                          ENDP

00005e  0000              DCW      0x0000
                  |L17.96|
                          DCD      0x50000200
                  |L17.100|
                          DCD      0xffff9603

                          AREA ||i.DrvSYS_SetRCAdjValue||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetRCAdjValue PROC
;;;236    /*---------------------------------------------------------------------------------------------------------*/
;;;237    void DrvSYS_SetRCAdjValue(uint32_t u32Adj)
000000  4904              LDR      r1,|L18.20|
;;;238    {
;;;239    	SYS->OSCTRIM[0].TRIM = u32Adj;
000002  8a09              LDRH     r1,[r1,#0x10]
000004  0a09              LSRS     r1,r1,#8
000006  0209              LSLS     r1,r1,#8
000008  b2c2              UXTB     r2,r0
00000a  4311              ORRS     r1,r1,r2
00000c  4a01              LDR      r2,|L18.20|
00000e  8211              STRH     r1,[r2,#0x10]
;;;240    }
000010  4770              BX       lr
;;;241    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      0x50000100

                          AREA ||i.DrvSYS_SetSysTickSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetSysTickSource PROC
;;;330    /*---------------------------------------------------------------------------------------------------------*/
;;;331    int32_t DrvSYS_SetSysTickSource(uint8_t u8ClkSrcSel)
000000  4601              MOV      r1,r0
;;;332    {
;;;333    	if (u8ClkSrcSel > 7)
000002  2907              CMP      r1,#7
000004  dd01              BLE      |L19.10|
;;;334    	{
;;;335    		return E_DRVSYS_ERR_ARGUMENT;
000006  4807              LDR      r0,|L19.36|
                  |L19.8|
;;;336    	}
;;;337    	else
;;;338    	{
;;;339    		SYSCLK->CLKSEL0.STCLK_S = u8ClkSrcSel;  //0x5000_0210[5:3]
;;;340    	}
;;;341    	return 0;
;;;342    }
000008  4770              BX       lr
                  |L19.10|
00000a  4807              LDR      r0,|L19.40|
00000c  6900              LDR      r0,[r0,#0x10]         ;339
00000e  2238              MOVS     r2,#0x38              ;339
000010  4390              BICS     r0,r0,r2              ;339
000012  00ca              LSLS     r2,r1,#3              ;339
000014  2338              MOVS     r3,#0x38              ;339
000016  401a              ANDS     r2,r2,r3              ;339
000018  4310              ORRS     r0,r0,r2              ;339
00001a  4a03              LDR      r2,|L19.40|
00001c  6110              STR      r0,[r2,#0x10]         ;339
00001e  2000              MOVS     r0,#0                 ;341
000020  e7f2              B        |L19.8|
;;;343    
                          ENDP

000022  0000              DCW      0x0000
                  |L19.36|
                          DCD      0xffff9603
                  |L19.40|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_UnlockKeyAddr||, CODE, READONLY, ALIGN=2

                  DrvSYS_UnlockKeyAddr PROC
;;;64     /*---------------------------------------------------------------------------------------------------------*/
;;;65     int32_t DrvSYS_UnlockKeyAddr(void)
000000  2059              MOVS     r0,#0x59
;;;66     {
;;;67     	uint32_t lockbit;
;;;68     	
;;;69     	SYS->REGLOCK = 0x59;
000002  4a08              LDR      r2,|L20.36|
000004  6010              STR      r0,[r2,#0]
;;;70     	SYS->REGLOCK = 0x16;
000006  2016              MOVS     r0,#0x16
000008  6010              STR      r0,[r2,#0]
;;;71     	SYS->REGLOCK = 0x88;
00000a  2088              MOVS     r0,#0x88
00000c  6010              STR      r0,[r2,#0]
;;;72     
;;;73     	lockbit = SYS->REGLOCK & 0x01;
00000e  4610              MOV      r0,r2
000010  6800              LDR      r0,[r0,#0]
000012  07c1              LSLS     r1,r0,#31
000014  0fc9              LSRS     r1,r1,#31
;;;74     	return (lockbit)? 0:E_DRVSYS_ERR_UNLOCK_FAIL;
000016  2900              CMP      r1,#0
000018  d001              BEQ      |L20.30|
00001a  2000              MOVS     r0,#0
                  |L20.28|
;;;75     } 
00001c  4770              BX       lr
                  |L20.30|
00001e  4802              LDR      r0,|L20.40|
000020  e7fc              B        |L20.28|
;;;76      
                          ENDP

000022  0000              DCW      0x0000
                  |L20.36|
                          DCD      0x50000100
                  |L20.40|
                          DCD      0xffff9601

                          AREA ||.data||, DATA, ALIGN=2

                  s_u32ExtClockKHz
                          DCD      0x00000020

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L129.24|
                  |L129.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L129.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L129.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\ISD91XX_SDK\\NuvotonPlatform_Keil\\Src\\Driver\\DrvSYS.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_DrvSYS_c_41522b1a____REV16|
#line 112 "..\\..\\ISD91XX_SDK\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___8_DrvSYS_c_41522b1a____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_DrvSYS_c_41522b1a____REVSH|
#line 130
|__asm___8_DrvSYS_c_41522b1a____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
