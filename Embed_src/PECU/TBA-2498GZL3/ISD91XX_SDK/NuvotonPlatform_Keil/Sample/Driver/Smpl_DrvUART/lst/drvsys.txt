; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drvsys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\drvsys.d --cpu=Cortex-M0 --apcs=interwork -I.\ -I..\..\..\..\HW -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\..\Include -I..\..\..\Include\Driver -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\?ST\STM32F10x --omf_browse=.\obj\drvsys.crf ..\..\..\Src\Driver\DrvSYS.c]
                          THUMB

                          AREA ||i.DrvSYS_ClearRstSrc||, CODE, READONLY, ALIGN=1

                  DrvSYS_ClearRstSrc PROC
;;;150    /*---------------------------------------------------------------------------------------------------------*/
;;;151    uint32_t DrvSYS_ClearRstSrc(uint32_t u32Src)
000000  2105              MOVS     r1,#5
;;;152    {
;;;153    	*((__IO uint32_t *) &SYS->RSTSRC) = u32Src;
000002  0709              LSLS     r1,r1,#28
000004  6048              STR      r0,[r1,#4]
;;;154    	return 0;
000006  2000              MOVS     r0,#0
;;;155    }
000008  4770              BX       lr
;;;156    
                          ENDP


                          AREA ||i.DrvSYS_Delay||, CODE, READONLY, ALIGN=2

                  DrvSYS_Delay PROC
;;;111    /*---------------------------------------------------------------------------------------------------------*/
;;;112    void DrvSYS_Delay(uint32_t us)
000000  2130              MOVS     r1,#0x30
;;;113    {
;;;114        SysTick->LOAD = us * 48;
000002  4348              MULS     r0,r1,r0
000004  4904              LDR      r1,|L2.24|
000006  6148              STR      r0,[r1,#0x14]
;;;115        SysTick->VAL  = (0x00);
000008  2000              MOVS     r0,#0
00000a  6188              STR      r0,[r1,#0x18]
;;;116        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000c  2005              MOVS     r0,#5
00000e  6108              STR      r0,[r1,#0x10]
                  |L2.16|
;;;117    
;;;118        /* Waiting for down-count to zero */
;;;119        while((SysTick->CTRL & (1 << 16)) == 0);
000010  6908              LDR      r0,[r1,#0x10]
000012  03c0              LSLS     r0,r0,#15
000014  d5fc              BPL      |L2.16|
;;;120    }
000016  4770              BX       lr
;;;121    
                          ENDP

                  |L2.24|
                          DCD      0xe000e000

                          AREA ||i.DrvSYS_EnableDeepPowerDown||, CODE, READONLY, ALIGN=2

                  DrvSYS_EnableDeepPowerDown PROC
;;;479    /*---------------------------------------------------------------------------------------------------------*/
;;;480    void DrvSYS_EnableDeepPowerDown(int32_t i32Enable)
000000  4a04              LDR      r2,|L3.20|
;;;481    {
;;;482    	SYSCLK->PWRCON.DEEP_PD = i32Enable;
000002  6811              LDR      r1,[r2,#0]
000004  2301              MOVS     r3,#1
000006  02db              LSLS     r3,r3,#11
000008  07c0              LSLS     r0,r0,#31
00000a  4399              BICS     r1,r1,r3
00000c  0d00              LSRS     r0,r0,#20
00000e  4301              ORRS     r1,r1,r0
000010  6011              STR      r1,[r2,#0]
;;;483    }
000012  4770              BX       lr
;;;484    
                          ENDP

                  |L3.20|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetEXTClock||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetEXTClock PROC
;;;500    /*---------------------------------------------------------------------------------------------------------*/
;;;501    uint32_t DrvSYS_GetEXTClock(void)
000000  4801              LDR      r0,|L4.8|
;;;502    {	
;;;503    	return s_u32ExtClockKHz;
000002  6800              LDR      r0,[r0,#0]  ; s_u32ExtClockKHz
;;;504    }
000004  4770              BX       lr
;;;505    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.data||

                          AREA ||i.DrvSYS_GetHCLK||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetHCLK PROC
;;;521    /*---------------------------------------------------------------------------------------------------------*/
;;;522    uint32_t DrvSYS_GetHCLK(void)
000000  b510              PUSH     {r4,lr}
;;;523    {
;;;524    	
;;;525    	uint32_t u32Freqout = 0, u32AHBDivider;
;;;526    
;;;527    	if(SYSCLK->CLKSEL0.HCLK_S == 1)     	/* external 32KHz crystal clock */ 
000002  490e              LDR      r1,|L5.60|
000004  6908              LDR      r0,[r1,#0x10]
000006  0740              LSLS     r0,r0,#29
000008  0f40              LSRS     r0,r0,#29
00000a  2801              CMP      r0,#1
00000c  d009              BEQ      |L5.34|
;;;528    	{
;;;529    		u32Freqout = 32;
;;;530    	}
;;;531    	else if(SYSCLK->CLKSEL0.HCLK_S == 2)	/* internal 10KHz oscillator clock */
00000e  6908              LDR      r0,[r1,#0x10]
000010  0740              LSLS     r0,r0,#29
000012  0f40              LSRS     r0,r0,#29
000014  2802              CMP      r0,#2
000016  d006              BEQ      |L5.38|
;;;532    	{
;;;533    	 	u32Freqout = 10;
;;;534    	}
;;;535    	else									/* internal 49MHz oscillator clock */
;;;536    	{
;;;537    	 	if(SYSCLK->CLKSEL0.OSCFSel)
000018  6908              LDR      r0,[r1,#0x10]
00001a  0640              LSLS     r0,r0,#25
00001c  d505              BPL      |L5.42|
;;;538    		u32Freqout = 32768;
00001e  0188              LSLS     r0,r1,#6
000020  e005              B        |L5.46|
                  |L5.34|
000022  2020              MOVS     r0,#0x20              ;529
000024  e003              B        |L5.46|
                  |L5.38|
000026  200a              MOVS     r0,#0xa               ;533
000028  e001              B        |L5.46|
                  |L5.42|
;;;539    		else
;;;540    		u32Freqout = 49152;
00002a  2003              MOVS     r0,#3
00002c  0380              LSLS     r0,r0,#14
                  |L5.46|
;;;541    	
;;;542    	}
;;;543    	u32AHBDivider = SYSCLK->CLKDIV.HCLK_N + 1 ;
00002e  6989              LDR      r1,[r1,#0x18]
000030  0709              LSLS     r1,r1,#28
000032  0f09              LSRS     r1,r1,#28
000034  1c49              ADDS     r1,r1,#1
;;;544    	
;;;545    	return (u32Freqout/u32AHBDivider);	
000036  f7fffffe          BL       __aeabi_uidivmod
;;;546    }
00003a  bd10              POP      {r4,pc}
;;;547    
                          ENDP

                  |L5.60|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_GetRstSrc||, CODE, READONLY, ALIGN=1

                  DrvSYS_GetRstSrc PROC
;;;133    /*---------------------------------------------------------------------------------------------------------*/
;;;134    uint32_t DrvSYS_GetRstSrc(void)
000000  2005              MOVS     r0,#5
;;;135    {
;;;136    	return *((__IO uint32_t *) &SYS->RSTSRC);
000002  0700              LSLS     r0,r0,#28
000004  6840              LDR      r0,[r0,#4]
;;;137    }
000006  4770              BX       lr
;;;138    
                          ENDP


                          AREA ||i.DrvSYS_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvSYS_GetVersion PROC
;;;29     /*---------------------------------------------------------------------------------------------------------*/
;;;30     uint32_t DrvSYS_GetVersion(void)
000000  4800              LDR      r0,|L7.4|
;;;31     {
;;;32     	return DRVSYS_VERSION_NUM;
;;;33     }
000002  4770              BX       lr
;;;34     
                          ENDP

                  |L7.4|
                          DCD      0x00010001

                          AREA ||i.DrvSYS_LockKeyAddr||, CODE, READONLY, ALIGN=2

                  DrvSYS_LockKeyAddr PROC
;;;88     /*---------------------------------------------------------------------------------------------------------*/
;;;89     int32_t DrvSYS_LockKeyAddr(void)
000000  4804              LDR      r0,|L8.20|
;;;90     {
;;;91     	uint32_t lockbit;
;;;92     	
;;;93     	SYS->REGLOCK = 0x00;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;94     
;;;95     	lockbit = SYS->REGLOCK & 0x01;
000006  6800              LDR      r0,[r0,#0]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
;;;96     	return (lockbit)? E_DRVSYS_ERR_LOCK_FAIL:0;
00000c  d000              BEQ      |L8.16|
00000e  4802              LDR      r0,|L8.24|
                  |L8.16|
;;;97     }
000010  4770              BX       lr
;;;98     
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x50000100
                  |L8.24|
                          DCD      0xffff9602

                          AREA ||i.DrvSYS_ReadProductID||, CODE, READONLY, ALIGN=1

                  DrvSYS_ReadProductID PROC
;;;47     /*---------------------------------------------------------------------------------------------------------*/
;;;48     uint32_t DrvSYS_ReadProductID(void)
000000  2005              MOVS     r0,#5
;;;49     {	
;;;50     	return SYS->PDID;
000002  0700              LSLS     r0,r0,#28
000004  6800              LDR      r0,[r0,#0]
;;;51     }
000006  4770              BX       lr
;;;52     
                          ENDP


                          AREA ||i.DrvSYS_ResetCPU||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetCPU PROC
;;;202    /*---------------------------------------------------------------------------------------------------------*/
;;;203    void DrvSYS_ResetCPU(void)
000000  2005              MOVS     r0,#5
;;;204    {
;;;205    	SYS->IPRSTC1.CPU_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6881              LDR      r1,[r0,#8]
000006  2202              MOVS     r2,#2
000008  4311              ORRS     r1,r1,r2
00000a  6081              STR      r1,[r0,#8]
;;;206    }
00000c  4770              BX       lr
;;;207    
                          ENDP


                          AREA ||i.DrvSYS_ResetChip||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetChip PROC
;;;219    /*---------------------------------------------------------------------------------------------------------*/
;;;220    void DrvSYS_ResetChip(void)
000000  2005              MOVS     r0,#5
;;;221    {
;;;222    	SYS->IPRSTC1.CHIP_RST = 1;
000002  0700              LSLS     r0,r0,#28
000004  6881              LDR      r1,[r0,#8]
000006  2201              MOVS     r2,#1
000008  4311              ORRS     r1,r1,r2
00000a  6081              STR      r1,[r0,#8]
;;;223    }
00000c  4770              BX       lr
;;;224    
                          ENDP


                          AREA ||i.DrvSYS_ResetIP||, CODE, READONLY, ALIGN=1

                  DrvSYS_ResetIP PROC
;;;173    /*---------------------------------------------------------------------------------------------------------*/
;;;174    void DrvSYS_ResetIP(E_SYS_IP_RST eIpRst)
000000  2305              MOVS     r3,#5
;;;175    {	
;;;176    	uint32_t u32Reg;
;;;177    
;;;178    	if (eIpRst == E_SYS_PDMA_RST)
;;;179    	{
;;;180    		SYS->IPRSTC1.PDMA_RST = 1;
000002  071b              LSLS     r3,r3,#28
000004  2820              CMP      r0,#0x20              ;178
000006  d008              BEQ      |L12.26|
;;;181    		SYS->IPRSTC1.PDMA_RST = 0;
;;;182    	}
;;;183    	else
;;;184    	{
;;;185    		u32Reg = *((__IO uint32_t *) &SYS->IPRSTC2);
000008  68d9              LDR      r1,[r3,#0xc]
;;;186    		*((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg | (1<<eIpRst);
00000a  2201              MOVS     r2,#1
00000c  4082              LSLS     r2,r2,r0
00000e  4610              MOV      r0,r2
000010  4308              ORRS     r0,r0,r1
000012  60d8              STR      r0,[r3,#0xc]
;;;187    		*((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg & ~(1<<eIpRst);
000014  4391              BICS     r1,r1,r2
000016  60d9              STR      r1,[r3,#0xc]
;;;188    	}
;;;189    }
000018  4770              BX       lr
                  |L12.26|
00001a  6899              LDR      r1,[r3,#8]            ;180
00001c  2004              MOVS     r0,#4                 ;180
00001e  4301              ORRS     r1,r1,r0              ;180
000020  6099              STR      r1,[r3,#8]            ;180
000022  6899              LDR      r1,[r3,#8]            ;181
000024  4381              BICS     r1,r1,r0              ;181
000026  6099              STR      r1,[r3,#8]            ;181
000028  4770              BX       lr
;;;190    
                          ENDP


                          AREA ||i.DrvSYS_SetClockDivider||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetClockDivider PROC
;;;403    /*---------------------------------------------------------------------------------------------------------*/
;;;404    int32_t DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , int32_t i32value)
000000  4a0f              LDR      r2,|L13.64|
;;;405    {
;;;406    	if (eIpDiv == E_SYS_ADC_DIV)
000002  2800              CMP      r0,#0
000004  d005              BEQ      |L13.18|
;;;407    	{
;;;408    	 	SYSCLK->CLKDIV.ADC_N = i32value; //0x5000_0218[23:16]
;;;409    	}
;;;410    //	else if(eIpDiv == E_SYS_CAN_DIV)
;;;411    //	{
;;;412    //	 	SYSCLK->CLKDIV.CAN_N = i32value;
;;;413    //	}
;;;414    	else if(eIpDiv == E_SYS_UART_DIV) 
000006  2801              CMP      r0,#1
000008  d00a              BEQ      |L13.32|
;;;415    	{
;;;416    	 	SYSCLK->CLKDIV.UART_N = i32value;//0x5000_0218[11:8]
;;;417    	}
;;;418    //	else if(eIpDiv == E_SYS_USB_DIV)
;;;419    //	{
;;;420    //	 	SYSCLK->CLKDIV.USB_N = i32value;
;;;421    //	}
;;;422    	else if(eIpDiv == E_SYS_HCLK_DIV)
00000a  2802              CMP      r0,#2
00000c  d00f              BEQ      |L13.46|
;;;423    	{
;;;424    	 	SYSCLK->CLKDIV.HCLK_N = i32value; //0x5000_0218[3:0]
;;;425    	}
;;;426    	else
;;;427    		return E_DRVSYS_ERR_IPDIV;
00000e  480d              LDR      r0,|L13.68|
;;;428    
;;;429    	return E_SUCCESS;
;;;430    	
;;;431    }
000010  4770              BX       lr
                  |L13.18|
000012  6990              LDR      r0,[r2,#0x18]         ;408
000014  23ff              MOVS     r3,#0xff              ;408
000016  041b              LSLS     r3,r3,#16             ;408
000018  4398              BICS     r0,r0,r3              ;408
00001a  0609              LSLS     r1,r1,#24             ;408
00001c  0a09              LSRS     r1,r1,#8              ;408
00001e  e00b              B        |L13.56|
                  |L13.32|
000020  6990              LDR      r0,[r2,#0x18]         ;416
000022  230f              MOVS     r3,#0xf               ;416
000024  021b              LSLS     r3,r3,#8              ;416
000026  4398              BICS     r0,r0,r3              ;416
000028  0709              LSLS     r1,r1,#28             ;416
00002a  0d09              LSRS     r1,r1,#20             ;416
00002c  e004              B        |L13.56|
                  |L13.46|
00002e  6990              LDR      r0,[r2,#0x18]         ;424
000030  0709              LSLS     r1,r1,#28             ;424
000032  0900              LSRS     r0,r0,#4              ;424
000034  0100              LSLS     r0,r0,#4              ;424
000036  0f09              LSRS     r1,r1,#28             ;424
                  |L13.56|
000038  4308              ORRS     r0,r0,r1              ;424
00003a  6190              STR      r0,[r2,#0x18]         ;424
00003c  2000              MOVS     r0,#0                 ;429
00003e  4770              BX       lr
;;;432    
                          ENDP

                  |L13.64|
                          DCD      0x50000200
                  |L13.68|
                          DCD      0xffff9605

                          AREA ||i.DrvSYS_SetHCLKSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetHCLKSource PROC
;;;300    /*---------------------------------------------------------------------------------------------------------*/
;;;301    int32_t DrvSYS_SetHCLKSource(uint8_t u8ClkSrcSel)
000000  2802              CMP      r0,#2
;;;302    {
;;;303    	if (u8ClkSrcSel > 2)
000002  d901              BLS      |L14.8|
;;;304    	{
;;;305    		return E_DRVSYS_ERR_ARGUMENT;
000004  4805              LDR      r0,|L14.28|
;;;306    	}
;;;307    	else
;;;308    	{
;;;309    		SYSCLK->CLKSEL0.HCLK_S = u8ClkSrcSel; //0x5000_0210[2:0]
;;;310    	}
;;;311    	return 0;
;;;312    }
000006  4770              BX       lr
                  |L14.8|
000008  4905              LDR      r1,|L14.32|
00000a  690a              LDR      r2,[r1,#0x10]         ;309
00000c  0740              LSLS     r0,r0,#29             ;309
00000e  08d2              LSRS     r2,r2,#3              ;309
000010  00d2              LSLS     r2,r2,#3              ;309
000012  0f40              LSRS     r0,r0,#29             ;309
000014  4302              ORRS     r2,r2,r0              ;309
000016  610a              STR      r2,[r1,#0x10]         ;309
000018  2000              MOVS     r0,#0                 ;311
00001a  4770              BX       lr
;;;313    
                          ENDP

                  |L14.28|
                          DCD      0xffff9603
                  |L14.32|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetIPClock||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetIPClock PROC
;;;258    /*---------------------------------------------------------------------------------------------------------*/
;;;259    void DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable)
000000  b510              PUSH     {r4,lr}
;;;260    {	
;;;261    	uint32_t u32Reg;
;;;262    
;;;263    	if (eIpClk == E_SYS_PDMA_CLK)
;;;264    	{
;;;265    		SYSCLK->AHBCLK.PDMA_EN = i32Enable; //0x5000_0204[1]
000002  4c0f              LDR      r4,|L15.64|
000004  2821              CMP      r0,#0x21              ;263
000006  d009              BEQ      |L15.28|
;;;266    	}
;;;267    	else if (eIpClk == E_SYS_ISP_CLK)
000008  2822              CMP      r0,#0x22
00000a  d00d              BEQ      |L15.40|
;;;268    	{
;;;269    		SYSCLK->AHBCLK.ISP_EN = i32Enable; //0x5000_0204[2]
;;;270    	}
;;;271    	else
;;;272    	{
;;;273    		u32Reg = *((__IO uint32_t *) &SYSCLK->APBCLK);
00000c  68a3              LDR      r3,[r4,#8]
;;;274    		
;;;275    		if (i32Enable)
;;;276    		{
;;;277    			*((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg | (1<<eIpClk); //0x5000_0208
00000e  2201              MOVS     r2,#1
000010  4082              LSLS     r2,r2,r0
000012  2900              CMP      r1,#0                 ;275
000014  d010              BEQ      |L15.56|
000016  431a              ORRS     r2,r2,r3
000018  60a2              STR      r2,[r4,#8]
;;;278    		}
;;;279    		else
;;;280    		{
;;;281    			*((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg & ~(1<<eIpClk);
;;;282    		}
;;;283    	}
;;;284    }
00001a  bd10              POP      {r4,pc}
                  |L15.28|
00001c  6860              LDR      r0,[r4,#4]            ;265
00001e  2202              MOVS     r2,#2                 ;265
000020  4390              BICS     r0,r0,r2              ;265
000022  07c9              LSLS     r1,r1,#31             ;265
000024  0f89              LSRS     r1,r1,#30             ;265
000026  e004              B        |L15.50|
                  |L15.40|
000028  6860              LDR      r0,[r4,#4]            ;269
00002a  2204              MOVS     r2,#4                 ;269
00002c  4390              BICS     r0,r0,r2              ;269
00002e  07c9              LSLS     r1,r1,#31             ;269
000030  0f49              LSRS     r1,r1,#29             ;269
                  |L15.50|
000032  4308              ORRS     r0,r0,r1              ;265
000034  6060              STR      r0,[r4,#4]            ;265
000036  bd10              POP      {r4,pc}
                  |L15.56|
000038  4393              BICS     r3,r3,r2              ;281
00003a  60a3              STR      r3,[r4,#8]            ;281
00003c  bd10              POP      {r4,pc}
;;;285    
                          ENDP

00003e  0000              DCW      0x0000
                  |L15.64|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_SetIPClockSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetIPClockSource PROC
;;;359    /*---------------------------------------------------------------------------------------------------------*/
;;;360    int32_t DrvSYS_SetIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel)
000000  b530              PUSH     {r4,r5,lr}
;;;361    {
;;;362    	
;;;363    	switch(eIpClkSrc)
;;;364    	{
;;;365    		case E_SYS_I2S_CLKSRC:
;;;366    			SYSCLK->CLKSEL2.I2S_S = u8ClkSrcSel;  //0x5000_021C[1:0]
000002  078c              LSLS     r4,r1,#30
;;;367    			break;
;;;368    		case E_SYS_PWM01_CLKSRC:
;;;369    			SYSCLK->CLKSEL1.PWM01_S = u8ClkSrcSel;//0x5000_0214[29:28]
;;;370    			break;
;;;371    		case E_SYS_TMR1_CLKSRC:
;;;372    		    SYSCLK->CLKSEL1.TMR1_S = u8ClkSrcSel;//0x5000_0214[14:12]
000004  074d              LSLS     r5,r1,#29
000006  4a1a              LDR      r2,|L16.112|
000008  0fa4              LSRS     r4,r4,#30             ;366
00000a  0f6d              LSRS     r5,r5,#29
00000c  0003              MOVS     r3,r0                 ;363
00000e  f7fffffe          BL       __ARM_common_switch8
000012  0805              DCB      0x08,0x05
000014  0b2c121b          DCB      0x0b,0x2c,0x12,0x1b
000018  2c27212c          DCB      0x2c,0x27,0x21,0x2c
00001c  69d0              LDR      r0,[r2,#0x1c]         ;366
00001e  0880              LSRS     r0,r0,#2              ;366
000020  0080              LSLS     r0,r0,#2              ;366
000022  4320              ORRS     r0,r0,r4              ;366
000024  61d0              STR      r0,[r2,#0x1c]         ;366
000026  e00d              B        |L16.68|
000028  6950              LDR      r0,[r2,#0x14]         ;369
00002a  2303              MOVS     r3,#3                 ;369
00002c  071b              LSLS     r3,r3,#28             ;369
00002e  4398              BICS     r0,r0,r3              ;369
000030  0789              LSLS     r1,r1,#30             ;369
000032  0889              LSRS     r1,r1,#2              ;369
000034  e004              B        |L16.64|
000036  6950              LDR      r0,[r2,#0x14]
000038  2107              MOVS     r1,#7
00003a  0309              LSLS     r1,r1,#12
00003c  4388              BICS     r0,r0,r1
00003e  0329              LSLS     r1,r5,#12
                  |L16.64|
000040  4308              ORRS     r0,r0,r1              ;369
                  |L16.66|
000042  6150              STR      r0,[r2,#0x14]         ;369
                  |L16.68|
;;;373    			break;				
;;;374    		case E_SYS_TMR0_CLKSRC:
;;;375    		    SYSCLK->CLKSEL1.TMR0_S = u8ClkSrcSel;//0x5000_0214[10:8]
;;;376    			break;				
;;;377    		case E_SYS_DPWM_CLKSRC:
;;;378    		    SYSCLK->CLKSEL1.DPWM_S = u8ClkSrcSel;//0x5000_0214[4]
;;;379    			break;				
;;;380    		case E_SYS_WDG_CLKSRC:
;;;381    		    SYSCLK->CLKSEL1.WDG_S = u8ClkSrcSel;//0x5000_0214[1:0]
;;;382    			break;				
;;;383    		default:
;;;384    			return E_DRVSYS_ERR_IPSRC;
;;;385    	}
;;;386    	
;;;387    	return E_SUCCESS;
000044  2000              MOVS     r0,#0
;;;388    }
000046  bd30              POP      {r4,r5,pc}
000048  6950              LDR      r0,[r2,#0x14]         ;375
00004a  2107              MOVS     r1,#7                 ;375
00004c  0209              LSLS     r1,r1,#8              ;375
00004e  4388              BICS     r0,r0,r1              ;375
000050  0229              LSLS     r1,r5,#8              ;375
000052  e7f5              B        |L16.64|
000054  6950              LDR      r0,[r2,#0x14]         ;378
000056  2310              MOVS     r3,#0x10              ;378
000058  4398              BICS     r0,r0,r3              ;378
00005a  07c9              LSLS     r1,r1,#31             ;378
00005c  0ec9              LSRS     r1,r1,#27             ;378
00005e  e7ef              B        |L16.64|
000060  6950              LDR      r0,[r2,#0x14]         ;381
000062  0880              LSRS     r0,r0,#2              ;381
000064  0080              LSLS     r0,r0,#2              ;381
000066  4320              ORRS     r0,r0,r4              ;381
000068  e7eb              B        |L16.66|
00006a  4802              LDR      r0,|L16.116|
00006c  bd30              POP      {r4,r5,pc}
;;;389    
                          ENDP

00006e  0000              DCW      0x0000
                  |L16.112|
                          DCD      0x50000200
                  |L16.116|
                          DCD      0xffff9604

                          AREA ||i.DrvSYS_SetOscCtrl||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetOscCtrl PROC
;;;447    /*---------------------------------------------------------------------------------------------------------*/
;;;448    int32_t DrvSYS_SetOscCtrl(E_SYS_OSC_CTRL eOscCtrl, int32_t i32Enable)
000000  4a0e              LDR      r2,|L17.60|
;;;449    {	
;;;450    	switch(eOscCtrl)
000002  2801              CMP      r0,#1
000004  d005              BEQ      |L17.18|
000006  2802              CMP      r0,#2
000008  d009              BEQ      |L17.30|
00000a  2803              CMP      r0,#3
00000c  d010              BEQ      |L17.48|
;;;451    	{
;;;452    		case E_SYS_XTL32K:
;;;453    			SYSCLK->PWRCON.XTL32K_EN = i32Enable;
;;;454    			break;
;;;455    		case E_SYS_OSC49M:
;;;456    		    SYSCLK->PWRCON.OSC49M_EN = i32Enable;
;;;457    			break;
;;;458    		case E_SYS_OSC10K:
;;;459    		    SYSCLK->PWRCON.OSC10K_EN = i32Enable;
;;;460    			break;				
;;;461    		default:
;;;462    			return E_DRVSYS_ERR_ARGUMENT;
00000e  480c              LDR      r0,|L17.64|
;;;463    	}
;;;464    	
;;;465    	return E_SUCCESS;
;;;466    }
000010  4770              BX       lr
                  |L17.18|
000012  6810              LDR      r0,[r2,#0]            ;453
000014  2302              MOVS     r3,#2                 ;453
000016  4398              BICS     r0,r0,r3              ;453
000018  07c9              LSLS     r1,r1,#31             ;453
00001a  0f89              LSRS     r1,r1,#30             ;453
00001c  e004              B        |L17.40|
                  |L17.30|
00001e  6810              LDR      r0,[r2,#0]            ;456
000020  2304              MOVS     r3,#4                 ;456
000022  4398              BICS     r0,r0,r3              ;456
000024  07c9              LSLS     r1,r1,#31             ;456
000026  0f49              LSRS     r1,r1,#29             ;456
                  |L17.40|
000028  4308              ORRS     r0,r0,r1              ;453
00002a  6010              STR      r0,[r2,#0]            ;453
00002c  2000              MOVS     r0,#0                 ;465
00002e  4770              BX       lr
                  |L17.48|
000030  6810              LDR      r0,[r2,#0]            ;459
000032  2308              MOVS     r3,#8                 ;459
000034  4398              BICS     r0,r0,r3              ;459
000036  07c9              LSLS     r1,r1,#31             ;459
000038  0f09              LSRS     r1,r1,#28             ;459
00003a  e7f5              B        |L17.40|
;;;467    
                          ENDP

                  |L17.60|
                          DCD      0x50000200
                  |L17.64|
                          DCD      0xffff9603

                          AREA ||i.DrvSYS_SetRCAdjValue||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetRCAdjValue PROC
;;;236    /*---------------------------------------------------------------------------------------------------------*/
;;;237    void DrvSYS_SetRCAdjValue(uint32_t u32Adj)
000000  4903              LDR      r1,|L18.16|
;;;238    {
;;;239    	SYS->OSCTRIM[0].TRIM = u32Adj;
000002  8a0a              LDRH     r2,[r1,#0x10]
000004  b2c0              UXTB     r0,r0
000006  0a12              LSRS     r2,r2,#8
000008  0212              LSLS     r2,r2,#8
00000a  4302              ORRS     r2,r2,r0
00000c  820a              STRH     r2,[r1,#0x10]
;;;240    }
00000e  4770              BX       lr
;;;241    
                          ENDP

                  |L18.16|
                          DCD      0x50000100

                          AREA ||i.DrvSYS_SetSysTickSource||, CODE, READONLY, ALIGN=2

                  DrvSYS_SetSysTickSource PROC
;;;330    /*---------------------------------------------------------------------------------------------------------*/
;;;331    int32_t DrvSYS_SetSysTickSource(uint8_t u8ClkSrcSel)
000000  2807              CMP      r0,#7
;;;332    {
;;;333    	if (u8ClkSrcSel > 7)
000002  d901              BLS      |L19.8|
;;;334    	{
;;;335    		return E_DRVSYS_ERR_ARGUMENT;
000004  4805              LDR      r0,|L19.28|
;;;336    	}
;;;337    	else
;;;338    	{
;;;339    		SYSCLK->CLKSEL0.STCLK_S = u8ClkSrcSel;  //0x5000_0210[5:3]
;;;340    	}
;;;341    	return 0;
;;;342    }
000006  4770              BX       lr
                  |L19.8|
000008  4a05              LDR      r2,|L19.32|
00000a  6911              LDR      r1,[r2,#0x10]         ;339
00000c  2338              MOVS     r3,#0x38              ;339
00000e  0740              LSLS     r0,r0,#29             ;339
000010  4399              BICS     r1,r1,r3              ;339
000012  0e80              LSRS     r0,r0,#26             ;339
000014  4301              ORRS     r1,r1,r0              ;339
000016  6111              STR      r1,[r2,#0x10]         ;339
000018  2000              MOVS     r0,#0                 ;341
00001a  4770              BX       lr
;;;343    
                          ENDP

                  |L19.28|
                          DCD      0xffff9603
                  |L19.32|
                          DCD      0x50000200

                          AREA ||i.DrvSYS_UnlockKeyAddr||, CODE, READONLY, ALIGN=2

                  DrvSYS_UnlockKeyAddr PROC
;;;64     /*---------------------------------------------------------------------------------------------------------*/
;;;65     int32_t DrvSYS_UnlockKeyAddr(void)
000000  4807              LDR      r0,|L20.32|
;;;66     {
;;;67     	uint32_t lockbit;
;;;68     	
;;;69     	SYS->REGLOCK = 0x59;
000002  2159              MOVS     r1,#0x59
000004  6001              STR      r1,[r0,#0]
;;;70     	SYS->REGLOCK = 0x16;
000006  2116              MOVS     r1,#0x16
000008  6001              STR      r1,[r0,#0]
;;;71     	SYS->REGLOCK = 0x88;
00000a  2188              MOVS     r1,#0x88
00000c  6001              STR      r1,[r0,#0]
;;;72     
;;;73     	lockbit = SYS->REGLOCK & 0x01;
00000e  6800              LDR      r0,[r0,#0]
000010  07c0              LSLS     r0,r0,#31
000012  0fc0              LSRS     r0,r0,#31
;;;74     	return (lockbit)? 0:E_DRVSYS_ERR_UNLOCK_FAIL;
000014  d001              BEQ      |L20.26|
000016  2000              MOVS     r0,#0
;;;75     } 
000018  4770              BX       lr
                  |L20.26|
00001a  4802              LDR      r0,|L20.36|
00001c  4770              BX       lr
;;;76      
                          ENDP

00001e  0000              DCW      0x0000
                  |L20.32|
                          DCD      0x50000100
                  |L20.36|
                          DCD      0xffff9601

                          AREA ||.data||, DATA, ALIGN=2

                  s_u32ExtClockKHz
                          DCD      0x00000020

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L129.16|
00000e  461d              MOV      r5,r3
                  |L129.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Src\\Driver\\DrvSYS.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_DrvSYS_c_41522b1a____REV16|
#line 112 "..\\..\\..\\..\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___8_DrvSYS_c_41522b1a____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_DrvSYS_c_41522b1a____REVSH|
#line 130
|__asm___8_DrvSYS_c_41522b1a____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
