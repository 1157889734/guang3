; generated by ARM C/C++ Compiler, 4.1 [Build 791]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\smpl_drvuart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\smpl_drvuart.d --cpu=Cortex-M0 --apcs=interwork -I.\ -I..\..\..\..\HW -I..\..\..\..\CMSIS\CM0\CoreSupport -I..\..\..\..\CMSIS\CM0\DeviceSupport\Nuvoton\ISD91xx -I..\..\..\Include -I..\..\..\Include\Driver -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\INC\?ST\STM32F10x --omf_browse=.\obj\smpl_drvuart.crf Smpl_DrvUART.c]
                          THUMB

                          AREA ||i.UART_INT_HANDLE||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  UART_INT_HANDLE PROC
;;;29     /*---------------------------------------------------------------------------------------------------------*/
;;;30     void UART_INT_HANDLE(uint32_t u32IntStatus)
000000  b5f8              PUSH     {r3-r7,lr}
;;;31     {
;;;32     
;;;33      	uint8_t bInChar[1]={0xFF};
000002  a126              ADR      r1,|L1.156|
000004  6809              LDR      r1,[r1,#0]
;;;34     
;;;35     
;;;36     	if(u32IntStatus & RDAIE)
000006  9100              STR      r1,[sp,#0]
;;;37     	{
;;;38     		printf("\nInput:");
;;;39     
;;;40     		/* Get all the input characters */
;;;41     		while(UART0->ISR.RDA_IF==1)
;;;42     		{
;;;43     			/* Get the character from UART Buffer */
;;;44     			DrvUART_Read(UART_PORT0,bInChar,1);
;;;45     
;;;46     			printf("%c ", bInChar[0]);
;;;47     
;;;48     			if(bInChar[0] == '0')
;;;49     			{
;;;50     				g_bWait = FALSE;
;;;51     			}
;;;52     
;;;53     			/* Check if buffer full */
;;;54     			if(comRbytes < RXBUFSIZE)
;;;55     			{
;;;56     				/* Enqueue the character */
;;;57     				comRbuf[comRtail] = bInChar[0];
000008  4d25              LDR      r5,|L1.160|
00000a  4c26              LDR      r4,|L1.164|
00000c  07c1              LSLS     r1,r0,#31             ;36
00000e  d02b              BEQ      |L1.104|
000010  a025              ADR      r0,|L1.168|
000012  f7fffffe          BL       __2printf
000016  2600              MOVS     r6,#0                 ;44
000018  4f25              LDR      r7,|L1.176|
;;;58     				comRtail = (comRtail == (RXBUFSIZE-1)) ? 0 : (comRtail+1);
;;;59     				comRbytes++;
00001a  e01c              B        |L1.86|
                  |L1.28|
00001c  2201              MOVS     r2,#1                 ;44
00001e  4669              MOV      r1,sp                 ;44
000020  2000              MOVS     r0,#0                 ;44
000022  f7fffffe          BL       DrvUART_Read
000026  4668              MOV      r0,sp                 ;46
000028  7801              LDRB     r1,[r0,#0]            ;46
00002a  a022              ADR      r0,|L1.180|
00002c  f7fffffe          BL       __2printf
000030  4668              MOV      r0,sp                 ;48
000032  7800              LDRB     r0,[r0,#0]            ;48
000034  2830              CMP      r0,#0x30              ;48
000036  d100              BNE      |L1.58|
000038  60a6              STR      r6,[r4,#8]            ;50  ; g_bWait
                  |L1.58|
00003a  8821              LDRH     r1,[r4,#0]            ;54  ; comRbytes
00003c  2940              CMP      r1,#0x40              ;54
00003e  d20a              BCS      |L1.86|
000040  88a1              LDRH     r1,[r4,#4]            ;57  ; comRtail
000042  5468              STRB     r0,[r5,r1]            ;57
000044  88a0              LDRH     r0,[r4,#4]            ;58  ; comRtail
000046  283f              CMP      r0,#0x3f              ;58
000048  d00c              BEQ      |L1.100|
00004a  88a0              LDRH     r0,[r4,#4]            ;58  ; comRtail
00004c  1c40              ADDS     r0,r0,#1              ;58
                  |L1.78|
00004e  80a0              STRH     r0,[r4,#4]            ;58
000050  8820              LDRH     r0,[r4,#0]  ; comRbytes
000052  1c40              ADDS     r0,r0,#1
000054  8020              STRH     r0,[r4,#0]
                  |L1.86|
000056  69f8              LDR      r0,[r7,#0x1c]         ;41
000058  07c0              LSLS     r0,r0,#31             ;41
00005a  d1df              BNE      |L1.28|
;;;60     			}
;;;61     		}
;;;62     		printf("\nTransmission Test:");
00005c  a016              ADR      r0,|L1.184|
00005e  f7fffffe          BL       __2printf
                  |L1.98|
;;;63     	}
;;;64     	else if(u32IntStatus & THREIE)
;;;65     	{
;;;66     
;;;67             uint16_t tmp;
;;;68             tmp = comRtail;
;;;69     
;;;70     		if(comRhead != tmp)
;;;71     		{
;;;72     			bInChar[0] = comRbuf[comRhead];
;;;73     			DrvUART_Write(UART_PORT0,bInChar,1);
;;;74     			comRhead = (comRhead == (RXBUFSIZE-1)) ? 0 : (comRhead+1);
;;;75     			comRbytes--;
;;;76     		}
;;;77     	}
;;;78     
;;;79     }
000062  bdf8              POP      {r3-r7,pc}
                  |L1.100|
000064  2000              MOVS     r0,#0                 ;58
000066  e7f2              B        |L1.78|
                  |L1.104|
000068  0780              LSLS     r0,r0,#30             ;64
00006a  d5fa              BPL      |L1.98|
00006c  88a0              LDRH     r0,[r4,#4]            ;68  ; comRtail
00006e  8861              LDRH     r1,[r4,#2]            ;70  ; comRhead
000070  4281              CMP      r1,r0                 ;70
000072  d0f6              BEQ      |L1.98|
000074  8860              LDRH     r0,[r4,#2]            ;72  ; comRhead
000076  5c28              LDRB     r0,[r5,r0]            ;72
000078  4669              MOV      r1,sp                 ;72
00007a  7008              STRB     r0,[r1,#0]            ;72
00007c  2201              MOVS     r2,#1                 ;73
00007e  2000              MOVS     r0,#0                 ;73
000080  f7fffffe          BL       DrvUART_Write
000084  8860              LDRH     r0,[r4,#2]            ;74  ; comRhead
000086  283f              CMP      r0,#0x3f              ;74
000088  d006              BEQ      |L1.152|
00008a  8860              LDRH     r0,[r4,#2]            ;74  ; comRhead
00008c  1c40              ADDS     r0,r0,#1              ;74
                  |L1.142|
00008e  8060              STRH     r0,[r4,#2]            ;74
000090  8820              LDRH     r0,[r4,#0]            ;75  ; comRbytes
000092  1e40              SUBS     r0,r0,#1              ;75
000094  8020              STRH     r0,[r4,#0]            ;75
000096  bdf8              POP      {r3-r7,pc}
                  |L1.152|
000098  2000              MOVS     r0,#0                 ;74
00009a  e7f8              B        |L1.142|
;;;80     
                          ENDP

                  |L1.156|
00009c  ff00              DCB      255,0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L1.160|
                          DCD      ||.bss||
                  |L1.164|
                          DCD      ||.data||
                  |L1.168|
0000a8  0a496e70          DCB      "\nInput:",0
0000ac  75743a00
                  |L1.176|
                          DCD      0x40050000
                  |L1.180|
0000b4  25632000          DCB      "%c ",0
                  |L1.184|
0000b8  0a547261          DCB      "\nTransmission Test:",0
0000bc  6e736d69
0000c0  7373696f
0000c4  6e205465
0000c8  73743a00

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;86     
;;;87     int32_t main()
000000  b53e              PUSH     {r1-r5,lr}
;;;88     {
;;;89     	STR_UART_T sParam;
;;;90     
;;;91     	/* Step 1. Enable and Select UART clock source*/
;;;92     	UNLOCKREG();
000002  492b              LDR      r1,|L2.176|
000004  2059              MOVS     r0,#0x59
000006  6008              STR      r0,[r1,#0]
000008  2016              MOVS     r0,#0x16
00000a  6008              STR      r0,[r1,#0]
00000c  2088              MOVS     r0,#0x88
00000e  6008              STR      r0,[r1,#0]
;;;93         SYSCLK->PWRCON.OSC49M_EN = 1;
000010  4828              LDR      r0,|L2.180|
000012  6802              LDR      r2,[r0,#0]
000014  2304              MOVS     r3,#4
000016  431a              ORRS     r2,r2,r3
000018  6002              STR      r2,[r0,#0]
;;;94         SYSCLK->PWRCON.OSC10K_EN = 1;
00001a  6802              LDR      r2,[r0,#0]
00001c  2308              MOVS     r3,#8
00001e  431a              ORRS     r2,r2,r3
000020  6002              STR      r2,[r0,#0]
;;;95         SYSCLK->PWRCON.XTL32K_EN = 1;
000022  6802              LDR      r2,[r0,#0]
000024  2302              MOVS     r3,#2
000026  431a              ORRS     r2,r2,r3
000028  6002              STR      r2,[r0,#0]
;;;96         SYSCLK->CLKSEL0.STCLK_S = 3; //Use internal HCLK
00002a  6902              LDR      r2,[r0,#0x10]
00002c  2338              MOVS     r3,#0x38
00002e  439a              BICS     r2,r2,r3
000030  3218              ADDS     r2,r2,#0x18
000032  6102              STR      r2,[r0,#0x10]
;;;97     
;;;98     	SYSCLK->CLKSEL0.HCLK_S = 0; /* Select HCLK source as 48MHz */
000034  6902              LDR      r2,[r0,#0x10]
000036  08d2              LSRS     r2,r2,#3
000038  00d2              LSLS     r2,r2,#3
00003a  6102              STR      r2,[r0,#0x10]
;;;99     	SYSCLK->CLKDIV.HCLK_N  = 0;	/* Select no division          */
00003c  6982              LDR      r2,[r0,#0x18]
00003e  0912              LSRS     r2,r2,#4
000040  0112              LSLS     r2,r2,#4
000042  6182              STR      r2,[r0,#0x18]
;;;100    	SYSCLK->CLKSEL0.OSCFSel = 0;	/* 1= 32MHz, 0=48MHz */
000044  6902              LDR      r2,[r0,#0x10]
000046  2340              MOVS     r3,#0x40
000048  439a              BICS     r2,r2,r3
00004a  6102              STR      r2,[r0,#0x10]
;;;101    	LOCKREG();
00004c  2400              MOVS     r4,#0
00004e  600c              STR      r4,[r1,#0]
;;;102    
;;;103    	/* Step 2. GPIO initial */
;;;104    	DrvGPIO_InitFunction(FUNC_UART0);
000050  200c              MOVS     r0,#0xc
000052  f7fffffe          BL       DrvGPIO_InitFunction
;;;105    
;;;106    	/* Step 3. Select UART Operation mode */
;;;107        sParam.u32BaudRate 		= 115200;
000056  20e1              MOVS     r0,#0xe1
000058  0240              LSLS     r0,r0,#9
;;;108        sParam.u8cDataBits 		= DRVUART_DATABITS_8;
00005a  9000              STR      r0,[sp,#0]
00005c  2003              MOVS     r0,#3
00005e  4669              MOV      r1,sp
000060  7108              STRB     r0,[r1,#4]
;;;109        sParam.u8cStopBits 		= DRVUART_STOPBITS_1;
000062  714c              STRB     r4,[r1,#5]
;;;110        sParam.u8cParity 		= DRVUART_PARITY_NONE;
000064  718c              STRB     r4,[r1,#6]
;;;111        sParam.u8cRxTriggerLevel= DRVUART_FIFO_1BYTES;
000066  71cc              STRB     r4,[r1,#7]
;;;112    
;;;113    	if(DrvUART_Open(UART_PORT0,&sParam) == 0)
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       DrvUART_Open
00006e  2800              CMP      r0,#0
000070  d001              BEQ      |L2.118|
;;;114    	{
;;;115    		printf("\nUART Sample Demo. (Press '0' to exit)\n");
;;;116    
;;;117    		/* Step 4. Enable Interrupt and install the call back function */
;;;118    		DrvUART_EnableInt(UART_PORT0, (DRVUART_THREINT | DRVUART_RDAINT),UART_INT_HANDLE);
;;;119    
;;;120    		while(g_bWait);
;;;121    
;;;122    		/* Disable Interrupt */
;;;123    		DrvUART_DisableInt(UART_PORT0,DRVUART_RLSNT | DRVUART_THREINT | DRVUART_RDAINT);
;;;124    
;;;125    		/* Disable I & F bit */
;;;126    		NVIC_DisableIRQ (UART0_IRQn);
;;;127    
;;;128    		printf("\nUART Sample Demo End.\n");
;;;129    
;;;130    		/* Disable UART Clock */
;;;131    		DrvUART_Close(UART_PORT0);
;;;132    		return TRUE;
;;;133    	}
;;;134    	else
;;;135    		return FALSE;
000072  2000              MOVS     r0,#0
;;;136    }
000074  bd3e              POP      {r1-r5,pc}
                  |L2.118|
000076  a010              ADR      r0,|L2.184|
000078  f7fffffe          BL       __2printf
00007c  4a18              LDR      r2,|L2.224|
00007e  2103              MOVS     r1,#3                 ;118
000080  2000              MOVS     r0,#0                 ;118
000082  f7fffffe          BL       DrvUART_EnableInt
000086  4817              LDR      r0,|L2.228|
                  |L2.136|
000088  6881              LDR      r1,[r0,#8]            ;120  ; g_bWait
00008a  2900              CMP      r1,#0                 ;120
00008c  d1fc              BNE      |L2.136|
00008e  2107              MOVS     r1,#7                 ;123
000090  2000              MOVS     r0,#0                 ;123
000092  f7fffffe          BL       DrvUART_DisableInt
000096  2001              MOVS     r0,#1                 ;123
000098  4913              LDR      r1,|L2.232|
00009a  0300              LSLS     r0,r0,#12             ;123
00009c  6008              STR      r0,[r1,#0]            ;123
00009e  a013              ADR      r0,|L2.236|
0000a0  f7fffffe          BL       __2printf
0000a4  2000              MOVS     r0,#0                 ;131
0000a6  f7fffffe          BL       DrvUART_Close
0000aa  2001              MOVS     r0,#1                 ;132
0000ac  bd3e              POP      {r1-r5,pc}
;;;137    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L2.176|
                          DCD      0x50000100
                  |L2.180|
                          DCD      0x50000200
                  |L2.184|
0000b8  0a554152          DCB      "\nUART Sample Demo. (Press '0' to exit)\n",0
0000bc  54205361
0000c0  6d706c65
0000c4  2044656d
0000c8  6f2e2028
0000cc  50726573
0000d0  73202730
0000d4  2720746f
0000d8  20657869
0000dc  74290a00
                  |L2.224|
                          DCD      UART_INT_HANDLE
                  |L2.228|
                          DCD      ||.data||
                  |L2.232|
                          DCD      0xe000e180
                  |L2.236|
0000ec  0a554152          DCB      "\nUART Sample Demo End.\n",0
0000f0  54205361
0000f4  6d706c65
0000f8  2044656d
0000fc  6f20456e
000100  642e0a00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  comRbuf
                          %        64

                          AREA ||.data||, DATA, ALIGN=2

                  comRbytes
000000  0000              DCW      0x0000
                  comRhead
000002  0000              DCW      0x0000
                  comRtail
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  g_bWait
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "Smpl_DrvUART.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_Smpl_DrvUART_c_56b02bd2____REV16|
#line 112 "..\\..\\..\\..\\CMSIS\\CM0\\CoreSupport\\core_cmInstr.h"
|__asm___14_Smpl_DrvUART_c_56b02bd2____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_Smpl_DrvUART_c_56b02bd2____REVSH|
#line 130
|__asm___14_Smpl_DrvUART_c_56b02bd2____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
