C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE TBA_2479GZ3_01
OBJECT MODULE PLACED IN .\output\TBA-2479GZ3-01.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE TBA-2479GZ3-01.c BROWSE DEBUG OBJECTEXTEND PRINT(.\list\TBA-2479GZ3-01.lst)
                    - OBJECT(.\output\TBA-2479GZ3-01.obj)

stmt level    source

   1          #include <stc12c5620ad.h>
   2          #include <intrins.h>
   3          #include "TBA-2479GZ3-01.h"
   4          
   5          #define DEBUG
   6          
   7          #define DEBUG_SWITCH                    0x10
   8          #define VERSION                                 0x20
   9          
  10          unsigned char data base_volumn = 3;                                                             // 2014-04-02ÐÞ¸Ä£¬volume_AGC_valÒ²ÐèÐÞ¸ÄÎªvolume_AGC_val[2] = 
             -{3, 0};                                                        unsigned char data base_volumn = 6;                                     // »ù´¡ÒôÁ¿ÖµÎª6
  11          
  12          volatile unsigned char data com_timeout = TIMEOUT;
  13          
  14          unsigned char data debug_switch = 0;
  15          
  16          unsigned char data pa_on_status = 1;                                                    // PA_ON×´Ì¬±êÖ¾£¬È±Ê¡Îª¸ßµçÆ½£»¸ù¾ÝPA_ONÒý½Å×´Ì¬½øÐÐ¸ß¡¢µÍµçÆ½
             -ÇÐ»»
  17          unsigned char data pc_on_status = 1;                                                    // PC_ON×´Ì¬±êÖ¾£¬È±Ê¡Îª¸ßµçÆ½£»¸ù¾ÝPC_ONÒý½Å×´Ì¬½øÐÐ¸ß¡¢µÍµçÆ½
             -ÇÐ»»
  18          unsigned char data radio_on_status = 1;                                                 // RADIO_ON×´Ì¬±êÖ¾£¬È±Ê¡Îª¸ßµçÆ½£»¸ù¾ÝRADIO_ONÒý½Å×´Ì¬½øÐÐ¸
             -ß¡¢µÍµçÆ½ÇÐ»»
  19          
  20          unsigned char data pa_on_ctrl_self = 1;                                                 // PA_ON_CTRLÒý½Å¶¯×÷±êÖ¾£»µ±PA_ON_CTRLÒý½ÅÀ­µÍÊ±£¬ÉèÖÃpa_on
             -_ctrl_selfÎª0£»µ±PA_ON_CTRLÒý½ÅÌ§¸ßÊ±£¬ÉèÖÃpa_on_ctrl_selfÎª1£»È±Ê¡Îª1
  21          unsigned char data pc_on_ctrl_self = 1;                                                 // PC_ON_CTRLÒý½Å¶¯×÷±êÖ¾£»µ±PC_ON_CTRLÒý½ÅÀ­µÍÊ±£¬ÉèÖÃpc_on
             -_ctrl_selfÎª0£»µ±PA_ON_CTRLÒý½ÅÌ§¸ßÊ±£¬ÉèÖÃpc_on_ctrl_selfÎª1£»È±Ê¡Îª1
  22          
  23          void main(void)
  24          {
  25   1              device_init();
  26   1              
  27   1      #ifdef  DEBUG
  28   1              get_ver_info(); 
  29   1      #endif
  30   1              
  31   1              while(1)
  32   1              {
  33   2                      chk_bus_level();                        // ¼ì²âÒôÆµ×ÜÏß¹¤×÷µçÆ½
  34   2                      chk_intn_ctrl_signal();                                 // ¼ì²âÄÚ²¿¹¤×÷¿ØÖÆÐÅºÅ£¬PA_ON¡¢PC_ON¡¢RADIO_ON×´Ì¬£¬RADIO_ON - P2.5    PC_O
             -N - P2.4    PA_ON - P2.3      
  35   2                      PC_ctrl();
  36   2                      PA_ctrl();
  37   2      
  38   2                      PA_status_output();             // ÏµÍ³ÄÚÊä³ö¹ã²¥×´Ì¬
  39   2                      PC_status_output();             // ÏµÍ³ÄÚÊä³ö¶Ô½²×´Ì¬ 
  40   2      
  41   2                      prc_rx_data();
  42   2                      
  43   2                      if(com_timeout == TIMEOUT)
  44   2                              act_led_blink(50);                                      // ¹¤×÷Ö¸Ê¾µÆ¼ä¸ô500msÁÁÃð1´Î£¬¶¨Ê±Æ÷¼ä¸ô10msÖÐ¶ÏÒ»´Î
  45   2              }
  46   1      }
  47          
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 2   

  48          void chk_intn_ctrl_signal(void)                                 // ¼ì²âÄÚ²¿¹¤×÷¿ØÖÆÐÅºÅ£¬PA_ON¡¢PC_ON¡¢RADIO_ON×´Ì¬£¬RADIO_ON - P2.5  
             -  PC_ON - P2.4    PA_ON - P2.3
  49          {
  50   1              unsigned char intn_ctrl_signal;
  51   1              unsigned char tmp_intn_ctrl_signal;
  52   1      
  53   1              tmp_intn_ctrl_signal = P2 & 0x38;                       // ¶ÁÈ¡P2¿Ú5¡¢4¡¢3Î»Öµ
  54   1              delay_50us(200);                                                        // ÑÓÊ±10ms
  55   1              intn_ctrl_signal = P2 & 0x38;                           // ÔÙ´Î¶ÁÈ¡P2¿Ú5¡¢4¡¢3Î»Öµ
  56   1              if(intn_ctrl_signal != tmp_intn_ctrl_signal)    // Á½´Î¶ÁÈ¡Öµ²»Í¬£¬ÍË³öº¯Êý     
  57   1                      return;
  58   1                      
  59   1              if((intn_ctrl_signal & 0x08) == 0x08)           // Èç¹ûPA_ON - P2.3 = 1,ÄÇÃ´
  60   1              {
  61   2                      pa_on_status = 1;                                               // PA_ON×´Ì¬Îª¸ß
  62   2      
  63   2      #ifdef DEBUG
  64   2                      put_n_char("PA_ONÎª¸ßµçÆ½\r\n", 15);
  65   2      #endif
  66   2              }
  67   1              else
  68   1              {
  69   2                      pa_on_status = 0;                                               // PA_ON×´Ì¬ÎªµÍ
  70   2      
  71   2      #ifdef DEBUG
  72   2                      put_n_char("PA_ONÎªµÍµçÆ½\r\n", 15);
  73   2      #endif
  74   2              }
  75   1      
  76   1              if((intn_ctrl_signal & 0x10) == 0x10)           // Èç¹ûPC_ON - P2.4 = 1,ÄÇÃ´
  77   1              {
  78   2                      pc_on_status = 1;                                               // PC_ON×´Ì¬Îª¸ß
  79   2      
  80   2      #ifdef DEBUG
  81   2                      put_n_char("PC_ONÎª¸ßµçÆ½\r\n", 15);
  82   2      #endif
  83   2              }
  84   1              else
  85   1              {
  86   2                      pc_on_status = 0;                                               // PC_ON×´Ì¬ÎªµÍ
  87   2      
  88   2      #ifdef DEBUG
  89   2                      put_n_char("PC_ONÎªµÍµçÆ½\r\n", 15);
  90   2      #endif
  91   2              }
  92   1      
  93   1              if((intn_ctrl_signal & 0x20) == 0x20)           // Èç¹ûRADIO_ON - P2.5 = 1,ÄÇÃ´
  94   1              {
  95   2                      radio_on_status = 1;                                            // RADIO_ON×´Ì¬Îª¸ß
  96   2      
  97   2      #ifdef DEBUG
  98   2                      put_n_char("RADIO_ONÎª¸ßµçÆ½\r\n", 18);
  99   2      #endif
 100   2              }
 101   1              else
 102   1              {
 103   2                      radio_on_status = 0;                                            // RADIO_ON×´Ì¬ÎªµÍ
 104   2      
 105   2      #ifdef DEBUG
 106   2                      put_n_char("RADIO_ONÎªµÍµçÆ½\r\n", 18);
 107   2      #endif
 108   2              }                       
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 3   

 109   1      }
 110          
 111          void chk_bus_level(void)                                                // ¼ì²âÒôÆµ×ÜÏß¹¤×÷µçÆ½
 112          {
 113   1              unsigned char bus_level_chk;
 114   1              unsigned char tmp_bus_level_chk;
 115   1      
 116   1              tmp_bus_level_chk = P2 & 0x07;                  // ¶ÁÈ¡P2¿ÚµÍ3Î»Öµ
 117   1              delay_50us(200);                                                // ÑÓÊ±10ms
 118   1              bus_level_chk = P2 & 0x07;                              // ÔÙ´Î¶ÁÈ¡P2¿ÚµÍ3Î»Öµ
 119   1              if(bus_level_chk != tmp_bus_level_chk)
 120   1                      return;                                                         // Á½´Î¶ÁÈ¡Öµ²»Í¬£¬ÍË³öº¯Êý
 121   1      
 122   1              switch(bus_level_chk)                                   // RADIO_STATE_CHK - P2.2    PC_STATE_CHK - P2.1    PA_STATE_CHK - P2.0
 123   1              {
 124   2              case 7:                 // 51V
 125   2                      bus_level = LEVEL_BUS_51V;
 126   2      
 127   2      #ifdef DEBUG
 128   2                      put_n_char("ÒôÆµ×ÜÏßµçÆ½Îª51V\r\n", 19);
 129   2      #endif
 130   2                      break;
 131   2      
 132   2              case 6:                 // 39V
 133   2                      bus_level = LEVEL_BUS_39V;
 134   2      
 135   2      #ifdef DEBUG
 136   2                      put_n_char("ÒôÆµ×ÜÏßµçÆ½Îª39V\r\n", 19);
 137   2      #endif
 138   2                      break;
 139   2      
 140   2              case 4:                 // 20V
 141   2                      bus_level = LEVEL_BUS_20V;
 142   2      
 143   2      #ifdef DEBUG
 144   2                      put_n_char("ÒôÆµ×ÜÏßµçÆ½Îª20V\r\n", 19);
 145   2      #endif
 146   2                      break;
 147   2      
 148   2              case 0:                 // 0V
 149   2                      bus_level = LEVEL_BUS_0V;
 150   2      
 151   2      #ifdef DEBUG
 152   2                      put_n_char("ÒôÆµ×ÜÏßµçÆ½Îª0V\r\n", 18);
 153   2      #endif
 154   2                      break;
 155   2      
 156   2              default:
 157   2                      bus_level = 0xff;
 158   2      
 159   2      #ifdef DEBUG
 160   2                      put_n_char("ÒôÆµ×ÜÏßµçÆ½ÎªÎ´Öª\r\n", 20);
 161   2      #endif
 162   2                      break;          
 163   2              }
 164   1      }
 165          
 166          void PA_status_output(void)             // ÏµÍ³ÄÚÊä³ö¹ã²¥×´Ì¬
 167          {
 168   1              if(bus_level == LEVEL_BUS_0V)   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª0VËµÃ÷ÒôÆµ×ÜÏßÃ¦£¨ÁíÒ»¶ËÕýÔÚ½øÐÐ¹ã²¥£¬»
             -òÓÐ¶Ô½²·¢Éú£©£¬ÍË³ö
 169   1              {
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 4   

 170   2                              return;
 171   2              }
 172   1              else if((bus_level == LEVEL_BUS_39V) || (bus_level == LEVEL_BUS_20V))   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎ
             -ª39V»ò20VËµÃ÷ÒôÆµ×ÜÏßÓÐ¹ã²¥»ò¶Ô½²·¢Éú
 173   1              {
 174   2                      PA_STATE_CTRL = 0;                      //      ¶ÔÄÚ¹ã²¥×´Ì¬ÎªµÍ£¬Í¨ÖªÏµÍ³ÓÐ¹ã²¥»ò¶Ô½²
 175   2                              
 176   2                      return;
 177   2              }
 178   1              else if(bus_level == LEVEL_BUS_51V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª51V×ÜÏß¿ÕÏÐ£¬ÎÞ¹ã²¥·¢Éú
 179   1              {
 180   2                      PA_STATE_CTRL = 1;                      //      ¶ÔÄÚ¹ã²¥×´Ì¬Îª¸ß£¬Í¨ÖªÏµÍ³ÎÞ                    
 181   2                                                                                              
 182   2                      return;                                                 //£¬ÍË³ö
 183   2              }
 184   1      }
 185          
 186          void PC_status_output(void)             // ÏµÍ³ÄÚÊä³ö¶Ô½²×´Ì¬
 187          {
 188   1              if(bus_level == LEVEL_BUS_0V)   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª0VËµÃ÷ÒôÆµ×ÜÏßÃ¦£¨ÁíÒ»¶ËÕýÔÚ½øÐÐ¹ã²¥£¬»
             -òÓÐ¶Ô½²·¢Éú£©£¬ÍË³ö
 189   1              {
 190   2                      return;
 191   2              }
 192   1              else if(bus_level == LEVEL_BUS_20V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª20VËµÃ÷ÒôÆµ×ÜÏßÓÐ¶Ô½²·¢Éú
 193   1              {
 194   2                      PC_STATE_CTRL = 0;                      //      ¶ÔÄÚ¹ã²¥×´Ì¬ÎªµÍ£¬Í¨ÖªÏµÍ³¶Ô½²
 195   2                              
 196   2                      return;
 197   2              }
 198   1              else if((bus_level == LEVEL_BUS_39V) || (bus_level == LEVEL_BUS_51V))   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎ
             -ª39V»ò51V×ÜÏßÎÞ¶Ô½²·¢Éú
 199   1              {
 200   2                      PC_STATE_CTRL = 1;                      //      ¶ÔÄÚ¶Ô½²×´Ì¬Îª¸ß£¬Í¨ÖªÏµÍ³ÎÞ                    
 201   2                                                                                              
 202   2                      return;                                                 //£¬ÍË³ö
 203   2              }
 204   1      }
 205          
 206          void PC_ctrl(void)
 207          {
 208   1              if((pc_on_status == 0) && (pc_on_ctrl_self == 1))       // ¼ì²âµ½±¾¶ËPC_ON×´Ì¬ÎªµÍÇÒ±¾¶ËÃ»ÓÐ×Ô¼ºÀ­µÍÒôÆµ×ÜÏßµ½2
             -0V
 209   1              {
 210   2                      if(bus_level == LEVEL_BUS_0V)   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª0VËµÃ÷ÒôÆµ×ÜÏßÃ¦£¨ÁíÒ»¶ËÕýÔÚ½øÐÐ¹ã²¥£¬
             -»òÓÐ¶Ô½²·¢Éú£©£¬ÍË³ö
 211   2                      {
 212   3                              return;
 213   3                      }
 214   2                      else if(bus_level == LEVEL_BUS_20V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª20VËµÃ÷ÒôÆµÓÐ¶Ô½²·¢Éú£¬ÍË³ö
 215   2                      {
 216   3                              PA_PC_SWITCH = BUS_PC_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß£¬ÍË³ö
 217   3                              return;
 218   3                      }
 219   2                      else if((bus_level == LEVEL_BUS_39V) || (bus_level == LEVEL_BUS_51V))   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹û
             -Îª51V»ò39VËµÃ÷¿ÕÏÐ»òÓÐ¹ã²¥·¢Éú
 220   2                      {
 221   3                              PA_PC_SWITCH = BUS_PC_USE;              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß
 222   3      
 223   3                              PC_ON_CTRL = 0;                                 // ½«ÒôÆµ×ÜÏßÀ­µÍµ½20V£¬Í¨ÖªÏµÍ³½øÐÐ¶Ô½²
 224   3                              pc_on_ctrl_self = 0;                    // PC_ON_CTRLÒý½Å¶¯×÷±êÖ¾À­µÍ                   
 225   3                                                                                              
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 5   

 226   3                              return;                                                 //£¬ÍË³ö
 227   3                      }
 228   2              }
 229   1              else if((pc_on_status == 0) && (pc_on_ctrl_self == 0))  // ¼ì²âµ½±¾¶ËPC_ON×´Ì¬ÎªµÍÇÒ±¾¶Ë×Ô¼ºÀ­µÍÒôÆµ×ÜÏßµ½
             -20V
 230   1              {
 231   2                      if(bus_level == LEVEL_BUS_0V)   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª0VËµÃ÷ÒôÆµ×ÜÏßÃ¦£¨ÁíÒ»¶ËÕýÔÚ½øÐÐ¹ã²¥£¬
             -»òÓÐ¶Ô½²·¢Éú£©£¬ÍË³ö
 232   2                      {
 233   3                              return;
 234   3                      }
 235   2                      else if(bus_level == LEVEL_BUS_20V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª20VËµÃ÷ÒôÆµÓÐ¶Ô½²·¢Éú£¬ÍË³ö
 236   2                      {
 237   3                              return;
 238   3                      }
 239   2                      else if((bus_level == LEVEL_BUS_39V) || (bus_level == LEVEL_BUS_51V))   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹û
             -Îª51V»ò39VËµÃ÷¿ÕÏÐ»òÓÐ¹ã²¥·¢Éú
 240   2                      {
 241   3                              //PA_PC_SWITCH = BUS_PC_USE;            // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß
 242   3      
 243   3                              //PC_on_ctrl = 0;                                       // ½«ÒôÆµ×ÜÏßÀ­µÍµ½20V£¬Í¨ÖªÏµÍ³½øÐÐ¶Ô½²
 244   3                              //PC_on_ctrl_self = 0;                  // PC_ON_CTRLÒý½Å¶¯×÷±êÖ¾À­µÍ                   
 245   3                                                                                              
 246   3                              return;                                                 //£¬ÍË³ö
 247   3                      }       
 248   2              }
 249   1              else if((pc_on_status == 1) && (pc_on_ctrl_self == 0))          // ¼ì²âµ½±¾¶ËPC_ON×´Ì¬Îª¸ß£¬±¾¶ËÊÍ·Å¶Ô½²
 250   1              {
 251   2                      PC_ON_CTRL = 1;                                 // ½«ÒôÆµ×ÜÏßÀ­ÊÍ·Å20VµçÆ½£¬Í¨ÖªÏµÍ³½áÊø¶Ô½²
 252   2                      pc_on_ctrl_self = 1;                    // PC_ON_CTRLÒý½Å¶¯×÷±êÖ¾ÖÃ¸ß
 253   2              }
 254   1              else if(pc_on_status == 1)
 255   1              {
 256   2                      
 257   2                      if(bus_level == LEVEL_BUS_0V)   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª0VËµÃ÷ÒôÆµ×ÜÏßÃ¦£¨ÁíÒ»¶ËÕýÔÚ½øÐÐ¹ã²¥£¬
             -»òÓÐ¶Ô½²·¢Éú£©£¬ÍË³ö
 258   2                      {
 259   3                              return;
 260   3                      }
 261   2                      else if(bus_level == LEVEL_BUS_20V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª20VËµÃ÷ÒôÆµÓÐ¶Ô½²·¢Éú£¬ÍË³ö
 262   2                      {
 263   3                              PA_PC_SWITCH = BUS_PC_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß£¬ÍË³ö
 264   3                              return;
 265   3                      }
 266   2                      else if((bus_level == LEVEL_BUS_39V) || (bus_level == LEVEL_BUS_51V))   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹û
             -Îª51V»ò39VËµÃ÷¿ÕÏÐ»òÓÐ¹ã²¥·¢Éú
 267   2                      {
 268   3                              return;
 269   3                      }
 270   2              }
 271   1      }
 272          
 273          void PA_ctrl(void)
 274          {
 275   1              if((pa_on_status == 0) && (pa_on_ctrl_self == 1))                               // ¼ì²âµ½±¾¶ËPA_ON×´Ì¬ÎªµÍÇÒ±¾¶ËÃ»ÓÐ×Ô¼ºÀ­µÍÒôÆµ×ÜÏß
             -µçÆ½µ½39V£¬ËµÃ÷ÏµÍ³ÄÚ²¿£¨ÖÐÑë¿ØÖÆÆ÷»ò¹ã²¥¿ØÖÆºÐÄ£¿é£©½«PA_ONÀ­µÍ£¬×¼±¸½øÐÐÊý×Ö¹ã²¥»òÈË¹¤¹ã²¥
 276   1              {
 277   2                      if(pc_on_status == 0)                   // ¼ì²âµ½PA_ON×´Ì¬ÎªµÍ£¬Ðè¼ì²â´ËÊ±PC_ON×´Ì¬ÊÇ·ñÀ­µÍ£¨ÊÇ·ñ±¾¶Ë·¢³ö¶Ô½²£©£¬¶Ô½²ÓÅÏ
             -È¼¶¸ß¹ã²¥ÓÅÏÈ¼¶
 278   2                              return;                                         // PC_ON×´Ì¬À­µÍ£¬±¾¶ËÉêÇë¶Ô½²£¬²»ÄÜ½øÐÐ¹ã²¥²Ù×÷£¬ÍË³ö
 279   2      
 280   2                      if(bus_level == LEVEL_BUS_0V)   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª0VËµÃ÷ÒôÆµ×ÜÏßÃ¦£¨ÁíÒ»¶ËÕýÔÚ½øÐÐ¹ã²¥£¬
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 6   

             -»òÓÐ¶Ô½²·¢Éú£©£¬ÍË³ö
 281   2                      {
 282   3                              return;
 283   3                      }
 284   2                      else if(bus_level == LEVEL_BUS_20V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª20VËµÃ÷ÒôÆµÓÐ¶Ô½²·¢Éú£¬ÍË³ö
 285   2                      {
 286   3                              PA_PC_SWITCH = BUS_PC_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß£¬ÍË³ö
 287   3                              return;
 288   3                      }
 289   2                      else if(bus_level == LEVEL_BUS_39V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª39VËµÃ÷ÁíÒ»¶Ë·¢Æð¹ã²¥
 290   2                      {
 291   3                              PA_PC_SWITCH = BUS_PA_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¹ã²¥×ÜÏß£¬ÍË³ö
 292   3                              return; 
 293   3                      }
 294   2                      else if(bus_level == LEVEL_BUS_51V)
 295   2                      {
 296   3                              PA_ON_CTRL = 0;                                 // ÒôÆµ×ÜÏßÎª51V£¬ÒôÆµ×ÜÏß¿ÕÏÐ£¬´ËÊ±½«ÒôÆµ×ÜÏßÀ­µÍµ½39V£¬Í¨ÖªÏµÍ³½øÐÐ¹ã²¥
 297   3                              pa_on_ctrl_self = 0;                    // PA_ON_CTRLÒý½Å¶¯×÷±êÖ¾À­µÍ
 298   3      
 299   3                              PA_PC_SWITCH = BUS_PA_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¹ã²¥×ÜÏß
 300   3                      }               
 301   2              }
 302   1              else if((pa_on_status == 0) && (pa_on_ctrl_self == 0))          // ¼ì²âµ½±¾¶ËPA_ON×´Ì¬ÎªµÍÇÒ±¾¶Ë×Ô¼ºÀ­µÍÒôÆµ×ÜÏßµ
             -çÆ½µ½39V
 303   1              {
 304   2                      if(pc_on_status == 0)                   // ¼ì²âµ½PA_ON×´Ì¬ÎªµÍ£¬Ðè¼ì²â´ËÊ±PC_ON×´Ì¬ÊÇ·ñÀ­µÍ£¨ÊÇ·ñ±¾¶Ë·¢³ö¶Ô½²£©£¬¶Ô½²ÓÅÏ
             -È¼¶¸ß¹ã²¥ÓÅÏÈ¼¶
 305   2                      {
 306   3                              PA_ON_CTRL = 1;                                 // ÊÍ·ÅÒôÆµ×ÜÏßÀ­µÍ
 307   3                              pa_on_ctrl_self = 1;                    // PA_ON_CTRLÒý½Å¶¯×÷±êÖ¾ÖÃ1
 308   3      
 309   3                              PA_PC_SWITCH = BUS_PC_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß
 310   3                              
 311   3                              return;                                         // PC_ON×´Ì¬À­µÍ£¬±¾¶ËÉêÇë¶Ô½²£¬²»ÄÜ½øÐÐ¹ã²¥²Ù×÷£¬ÍË³ö
 312   3                      }
 313   2      
 314   2                      if(bus_level == LEVEL_BUS_0V)   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª0VËµÃ÷ÒôÆµ×ÜÏßÃ¦£¨ÁíÒ»¶ËÕýÔÚ½øÐÐ¹ã²¥£¬
             -»òÓÐ¶Ô½²·¢Éú£©£¬ÍË³ö
 315   2                      {
 316   3                              return;
 317   3                      }
 318   2                      else if(bus_level == LEVEL_BUS_20V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª20VËµÃ÷ÒôÆµÓÐ¶Ô½²·¢Éú£¬ÍË³ö
 319   2                      {
 320   3                              PA_ON_CTRL = 1;                                 // ÊÍ·ÅÒôÆµ×ÜÏßÀ­µÍ
 321   3                              pa_on_ctrl_self = 1;                    // PA_ON_CTRLÒý½Å¶¯×÷±êÖ¾ÖÃ1
 322   3      
 323   3                              PA_PC_SWITCH = BUS_PC_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß
 324   3      
 325   3                              return;
 326   3                      }
 327   2                      else if(bus_level == LEVEL_BUS_39V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª39VËµÃ÷ÁíÒ»¶Ë·¢Æð¹ã²¥
 328   2                      {
 329   3                              return; 
 330   3                      }
 331   2                      else if(bus_level == LEVEL_BUS_51V)
 332   2                      {
 333   3                              return;
 334   3                      }                                       
 335   2              }
 336   1              else if((pa_on_status == 1) && (pa_on_ctrl_self == 0))                  // ¼ì²âµ½±¾¶ËPA_ON×´Ì¬Îª¸ß, ÇÒÔø¾­×Ô¼º½«×ÜÏßµçÆ½
             -À­39V
 337   1              {
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 7   

 338   2                      
 339   2                      PA_ON_CTRL = 1;                                 // ÊÍ·ÅÒôÆµ×ÜÏßÀ­µÍ
 340   2                      pa_on_ctrl_self = 1;                    // PA_ON_CTRLÒý½Å¶¯×÷±êÖ¾ÖÃ1
 341   2      
 342   2                      PA_PC_SWITCH = BUS_PC_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß£¬ÍË³ö
 343   2              }
 344   1              else if(pa_on_status == 1)                      //      ¼ì²âµ½±¾¶ËPA_ON×´Ì¬Îª¸ß
 345   1              {
 346   2                      if(pc_on_status == 0)                   // ¼ì²âµ½PA_ON×´Ì¬ÎªµÍ£¬Ðè¼ì²â´ËÊ±PC_ON×´Ì¬ÊÇ·ñÀ­µÍ£¨ÊÇ·ñ±¾¶Ë·¢³ö¶Ô½²£©£¬¶Ô½²ÓÅÏ
             -È¼¶¸ß¹ã²¥ÓÅÏÈ¼¶
 347   2                              return;                                         // PC_ON×´Ì¬À­µÍ£¬±¾¶ËÉêÇë¶Ô½²£¬²»ÄÜ½øÐÐ¹ã²¥²Ù×÷£¬ÍË³ö          
 348   2      
 349   2                      if(bus_level == LEVEL_BUS_0V)   // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª0VËµÃ÷ÒôÆµ×ÜÏßÃ¦£¨ÁíÒ»¶ËÕýÔÚ½øÐÐ¹ã²¥£¬
             -»òÓÐ¶Ô½²·¢Éú£©£¬ÍË³ö
 350   2                      {
 351   3                              return;
 352   3                      }
 353   2                      else if(bus_level == LEVEL_BUS_20V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª20VËµÃ÷ÒôÆµÓÐ¶Ô½²·¢Éú£¬ÍË³ö
 354   2                      {
 355   3                              return;
 356   3                      }
 357   2                      else if(bus_level == LEVEL_BUS_39V)     // ¼ì²âÒôÆµ×ÜÏßµçÆ½ÊÇ·ñÎª51V£¬Èç¹ûÎª39VËµÃ÷ÁíÒ»¶Ë·¢Æð¹ã²¥
 358   2                      {
 359   3                              PA_PC_SWITCH = BUS_PA_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¹ã²¥×ÜÏß£¬ÍË³ö
 360   3                              return; 
 361   3                      }
 362   2                      else if(bus_level == LEVEL_BUS_51V)             // ÒôÆµ×ÜÏßÎª51V£¬ÒôÆµ×ÜÏß¿ÕÏÐ
 363   2                      {
 364   3                              PA_PC_SWITCH = BUS_PC_USE;                              // ½«ÒôÆµ×ÜÏßÇÐ»»Îª¶Ô½²×ÜÏß
 365   3                      }
 366   2              }               
 367   1      }
 368          
 369          void act_led_blink(unsigned char interval)
 370          {
 371   1              if(act_led_blink_interval >= interval)
 372   1              {
 373   2                      ACT_LED = ~ACT_LED;
 374   2                      act_led_blink_interval = 0;             
 375   2              }
 376   1      }
 377          
 378          void get_ver_info(void)
 379          {
 380   1              put_n_char("\r\n\r\n\tÉè±¸Ãû³Æ:  ÒôÁ¿µ÷½ÚÄ£¿é  TBA-2474SZ1-26\r\n", 46);
 381   1              put_n_char("\tÏîÄ¿Ãû³Æ:  ÉîÛÚµØÌú1ºÅÏß26ÁÐ³µ¸ÄÔì\r\n", 37);
 382   1              put_n_char("\t°æ±¾ÐÅÏ¢:  Ver 1.1  2014-04-04\r\n", 33);
 383   1              put_n_char("\tÖÆÔìÉÌ:    ÉîÛÚÊÐ±±º£¹ìµÀ½»Í¨¼¼ÊõÓÐÏÞ¹«Ë¾\r\n", 44);
 384   1      }
 385          
 386          unsigned char chksum(unsigned char *buf, unsigned char n)
 387          {
 388   1              unsigned char idata i;
 389   1              unsigned char idata tmp = 0;
 390   1      
 391   1              for(i = 0; i < n; i++)
 392   1                      tmp += buf[i];
 393   1      
 394   1              return(tmp);
 395   1      }
 396          
 397          void prc_rx_data(void)
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 8   

 398          {
 399   1              unsigned char data tmp; 
 400   1              static unsigned int data rx_data_len = 0;
 401   1              static unsigned char data tmp_rx_chksum;
 402   1              static unsigned char data rx_chksum; 
 403   1      
 404   1              while(get_char(&tmp))
 405   1              {
 406   2                      switch(rx_status)
 407   2                      {
 408   3                      case COM_RX_HEAD:
 409   3                              if(0x7e == tmp)
 410   3                              {
 411   4                                      rx_status = COM_RX_DATA;
 412   4                                      rx_data_len = 0;
 413   4                                      tmp_rx_chksum = 0;
 414   4                              }
 415   3                              else
 416   3                                      rx_status = COM_RX_HEAD;
 417   3                              break;
 418   3      
 419   3                      case COM_RX_DATA:
 420   3                              if(0x7e == tmp)
 421   3                              {
 422   4                                      if(rx_data_len > 0)
 423   4                                      {
 424   5                                              rx_status = COM_RX_HEAD;
 425   5                                              tmp_rx_chksum -= rx_chksum;
 426   5                                              //if(rx_chksum != (0x55 - tmp_rx_chksum))
 427   5                                              //      break;
 428   5                                              prase_rx_data(rx_data_len);
 429   5      
 430   5                                              rx_data_len = 0;
 431   5                                      }
 432   4                                      else
 433   4                                              rx_status = COM_RX_DATA;
 434   4                              }
 435   3                              else if(0x7f == tmp)
 436   3                                      rx_status = COM_RX_DLE;
 437   3                              else
 438   3                              {
 439   4                                      rx_buffer[rx_data_len++] = tmp;
 440   4                                      tmp_rx_chksum += tmp;
 441   4                                      rx_chksum = tmp;
 442   4      
 443   4                                      rx_status = COM_RX_DATA;
 444   4                              }
 445   3                              break;
 446   3      
 447   3                      case COM_RX_DLE:
 448   3                              rx_status = COM_RX_DATA;
 449   3                              if(0x80 == tmp)
 450   3                              {
 451   4                                      rx_buffer[rx_data_len++] = 0x7e;
 452   4                                      tmp_rx_chksum += 0x7e;
 453   4                                      rx_chksum = 0x7e;
 454   4                              }
 455   3                              else if(0x81 == tmp)
 456   3                              {
 457   4                                      rx_buffer[rx_data_len++] = 0x7f;
 458   4                                      tmp_rx_chksum += 0x7f;
 459   4                                      rx_chksum = 0x7f;
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 9   

 460   4                              }
 461   3                              else
 462   3                                      rx_status = COM_RX_HEAD;
 463   3                              break;
 464   3                      }
 465   2              }
 466   1      }
 467          
 468          void prase_rx_data(unsigned char len)
 469          {
 470   1              FRAME_HEADER *ptr_frame_header;
 471   1      
 472   1              ptr_frame_header = (FRAME_HEADER *)rx_buffer;
 473   1      
 474   1              if(len < 7)
 475   1                      return;
 476   1      
 477   1              switch(ptr_frame_header->cmd.bits.packet_type)
 478   1              {
 479   2              case PROCESS_PACKET:
 480   2                      break;
 481   2      
 482   2              case P2P_PACKET:
 483   2                      break;
 484   2      
 485   2              case TOKEN_PACKET:
 486   2                      if(ptr_frame_header->len != 1)
 487   2                              return;
 488   2      
 489   2                      cmd_type = rx_buffer[6];
 490   2      
 491   2                      switch(cmd_type & 0xf0)
 492   2                      {
 493   3                      case DEBUG_SWITCH:
 494   3                                      debug_switch = cmd_type & 0x01;
 495   3                              break;
 496   3      
 497   3                      case VERSION:
 498   3                              get_ver_info();
 499   3                              break;
 500   3                      }
 501   2      
 502   2                      break;
 503   2      
 504   2              case DOWNLOAD_PACKET:
 505   2                      break;
 506   2              }
 507   1      
 508   1              return;
 509   1      }
 510          
 511          unsigned char ISP_IAP_byte_read(unsigned int addr)
 512          {
 513   1              ISP_ADDRH = (unsigned char)(addr >> 8);
 514   1              ISP_ADDRL = (unsigned char)(addr & 0x00ff);
 515   1              ISP_CMD &= 0xf8;
 516   1              ISP_CMD |= ISP_IAP_BYTE_READ;
 517   1              ISP_IAP_enable();
 518   1              ISP_TRIG = 0x46;
 519   1              ISP_TRIG = 0xb9;
 520   1              _nop_();
 521   1              ISP_IAP_disable();
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 10  

 522   1      
 523   1              return(ISP_DATA);
 524   1      }
 525          
 526          void ISP_IAP_n_byte_read(unsigned int addr, unsigned int n, unsigned char *buf)
 527          {
 528   1              unsigned int data i;
 529   1      
 530   1              for(i = 0; i < n; i++)
 531   1                      buf[i] = ISP_IAP_byte_read(addr++);
 532   1      }
 533          
 534          unsigned char ISP_IAP_n_byte_program(unsigned int addr, unsigned int n, unsigned char *buf)
 535          {
 536   1              unsigned int data i = 0;
 537   1              unsigned int data in_sector_begin_addr = 0;
 538   1              unsigned int data sector_addr = 0;
 539   1      
 540   1              if(n > 256)
 541   1                      return 0;
 542   1      
 543   1              in_sector_begin_addr = addr & 0x1ff;
 544   1              if((in_sector_begin_addr + n) > 128)
 545   1                      return 0;
 546   1      
 547   1              sector_addr = (addr & 0xfe00);
 548   1              ISP_ADDRH = (unsigned char)(sector_addr >> 8);
 549   1              ISP_ADDRL = 0;
 550   1              ISP_CMD &= 0xf8;
 551   1              ISP_CMD |= ISP_IAP_SECTOR_ERASE;
 552   1              ISP_IAP_enable();
 553   1              ISP_TRIG = 0x46;
 554   1              ISP_TRIG = 0xb9;
 555   1              _nop_();
 556   1      
 557   1              for(i = 0; i < n; i++)
 558   1              {
 559   2                      ISP_ADDRH = (unsigned char)(addr >> 8);
 560   2                      ISP_ADDRL = (unsigned char)(addr & 0x00ff);
 561   2                      ISP_DATA = buf[i];
 562   2                      ISP_CMD &= 0xf8;
 563   2                      ISP_CMD |= ISP_IAP_BYTE_PROGRAM;
 564   2                      ISP_TRIG = 0x46;
 565   2                      ISP_TRIG = 0xb9;
 566   2                      _nop_();
 567   2      
 568   2                      ISP_DATA = 0;
 569   2                      ISP_CMD &= 0xf8;
 570   2                      ISP_CMD |= ISP_IAP_BYTE_READ;
 571   2                      ISP_TRIG = 0x46;
 572   2                      ISP_TRIG = 0xb9;
 573   2                      _nop_();
 574   2      
 575   2                      if(ISP_DATA != buf[i])
 576   2                      {
 577   3                              ISP_IAP_disable();
 578   3                              return 0;
 579   3                      }
 580   2      
 581   2                      addr++;
 582   2              }
 583   1      
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 11  

 584   1              ISP_IAP_disable();
 585   1      
 586   1              return 1;
 587   1      }
 588          
 589          void ISP_IAP_erase(unsigned int sector_addr)
 590          {
 591   1              ISP_ADDRH = (unsigned char)(sector_addr >> 8);
 592   1              ISP_ADDRL = 0;
 593   1      
 594   1              ISP_CMD &= 0xf8;
 595   1              ISP_CMD |= ISP_IAP_SECTOR_ERASE;
 596   1              ISP_IAP_enable();
 597   1              ISP_TRIG = 0x46;
 598   1              ISP_TRIG = 0xb9;
 599   1              _nop_();
 600   1              ISP_IAP_disable();
 601   1      }
 602          
 603          void ISP_IAP_enable(void)
 604          {
 605   1              EA = 0;
 606   1              ISP_CONTR &= 0x18;
 607   1              ISP_CONTR |= ISP_IAP_WAIT_TIME;
 608   1              ISP_CONTR |= 0x80;
 609   1      }
 610          
 611          void ISP_IAP_disable(void)
 612          {
 613   1              ISP_CONTR &= 0x7f;
 614   1              ISP_TRIG = 0x00;
 615   1              EA = 1;
 616   1      }
 617          
 618          
 619          void timer0(void) interrupt 1 using 1           // ¼ä¸ô10msÖÐ¶Ï
 620          {
 621   1              ET0 = 0;
 622   1              TR0 = 0;
 623   1              TL0 = T0_INTERVAL_L;
 624   1              TH0 = T0_INTERVAL_H;
 625   1      
 626   1              act_led_blink_interval++;
 627   1      
 628   1              if(com_timeout > TIMEOUT)
 629   1                      com_timeout--;
 630   1      
 631   1      
 632   1              TR0 = 1;
 633   1              ET0 = 1;
 634   1      }
 635          
 636          void serial(void) interrupt 4
 637          {
 638   1              if(RI)
 639   1              {
 640   2                      RI = 0;
 641   2                      rxbuf[rx_wr_index++] = SBUF;
 642   2                      if(rx_wr_index >= RX_BUF_LEN)
 643   2                              rx_wr_index = 0;
 644   2                      rx_counter++;
 645   2              }
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 12  

 646   1      }
 647          
 648          unsigned char get_char(unsigned char *pchar)
 649          {       
 650   1              if(0 == rx_counter)
 651   1                      return(0);
 652   1              
 653   1              *pchar = rxbuf[rx_rd_index++];
 654   1              if(rx_rd_index >= RX_BUF_LEN)
 655   1                      rx_rd_index = 0;
 656   1              ES = 0;
 657   1              rx_counter--;
 658   1              ES = 1; 
 659   1      
 660   1              return(1);
 661   1      }
 662          
 663          void put_n_char(unsigned char *buf, unsigned char n)
 664          {
 665   1              unsigned char data i;
 666   1      
 667   1              com_timeout = 200;
 668   1              
 669   1              ACT_LED = 0;
 670   1      
 671   1              for(i = 0; i < n; i++)
 672   1                      put_char(buf[i]);
 673   1      
 674   1              ACT_LED = 1;    
 675   1      }
 676          
 677          void put_char(unsigned char c)
 678          {
 679   1              SBUF = c;
 680   1              while(!TI);
 681   1              TI = 0;
 682   1      }
 683          
 684          void hex2ascii(unsigned char *buf, unsigned char hex)
 685          {
 686   1              unsigned char tmp, tmp_B, tmp_S, tmp_G;
 687   1      
 688   1              tmp_B = hex /100;
 689   1              tmp = hex % 100;
 690   1              if(tmp_B > 0)
 691   1                      *buf++ = tmp_B + 0x30;
 692   1              else
 693   1                      *buf++ = 0x20;
 694   1      
 695   1              tmp_S = tmp / 10;
 696   1              tmp_G = tmp % 10;
 697   1      
 698   1              if(tmp_B == 0 && tmp_S == 0)
 699   1                      *buf++ = 0x20;
 700   1              else
 701   1                      *buf++ = tmp_S + 0x30;
 702   1      
 703   1              *buf++ = tmp_G + 0x30;
 704   1      
 705   1      }
 706          
 707          void delay_50us(unsigned int _50us)     // delay 50 us for STC12C5410AD
C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 13  

 708          {
 709   1              unsigned int data i;
 710   1              unsigned char data j;
 711   1      
 712   1              for(i = 0; i < _50us; i++)
 713   1              {
 714   2                      j = 50;
 715   2                      while(j--);     
 716   2              }
 717   1      }
 718          
 719          void device_init(void)
 720          {
 721   1              EA = 0;
 722   1      
 723   1              TMOD = 0x21;                                    // T1 mode 2, T0 mode 1
 724   1              TH0 = T0_INTERVAL_H;                    // 10ms interrupt @11.0592MHz, time = (65536 - previous) * period *12
 725   1              TL0 = T0_INTERVAL_L;                    //
 726   1              ET0 = 1;                                                // enable T0 interrupt
 727   1              TR0 = 1;                                                // start up T0
 728   1       
 729   1              SCON = 0x50;                                    // UART mode 1, 8 bit, REN = 1 
 730   1              PCON = 0x00;                                    // SMOD = 0;
 731   1              TH1 = 0xfd;                                             // Baud 9600 @11.0592MHz
 732   1              TL1 = 0xfd;
 733   1              TR1 = 1;                                                // start up T1
 734   1              ES = 1;                                                 // enable UART interrupt
 735   1      
 736   1              // STC12C5620ÏµÁÐµ¥Æ¬»úÉÏµç¸´Î»ºóÎª×¼Ë«Ïò¿Ú/ÈõÉÏÀ­(´«Í³8051µÄI/O¿Ú)Ä£Ê½¡£
 737   1              // 2VÒÔÉÏÊÇÎª¸ßµçÆ½£¬0.8VÒÔÏÂÊ±ÎªµÍµçÆ½¡£Ã¿¸öI/O¿ÚÇý¶¯ÄÜÁ¦¾ù¿É´ïµ½20mA£¬
 738   1              // µ«Õû¸öÐ¾Æ¬×î´ó²»µÃ³¬¹ý55mA
 739   1              // »ùÓÚÒÔÉÏÃèÊö£¬VAUÄ£¿éÊ¹ÓÃµÄ¿ØÖÆI/O¿Ú²»ÐèÖØÐÂÅäÖÃ£¬°´È±Ê¡ÅäÖÃ¼´¿É
 740   1              ACT_LED = 0;                                    // ¹¤×÷×´Ì¬Ö¸Ê¾µÆI/O¿ÚÉÏµçÎªµÍµçÆ½£¬¹¤×÷×´Ì¬Ö¸Ê¾µÆ´¦ÓÚµãÁÁ×´Ì¬
 741   1      
 742   1              // P0¶Ë¿ÚÉèÖÃ
 743   1              P0M0 = 0x00;
 744   1              P0M1 = 0x08;                                    // P0.3ÉèÎªÇ¿ÍÆÍì
 745   1      
 746   1              PA_ON_CTRL = 1;                                 // ¹ã²¥×´Ì¬Ïß¿ØÖÆI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊä³ö¿Ú£»¹ã²¥ÒôÆµ±äÑ¹Æ÷ÖÐÐÄ³éÍ·µçÑ¹Îª51V
 747   1              PC_ON_CTRL = 1;                                 // ¶Ô½²×´Ì¬Ïß¿ØÖÆI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊä³ö¿Ú£»¹ã²¥ÒôÆµ±äÑ¹Æ÷ÖÐÐÄ³éÍ·µçÑ¹Îª51V
 748   1              RADIO_ON_CTRL = 1;                              // ÎÞÏß¹ã²¥×´Ì¬¿ØÖÆI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊä³ö¿Ú£»¹ã²¥ÒôÆµ±äÑ¹Æ÷ÖÐÐÄ³éÍ·µçÑ¹Îª51
             -V
 749   1              PA_PC_SWITCH = BUS_PC_USE;                              // ¹ã²¥¡¢¶Ô½²ÇÐ»»¿ØÖÆI/O¿ÚÉÏµçÎªµÍµçÆ½£¬I/O¿ÚÎªÊä³ö¿Ú£»È±Ê¡Ê±ÒôÆµ×ÜÏß×÷¶Ô½²
             -×ÜÏßÊ¹ÓÃ
 750   1      
 751   1              // P2¶Ë¿ÚÉèÖÃ
 752   1              PA_STATE_CHK = 1;                               // ×ÜÏß¹ã²¥×´Ì¬¼ì²âI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊäÈë¿Ú
 753   1              PC_STATE_CHK = 1;                               // ×ÜÏß¶Ô½²×´Ì¬¼ì²âI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊäÈë¿Ú
 754   1              RADIO_STATE_CHK = 1;                    // ×ÜÏßÎÞÏß¹ã²¥×´Ì¬¼ì²âI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊäÈë¿Ú
 755   1              PA_ON_CHK = 1;                                  // ÄÚ²¿¹ã²¥¿ØÖÆ¼ì²âI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊäÈë¿Ú
 756   1              PC_ON_CHK = 1;                                  // ÄÚ²¿¶Ô½²¿ØÖÆ¼ì²âI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊäÈë¿Ú
 757   1              PADIO_CTRL_CHK = 1;                             // ÎÞÏß¹ã²¥×´Ì¬¼ì²âI/O¿ÚÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊäÈë¿Ú
 758   1              PA_STATE_CTRL = 1;                              // ÄÚ²¿¹ã²¥×´Ì¬¿ØÖÆI/OÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊä³ö¿Ú£»È±Ê¡Îª¸ßµçÆ½ 
 759   1              PC_STATE_CTRL = 1;                              // ÄÚ²¿¶Ô½²×´Ì¬¿ØÖÆI/OÉÏµçÎª¸ßµçÆ½£¬I/O¿ÚÎªÊä³ö¿Ú£»È±Ê¡Îª¸ßµçÆ½
 760   1      
 761   1              com_rx_status = COM_RX_HEAD;
 762   1      
 763   1              bus_level = LEVEL_BUS_51V;              // ³õÊ¼»¯×ÜÏßµçÆ½Îª51V
 764   1              
 765   1              EA = 1; 
 766   1      }

C51 COMPILER V7.06   TBA_2479GZ3_01                                                        10/06/2014 17:15:33 PAGE 14  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1729    ----
   CONSTANT SIZE    =    366    ----
   XDATA SIZE       =    176    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24      33
   IDATA SIZE       =   ----       2
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
